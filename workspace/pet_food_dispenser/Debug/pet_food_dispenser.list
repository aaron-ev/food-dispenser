
pet_food_dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002484  08002484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800248c  0800248c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080024a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080024a0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac64  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b2  00000000  00000000  0002aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020558  00000000  00000000  0002d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000add8  00000000  00000000  0004dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce6e4  00000000  00000000  00058ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  001271e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002454 	.word	0x08002454

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002454 	.word	0x08002454

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 f9d6 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f806 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f89c 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f870 	bl	8000608 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x14>
	...

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2234      	movs	r2, #52	; 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f001 ff82 	bl	8002444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a29      	ldr	r2, [pc, #164]	; (8000600 <SystemClock_Config+0xd4>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <SystemClock_Config+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <SystemClock_Config+0xd8>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <SystemClock_Config+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 ffc0 	bl	8001540 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005c6:	f000 f8b7 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2102      	movs	r1, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fc60 	bl	8000eac <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005f2:	f000 f8a1 	bl	8000738 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f001 fa1c 	bl	8001a7c <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f875 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_GPIO_Init+0xd0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <MX_GPIO_Init+0xd0>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <MX_GPIO_Init+0xd0>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1e      	ldr	r2, [pc, #120]	; (800072c <MX_GPIO_Init+0xd0>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <MX_GPIO_Init+0xd0>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006e8:	f000 fbc6 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_GPIO_Init+0xd8>)
 8000704:	f000 fa24 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000720:	f000 fa16 	bl	8000b50 <HAL_GPIO_Init>

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020800 	.word	0x40020800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 f9b0 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_UART_MspInit+0x84>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d12b      	bne.n	800080e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_UART_MspInit+0x88>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_UART_MspInit+0x88>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_UART_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_UART_MspInit+0x88>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_UART_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ee:	230c      	movs	r3, #12
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fe:	2307      	movs	r3, #7
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <HAL_UART_MspInit+0x8c>)
 800080a:	f000 f9a1 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40004400 	.word	0x40004400
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000890:	4c0b      	ldr	r4, [pc, #44]	; (80008c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800089e:	f7ff ffd7 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a2:	f001 fdab 	bl	80023fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fe35 	bl	8000514 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08002494 	.word	0x08002494
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	200000fc 	.word	0x200000fc

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f8f9 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff22 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f903 	bl	8000b36 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f8d9 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000006c 	.word	0x2000006c

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff47 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff5c 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb0 	bl	8000aa4 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e165      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f040 8154 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d130      	bne.n	8000c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d017      	beq.n	8000c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d123      	bne.n	8000c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	69b9      	ldr	r1, [r7, #24]
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0203 	and.w	r2, r3, #3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80ae 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <HAL_GPIO_Init+0x300>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a5c      	ldr	r2, [pc, #368]	; (8000e50 <HAL_GPIO_Init+0x300>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	; (8000e50 <HAL_GPIO_Init+0x300>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf2:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4f      	ldr	r2, [pc, #316]	; (8000e58 <HAL_GPIO_Init+0x308>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d025      	beq.n	8000d6a <HAL_GPIO_Init+0x21a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4e      	ldr	r2, [pc, #312]	; (8000e5c <HAL_GPIO_Init+0x30c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d01f      	beq.n	8000d66 <HAL_GPIO_Init+0x216>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4d      	ldr	r2, [pc, #308]	; (8000e60 <HAL_GPIO_Init+0x310>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d019      	beq.n	8000d62 <HAL_GPIO_Init+0x212>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4c      	ldr	r2, [pc, #304]	; (8000e64 <HAL_GPIO_Init+0x314>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x20e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <HAL_GPIO_Init+0x318>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x20a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4a      	ldr	r2, [pc, #296]	; (8000e6c <HAL_GPIO_Init+0x31c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x206>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <HAL_GPIO_Init+0x320>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x202>
 8000d4e:	2306      	movs	r3, #6
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f ae96 	bls.w	8000b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	619a      	str	r2, [r3, #24]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0cc      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec0:	4b68      	ldr	r3, [pc, #416]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d90c      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ece:	4b65      	ldr	r3, [pc, #404]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0b8      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d020      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f00:	4b59      	ldr	r3, [pc, #356]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4a58      	ldr	r2, [pc, #352]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f18:	4b53      	ldr	r3, [pc, #332]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f24:	4b50      	ldr	r3, [pc, #320]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	494d      	ldr	r1, [pc, #308]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d044      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d119      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e07f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d003      	beq.n	8000f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d107      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e06f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e067      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f023 0203 	bic.w	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fce6 	bl	800096c <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	e00a      	b.n	8000fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa4:	f7ff fce2 	bl	800096c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e04f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 020c 	and.w	r2, r3, #12
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d1eb      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d20c      	bcs.n	8000ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e032      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4916      	ldr	r1, [pc, #88]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800100e:	4313      	orrs	r3, r2
 8001010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	490e      	ldr	r1, [pc, #56]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	4313      	orrs	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001032:	f000 f855 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 8001036:	4602      	mov	r2, r0
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	490a      	ldr	r1, [pc, #40]	; (800106c <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	5ccb      	ldrb	r3, [r1, r3]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_RCC_ClockConfig+0x1c8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fc5a 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00
 8001068:	40023800 	.word	0x40023800
 800106c:	0800246c 	.word	0x0800246c
 8001070:	20000000 	.word	0x20000000
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_RCC_GetHCLKFreq+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000

08001090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001094:	f7ff fff0 	bl	8001078 <HAL_RCC_GetHCLKFreq>
 8001098:	4602      	mov	r2, r0
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	0a9b      	lsrs	r3, r3, #10
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	4903      	ldr	r1, [pc, #12]	; (80010b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010a6:	5ccb      	ldrb	r3, [r1, r3]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	0800247c 	.word	0x0800247c

080010b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010bc:	f7ff ffdc 	bl	8001078 <HAL_RCC_GetHCLKFreq>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	0b5b      	lsrs	r3, r3, #13
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	4903      	ldr	r1, [pc, #12]	; (80010dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80010ce:	5ccb      	ldrb	r3, [r1, r3]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	0800247c 	.word	0x0800247c

080010e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	b0ae      	sub	sp, #184	; 0xb8
 80010e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001106:	4bcb      	ldr	r3, [pc, #812]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b0c      	cmp	r3, #12
 8001110:	f200 8206 	bhi.w	8001520 <HAL_RCC_GetSysClockFreq+0x440>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001151 	.word	0x08001151
 8001120:	08001521 	.word	0x08001521
 8001124:	08001521 	.word	0x08001521
 8001128:	08001521 	.word	0x08001521
 800112c:	08001159 	.word	0x08001159
 8001130:	08001521 	.word	0x08001521
 8001134:	08001521 	.word	0x08001521
 8001138:	08001521 	.word	0x08001521
 800113c:	08001161 	.word	0x08001161
 8001140:	08001521 	.word	0x08001521
 8001144:	08001521 	.word	0x08001521
 8001148:	08001521 	.word	0x08001521
 800114c:	08001351 	.word	0x08001351
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001150:	4bb9      	ldr	r3, [pc, #740]	; (8001438 <HAL_RCC_GetSysClockFreq+0x358>)
 8001152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001156:	e1e7      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001158:	4bb8      	ldr	r3, [pc, #736]	; (800143c <HAL_RCC_GetSysClockFreq+0x35c>)
 800115a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800115e:	e1e3      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001160:	4bb4      	ldr	r3, [pc, #720]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800116c:	4bb1      	ldr	r3, [pc, #708]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d071      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001178:	4bae      	ldr	r3, [pc, #696]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	2200      	movs	r2, #0
 8001180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001184:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800118c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001190:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800119a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800119e:	4622      	mov	r2, r4
 80011a0:	462b      	mov	r3, r5
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	f04f 0100 	mov.w	r1, #0
 80011aa:	0159      	lsls	r1, r3, #5
 80011ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011b0:	0150      	lsls	r0, r2, #5
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4621      	mov	r1, r4
 80011b8:	1a51      	subs	r1, r2, r1
 80011ba:	6439      	str	r1, [r7, #64]	; 0x40
 80011bc:	4629      	mov	r1, r5
 80011be:	eb63 0301 	sbc.w	r3, r3, r1
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80011d0:	4649      	mov	r1, r9
 80011d2:	018b      	lsls	r3, r1, #6
 80011d4:	4641      	mov	r1, r8
 80011d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011da:	4641      	mov	r1, r8
 80011dc:	018a      	lsls	r2, r1, #6
 80011de:	4641      	mov	r1, r8
 80011e0:	1a51      	subs	r1, r2, r1
 80011e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80011e4:	4649      	mov	r1, r9
 80011e6:	eb63 0301 	sbc.w	r3, r3, r1
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80011f8:	4649      	mov	r1, r9
 80011fa:	00cb      	lsls	r3, r1, #3
 80011fc:	4641      	mov	r1, r8
 80011fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001202:	4641      	mov	r1, r8
 8001204:	00ca      	lsls	r2, r1, #3
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	4603      	mov	r3, r0
 800120c:	4622      	mov	r2, r4
 800120e:	189b      	adds	r3, r3, r2
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
 8001212:	462b      	mov	r3, r5
 8001214:	460a      	mov	r2, r1
 8001216:	eb42 0303 	adc.w	r3, r2, r3
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001228:	4629      	mov	r1, r5
 800122a:	024b      	lsls	r3, r1, #9
 800122c:	4621      	mov	r1, r4
 800122e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001232:	4621      	mov	r1, r4
 8001234:	024a      	lsls	r2, r1, #9
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800123e:	2200      	movs	r2, #0
 8001240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001244:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001248:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800124c:	f7fe ffe0 	bl	8000210 <__aeabi_uldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4613      	mov	r3, r2
 8001256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800125a:	e067      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125c:	4b75      	ldr	r3, [pc, #468]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	2200      	movs	r2, #0
 8001264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001268:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800126c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001274:	67bb      	str	r3, [r7, #120]	; 0x78
 8001276:	2300      	movs	r3, #0
 8001278:	67fb      	str	r3, [r7, #124]	; 0x7c
 800127a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800127e:	4622      	mov	r2, r4
 8001280:	462b      	mov	r3, r5
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f04f 0100 	mov.w	r1, #0
 800128a:	0159      	lsls	r1, r3, #5
 800128c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001290:	0150      	lsls	r0, r2, #5
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4621      	mov	r1, r4
 8001298:	1a51      	subs	r1, r2, r1
 800129a:	62b9      	str	r1, [r7, #40]	; 0x28
 800129c:	4629      	mov	r1, r5
 800129e:	eb63 0301 	sbc.w	r3, r3, r1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80012b0:	4649      	mov	r1, r9
 80012b2:	018b      	lsls	r3, r1, #6
 80012b4:	4641      	mov	r1, r8
 80012b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012ba:	4641      	mov	r1, r8
 80012bc:	018a      	lsls	r2, r1, #6
 80012be:	4641      	mov	r1, r8
 80012c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80012c4:	4649      	mov	r1, r9
 80012c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80012d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80012da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012de:	4692      	mov	sl, r2
 80012e0:	469b      	mov	fp, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	eb1a 0303 	adds.w	r3, sl, r3
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	462b      	mov	r3, r5
 80012ec:	eb4b 0303 	adc.w	r3, fp, r3
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80012fe:	4629      	mov	r1, r5
 8001300:	028b      	lsls	r3, r1, #10
 8001302:	4621      	mov	r1, r4
 8001304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001308:	4621      	mov	r1, r4
 800130a:	028a      	lsls	r2, r1, #10
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001314:	2200      	movs	r2, #0
 8001316:	673b      	str	r3, [r7, #112]	; 0x70
 8001318:	677a      	str	r2, [r7, #116]	; 0x74
 800131a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800131e:	f7fe ff77 	bl	8000210 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4613      	mov	r3, r2
 8001328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	3301      	adds	r3, #1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800133e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800134e:	e0eb      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d06b      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_RCC_GetSysClockFreq+0x354>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	2200      	movs	r2, #0
 8001370:	66bb      	str	r3, [r7, #104]	; 0x68
 8001372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137a:	663b      	str	r3, [r7, #96]	; 0x60
 800137c:	2300      	movs	r3, #0
 800137e:	667b      	str	r3, [r7, #100]	; 0x64
 8001380:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001384:	4622      	mov	r2, r4
 8001386:	462b      	mov	r3, r5
 8001388:	f04f 0000 	mov.w	r0, #0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	0159      	lsls	r1, r3, #5
 8001392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001396:	0150      	lsls	r0, r2, #5
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4621      	mov	r1, r4
 800139e:	1a51      	subs	r1, r2, r1
 80013a0:	61b9      	str	r1, [r7, #24]
 80013a2:	4629      	mov	r1, r5
 80013a4:	eb63 0301 	sbc.w	r3, r3, r1
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80013b6:	4659      	mov	r1, fp
 80013b8:	018b      	lsls	r3, r1, #6
 80013ba:	4651      	mov	r1, sl
 80013bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013c0:	4651      	mov	r1, sl
 80013c2:	018a      	lsls	r2, r1, #6
 80013c4:	4651      	mov	r1, sl
 80013c6:	ebb2 0801 	subs.w	r8, r2, r1
 80013ca:	4659      	mov	r1, fp
 80013cc:	eb63 0901 	sbc.w	r9, r3, r1
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	eb18 0303 	adds.w	r3, r8, r3
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	462b      	mov	r3, r5
 80013f2:	eb49 0303 	adc.w	r3, r9, r3
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001404:	4629      	mov	r1, r5
 8001406:	024b      	lsls	r3, r1, #9
 8001408:	4621      	mov	r1, r4
 800140a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800140e:	4621      	mov	r1, r4
 8001410:	024a      	lsls	r2, r1, #9
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800141a:	2200      	movs	r2, #0
 800141c:	65bb      	str	r3, [r7, #88]	; 0x58
 800141e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001424:	f7fe fef4 	bl	8000210 <__aeabi_uldivmod>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4613      	mov	r3, r2
 800142e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001432:	e065      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0x420>
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_GetSysClockFreq+0x458>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	4618      	mov	r0, r3
 800144a:	4611      	mov	r1, r2
 800144c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001450:	653b      	str	r3, [r7, #80]	; 0x50
 8001452:	2300      	movs	r3, #0
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
 8001456:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800145a:	4642      	mov	r2, r8
 800145c:	464b      	mov	r3, r9
 800145e:	f04f 0000 	mov.w	r0, #0
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	0159      	lsls	r1, r3, #5
 8001468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800146c:	0150      	lsls	r0, r2, #5
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4641      	mov	r1, r8
 8001474:	1a51      	subs	r1, r2, r1
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	4649      	mov	r1, r9
 800147a:	eb63 0301 	sbc.w	r3, r3, r1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800148c:	4659      	mov	r1, fp
 800148e:	018b      	lsls	r3, r1, #6
 8001490:	4651      	mov	r1, sl
 8001492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001496:	4651      	mov	r1, sl
 8001498:	018a      	lsls	r2, r1, #6
 800149a:	4651      	mov	r1, sl
 800149c:	1a54      	subs	r4, r2, r1
 800149e:	4659      	mov	r1, fp
 80014a0:	eb63 0501 	sbc.w	r5, r3, r1
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	00eb      	lsls	r3, r5, #3
 80014ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014b2:	00e2      	lsls	r2, r4, #3
 80014b4:	4614      	mov	r4, r2
 80014b6:	461d      	mov	r5, r3
 80014b8:	4643      	mov	r3, r8
 80014ba:	18e3      	adds	r3, r4, r3
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	464b      	mov	r3, r9
 80014c0:	eb45 0303 	adc.w	r3, r5, r3
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014d2:	4629      	mov	r1, r5
 80014d4:	028b      	lsls	r3, r1, #10
 80014d6:	4621      	mov	r1, r4
 80014d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014dc:	4621      	mov	r1, r4
 80014de:	028a      	lsls	r2, r1, #10
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e8:	2200      	movs	r2, #0
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80014ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014f2:	f7fe fe8d 	bl	8000210 <__aeabi_uldivmod>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4613      	mov	r3, r2
 80014fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_GetSysClockFreq+0x458>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	0f1b      	lsrs	r3, r3, #28
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800150e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800151e:	e003      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800152c:	4618      	mov	r0, r3
 800152e:	37b8      	adds	r7, #184	; 0xb8
 8001530:	46bd      	mov	sp, r7
 8001532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	00f42400 	.word	0x00f42400

08001540 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e28d      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8083 	beq.w	8001666 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001560:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d019      	beq.n	80015a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800156c:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001574:	2b08      	cmp	r3, #8
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001578:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001584:	d00c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001586:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d05b      	beq.n	8001664 <HAL_RCC_OscConfig+0x124>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d157      	bne.n	8001664 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e25a      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x90>
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7b      	ldr	r2, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xcc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xb4>
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xcc>
 80015f4:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6b      	ldr	r2, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff f9aa 	bl	800096c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff f9a6 	bl	800096c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e21f      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xdc>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff f996 	bl	800096c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff f992 	bl	800096c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e20b      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x104>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06f      	beq.n	8001752 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001672:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d017      	beq.n	80016ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d105      	bne.n	8001696 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x186>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1d3      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_RCC_OscConfig+0x278>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff f93f 	bl	800096c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff f93b 	bl	800096c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1b4      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4925      	ldr	r1, [pc, #148]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x278>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f91e 	bl	800096c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff f91a 	bl	800096c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e193      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d036      	beq.n	80017cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f8fe 	bl	800096c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff f8fa 	bl	800096c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e173      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x234>
 8001792:	e01b      	b.n	80017cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_OscConfig+0x27c>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff f8e7 	bl	800096c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	e00e      	b.n	80017c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff f8e3 	bl	800096c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d907      	bls.n	80017c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e15c      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
 80017bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	4b8a      	ldr	r3, [pc, #552]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80017c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ea      	bne.n	80017a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8097 	beq.w	8001908 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017de:	4b83      	ldr	r3, [pc, #524]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a7e      	ldr	r2, [pc, #504]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b79      	ldr	r3, [pc, #484]	; (80019f0 <HAL_RCC_OscConfig+0x4b0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d118      	bne.n	8001848 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4b0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a75      	ldr	r2, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4b0>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff f8a3 	bl	800096c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182a:	f7ff f89f 	bl	800096c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e118      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b6c      	ldr	r3, [pc, #432]	; (80019f0 <HAL_RCC_OscConfig+0x4b0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x31e>
 8001850:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	e01c      	b.n	8001898 <HAL_RCC_OscConfig+0x358>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x340>
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a5d      	ldr	r2, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0x358>
 8001880:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a56      	ldr	r2, [pc, #344]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001892:	f023 0304 	bic.w	r3, r3, #4
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d015      	beq.n	80018cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f864 	bl	800096c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff f860 	bl	800096c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0d7      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ee      	beq.n	80018a8 <HAL_RCC_OscConfig+0x368>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f84e 	bl	800096c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff f84a 	bl	800096c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0c1      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ee      	bne.n	80018d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80ad 	beq.w	8001a6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d060      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d145      	bne.n	80019b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x4b4>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f81e 	bl	800096c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f81a 	bl	800096c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e093      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	071b      	lsls	r3, r3, #28
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x4b4>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7fe ffef 	bl	800096c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe ffeb 	bl	800096c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e064      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x452>
 80019b0:	e05c      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x4b4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7fe ffd8 	bl	800096c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe ffd4 	bl	800096c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04d      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x480>
 80019de:	e045      	b.n	8001a6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e040      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_OscConfig+0x538>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d030      	beq.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d129      	bne.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d122      	bne.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d119      	bne.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d10f      	bne.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e03f      	b.n	8001b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe fe76 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2224      	movs	r2, #36	; 0x24
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f829 	bl	8001b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b0c0      	sub	sp, #256	; 0x100
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	ea40 0301 	orr.w	r3, r0, r1
 8001b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b70:	f021 010c 	bic.w	r1, r1, #12
 8001b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b92:	6999      	ldr	r1, [r3, #24]
 8001b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	ea40 0301 	orr.w	r3, r0, r1
 8001b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b8f      	ldr	r3, [pc, #572]	; (8001de4 <UART_SetConfig+0x2cc>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d005      	beq.n	8001bb8 <UART_SetConfig+0xa0>
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b8d      	ldr	r3, [pc, #564]	; (8001de8 <UART_SetConfig+0x2d0>)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d104      	bne.n	8001bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bb8:	f7ff fa7e 	bl	80010b8 <HAL_RCC_GetPCLK2Freq>
 8001bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001bc0:	e003      	b.n	8001bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bc2:	f7ff fa65 	bl	8001090 <HAL_RCC_GetPCLK1Freq>
 8001bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd4:	f040 810c 	bne.w	8001df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	1891      	adds	r1, r2, r2
 8001bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bf2:	415b      	adcs	r3, r3
 8001bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	eb12 0801 	adds.w	r8, r2, r1
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb43 0901 	adc.w	r9, r3, r1
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c1a:	4690      	mov	r8, r2
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	eb18 0303 	adds.w	r3, r8, r3
 8001c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c28:	462b      	mov	r3, r5
 8001c2a:	eb49 0303 	adc.w	r3, r9, r3
 8001c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c46:	460b      	mov	r3, r1
 8001c48:	18db      	adds	r3, r3, r3
 8001c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	eb42 0303 	adc.w	r3, r2, r3
 8001c52:	657b      	str	r3, [r7, #84]	; 0x54
 8001c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c5c:	f7fe fad8 	bl	8000210 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <UART_SetConfig+0x2d4>)
 8001c66:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	011c      	lsls	r4, r3, #4
 8001c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c80:	4642      	mov	r2, r8
 8001c82:	464b      	mov	r3, r9
 8001c84:	1891      	adds	r1, r2, r2
 8001c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c88:	415b      	adcs	r3, r3
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c90:	4641      	mov	r1, r8
 8001c92:	eb12 0a01 	adds.w	sl, r2, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	eb43 0b01 	adc.w	fp, r3, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cb0:	4692      	mov	sl, r2
 8001cb2:	469b      	mov	fp, r3
 8001cb4:	4643      	mov	r3, r8
 8001cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8001cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8001cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	18db      	adds	r3, r3, r3
 8001ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	eb42 0303 	adc.w	r3, r2, r3
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cf2:	f7fe fa8d 	bl	8000210 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <UART_SetConfig+0x2d4>)
 8001cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	1acb      	subs	r3, r1, r3
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <UART_SetConfig+0x2d4>)
 8001d14:	fba3 2302 	umull	r2, r3, r3, r2
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d20:	441c      	add	r4, r3
 8001d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d34:	4642      	mov	r2, r8
 8001d36:	464b      	mov	r3, r9
 8001d38:	1891      	adds	r1, r2, r2
 8001d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d3c:	415b      	adcs	r3, r3
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d44:	4641      	mov	r1, r8
 8001d46:	1851      	adds	r1, r2, r1
 8001d48:	6339      	str	r1, [r7, #48]	; 0x30
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	414b      	adcs	r3, r1
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	00cb      	lsls	r3, r1, #3
 8001d60:	4651      	mov	r1, sl
 8001d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d66:	4651      	mov	r1, sl
 8001d68:	00ca      	lsls	r2, r1, #3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4642      	mov	r2, r8
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d78:	464b      	mov	r3, r9
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	eb42 0303 	adc.w	r3, r2, r3
 8001d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001d98:	460b      	mov	r3, r1
 8001d9a:	18db      	adds	r3, r3, r3
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9e:	4613      	mov	r3, r2
 8001da0:	eb42 0303 	adc.w	r3, r2, r3
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dae:	f7fe fa2f 	bl	8000210 <__aeabi_uldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <UART_SetConfig+0x2d4>)
 8001db8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	2164      	movs	r1, #100	; 0x64
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	3332      	adds	r3, #50	; 0x32
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <UART_SetConfig+0x2d4>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	f003 0207 	and.w	r2, r3, #7
 8001dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4422      	add	r2, r4
 8001dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001de0:	e105      	b.n	8001fee <UART_SetConfig+0x4d6>
 8001de2:	bf00      	nop
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40011400 	.word	0x40011400
 8001dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df4:	2200      	movs	r2, #0
 8001df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e02:	4642      	mov	r2, r8
 8001e04:	464b      	mov	r3, r9
 8001e06:	1891      	adds	r1, r2, r2
 8001e08:	6239      	str	r1, [r7, #32]
 8001e0a:	415b      	adcs	r3, r3
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	4641      	mov	r1, r8
 8001e14:	1854      	adds	r4, r2, r1
 8001e16:	4649      	mov	r1, r9
 8001e18:	eb43 0501 	adc.w	r5, r3, r1
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	00eb      	lsls	r3, r5, #3
 8001e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2a:	00e2      	lsls	r2, r4, #3
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	18e3      	adds	r3, r4, r3
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e38:	464b      	mov	r3, r9
 8001e3a:	eb45 0303 	adc.w	r3, r5, r3
 8001e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e5e:	4629      	mov	r1, r5
 8001e60:	008b      	lsls	r3, r1, #2
 8001e62:	4621      	mov	r1, r4
 8001e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e68:	4621      	mov	r1, r4
 8001e6a:	008a      	lsls	r2, r1, #2
 8001e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e70:	f7fe f9ce 	bl	8000210 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4b60      	ldr	r3, [pc, #384]	; (8001ffc <UART_SetConfig+0x4e4>)
 8001e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	011c      	lsls	r4, r3, #4
 8001e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	61b9      	str	r1, [r7, #24]
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	1851      	adds	r1, r2, r1
 8001ea8:	6139      	str	r1, [r7, #16]
 8001eaa:	4649      	mov	r1, r9
 8001eac:	414b      	adcs	r3, r1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ed8:	464b      	mov	r3, r9
 8001eda:	460a      	mov	r2, r1
 8001edc:	eb42 0303 	adc.w	r3, r2, r3
 8001ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001efc:	4649      	mov	r1, r9
 8001efe:	008b      	lsls	r3, r1, #2
 8001f00:	4641      	mov	r1, r8
 8001f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f06:	4641      	mov	r1, r8
 8001f08:	008a      	lsls	r2, r1, #2
 8001f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f0e:	f7fe f97f 	bl	8000210 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <UART_SetConfig+0x4e4>)
 8001f18:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	2164      	movs	r1, #100	; 0x64
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	3332      	adds	r3, #50	; 0x32
 8001f2a:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <UART_SetConfig+0x4e4>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f36:	441c      	add	r4, r3
 8001f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8001f40:	677a      	str	r2, [r7, #116]	; 0x74
 8001f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f46:	4642      	mov	r2, r8
 8001f48:	464b      	mov	r3, r9
 8001f4a:	1891      	adds	r1, r2, r2
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	415b      	adcs	r3, r3
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f56:	4641      	mov	r1, r8
 8001f58:	1851      	adds	r1, r2, r1
 8001f5a:	6039      	str	r1, [r7, #0]
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	414b      	adcs	r3, r1
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f6e:	4659      	mov	r1, fp
 8001f70:	00cb      	lsls	r3, r1, #3
 8001f72:	4651      	mov	r1, sl
 8001f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f78:	4651      	mov	r1, sl
 8001f7a:	00ca      	lsls	r2, r1, #3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4603      	mov	r3, r0
 8001f82:	4642      	mov	r2, r8
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f88:	464b      	mov	r3, r9
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	eb42 0303 	adc.w	r3, r2, r3
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001faa:	4649      	mov	r1, r9
 8001fac:	008b      	lsls	r3, r1, #2
 8001fae:	4641      	mov	r1, r8
 8001fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	008a      	lsls	r2, r1, #2
 8001fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fbc:	f7fe f928 	bl	8000210 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <UART_SetConfig+0x4e4>)
 8001fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2164      	movs	r1, #100	; 0x64
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <UART_SetConfig+0x4e4>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4422      	add	r2, r4
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	bf00      	nop
 8001ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffa:	bf00      	nop
 8001ffc:	51eb851f 	.word	0x51eb851f

08002000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800200a:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <xTaskIncrementTick+0x200>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 80ec 	bne.w	80021ec <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002014:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <xTaskIncrementTick+0x204>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <xTaskIncrementTick+0x204>)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d120      	bne.n	800206a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002028:	4b77      	ldr	r3, [pc, #476]	; (8002208 <xTaskIncrementTick+0x208>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <xTaskIncrementTick+0x46>
 8002048:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <xTaskIncrementTick+0x208>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	4b6f      	ldr	r3, [pc, #444]	; (800220c <xTaskIncrementTick+0x20c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6d      	ldr	r2, [pc, #436]	; (8002208 <xTaskIncrementTick+0x208>)
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <xTaskIncrementTick+0x20c>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <xTaskIncrementTick+0x210>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <xTaskIncrementTick+0x210>)
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	f000 f93d 	bl	80022e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800206a:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <xTaskIncrementTick+0x214>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a3a      	ldr	r2, [r7, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	f0c0 80a6 	bcc.w	80021c2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <xTaskIncrementTick+0x208>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d104      	bne.n	800208a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <xTaskIncrementTick+0x214>)
 8002082:	f04f 32ff 	mov.w	r2, #4294967295
 8002086:	601a      	str	r2, [r3, #0]
                    break;
 8002088:	e09b      	b.n	80021c2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <xTaskIncrementTick+0x208>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d203      	bcs.n	80020aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <xTaskIncrementTick+0x214>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020a8:	e08b      	b.n	80021c2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	68d2      	ldr	r2, [r2, #12]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	6892      	ldr	r2, [r2, #8]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	3304      	adds	r3, #4
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d103      	bne.n	80020d8 <xTaskIncrementTick+0xd8>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01e      	beq.n	800212e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	6a12      	ldr	r2, [r2, #32]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	69d2      	ldr	r2, [r2, #28]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3318      	adds	r3, #24
 8002112:	429a      	cmp	r2, r3
 8002114:	d103      	bne.n	800211e <xTaskIncrementTick+0x11e>
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <xTaskIncrementTick+0x218>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	4a36      	ldr	r2, [pc, #216]	; (8002218 <xTaskIncrementTick+0x218>)
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <xTaskIncrementTick+0x21c>)
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	3204      	adds	r2, #4
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1d1a      	adds	r2, r3, #4
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <xTaskIncrementTick+0x21c>)
 8002184:	441a      	add	r2, r3
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218e:	4923      	ldr	r1, [pc, #140]	; (800221c <xTaskIncrementTick+0x21c>)
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	481f      	ldr	r0, [pc, #124]	; (800221c <xTaskIncrementTick+0x21c>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4403      	add	r3, r0
 80021aa:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <xTaskIncrementTick+0x220>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	429a      	cmp	r2, r3
 80021b8:	f4ff af5d 	bcc.w	8002076 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80021bc:	2301      	movs	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021c0:	e759      	b.n	8002076 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <xTaskIncrementTick+0x220>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	4914      	ldr	r1, [pc, #80]	; (800221c <xTaskIncrementTick+0x21c>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d901      	bls.n	80021de <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <xTaskIncrementTick+0x224>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e004      	b.n	80021f6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <xTaskIncrementTick+0x228>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <xTaskIncrementTick+0x228>)
 80021f4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200000f8 	.word	0x200000f8
 8002204:	200000e0 	.word	0x200000e0
 8002208:	200000d8 	.word	0x200000d8
 800220c:	200000dc 	.word	0x200000dc
 8002210:	200000f0 	.word	0x200000f0
 8002214:	200000f4 	.word	0x200000f4
 8002218:	200000e4 	.word	0x200000e4
 800221c:	20000074 	.word	0x20000074
 8002220:	20000070 	.word	0x20000070
 8002224:	200000ec 	.word	0x200000ec
 8002228:	200000e8 	.word	0x200000e8

0800222c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <vTaskSwitchContext+0xa4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <vTaskSwitchContext+0xa8>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002240:	e03f      	b.n	80022c2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <vTaskSwitchContext+0xa8>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <vTaskSwitchContext+0xac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002256:	7afb      	ldrb	r3, [r7, #11]
 8002258:	f1c3 031f 	rsb	r3, r3, #31
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	491f      	ldr	r1, [pc, #124]	; (80022dc <vTaskSwitchContext+0xb0>)
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	607b      	str	r3, [r7, #4]
    }
 8002284:	bf00      	nop
 8002286:	e7fe      	b.n	8002286 <vTaskSwitchContext+0x5a>
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <vTaskSwitchContext+0xb0>)
 8002294:	4413      	add	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3308      	adds	r3, #8
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d104      	bne.n	80022b8 <vTaskSwitchContext+0x8c>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <vTaskSwitchContext+0xb4>)
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200000f8 	.word	0x200000f8
 80022d4:	200000ec 	.word	0x200000ec
 80022d8:	200000e4 	.word	0x200000e4
 80022dc:	20000074 	.word	0x20000074
 80022e0:	20000070 	.word	0x20000070

080022e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <prvResetNextTaskUnblockTime+0x30>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <prvResetNextTaskUnblockTime+0x34>)
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022fa:	e005      	b.n	8002308 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <prvResetNextTaskUnblockTime+0x30>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <prvResetNextTaskUnblockTime+0x34>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200000d8 	.word	0x200000d8
 8002318:	200000f4 	.word	0x200000f4
 800231c:	00000000 	.word	0x00000000

08002320 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <pxCurrentTCBConst2>)
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	6808      	ldr	r0, [r1, #0]
 8002326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232a:	f380 8809 	msr	PSP, r0
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f04f 0000 	mov.w	r0, #0
 8002336:	f380 8811 	msr	BASEPRI, r0
 800233a:	4770      	bx	lr
 800233c:	f3af 8000 	nop.w

08002340 <pxCurrentTCBConst2>:
 8002340:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
	...

08002350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002350:	f3ef 8009 	mrs	r0, PSP
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <pxCurrentTCBConst>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f01e 0f10 	tst.w	lr, #16
 8002360:	bf08      	it	eq
 8002362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800236a:	6010      	str	r0, [r2, #0]
 800236c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002374:	f380 8811 	msr	BASEPRI, r0
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f7ff ff54 	bl	800222c <vTaskSwitchContext>
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f380 8811 	msr	BASEPRI, r0
 800238c:	bc09      	pop	{r0, r3}
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	6808      	ldr	r0, [r1, #0]
 8002392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002396:	f01e 0f10 	tst.w	lr, #16
 800239a:	bf08      	it	eq
 800239c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023a0:	f380 8809 	msr	PSP, r0
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	f3af 8000 	nop.w

080023b0 <pxCurrentTCBConst>:
 80023b0:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop

080023b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
        __asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	607b      	str	r3, [r7, #4]
    }
 80023d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023d2:	f7ff fe15 	bl	8002000 <xTaskIncrementTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SysTick_Handler+0x40>)
 80023de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80023ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <__libc_init_array>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	4d0d      	ldr	r5, [pc, #52]	; (8002434 <__libc_init_array+0x38>)
 8002400:	4c0d      	ldr	r4, [pc, #52]	; (8002438 <__libc_init_array+0x3c>)
 8002402:	1b64      	subs	r4, r4, r5
 8002404:	10a4      	asrs	r4, r4, #2
 8002406:	2600      	movs	r6, #0
 8002408:	42a6      	cmp	r6, r4
 800240a:	d109      	bne.n	8002420 <__libc_init_array+0x24>
 800240c:	4d0b      	ldr	r5, [pc, #44]	; (800243c <__libc_init_array+0x40>)
 800240e:	4c0c      	ldr	r4, [pc, #48]	; (8002440 <__libc_init_array+0x44>)
 8002410:	f000 f820 	bl	8002454 <_init>
 8002414:	1b64      	subs	r4, r4, r5
 8002416:	10a4      	asrs	r4, r4, #2
 8002418:	2600      	movs	r6, #0
 800241a:	42a6      	cmp	r6, r4
 800241c:	d105      	bne.n	800242a <__libc_init_array+0x2e>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	f855 3b04 	ldr.w	r3, [r5], #4
 8002424:	4798      	blx	r3
 8002426:	3601      	adds	r6, #1
 8002428:	e7ee      	b.n	8002408 <__libc_init_array+0xc>
 800242a:	f855 3b04 	ldr.w	r3, [r5], #4
 800242e:	4798      	blx	r3
 8002430:	3601      	adds	r6, #1
 8002432:	e7f2      	b.n	800241a <__libc_init_array+0x1e>
 8002434:	0800248c 	.word	0x0800248c
 8002438:	0800248c 	.word	0x0800248c
 800243c:	0800248c 	.word	0x0800248c
 8002440:	08002490 	.word	0x08002490

08002444 <memset>:
 8002444:	4402      	add	r2, r0
 8002446:	4603      	mov	r3, r0
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <memset+0xa>
 800244c:	4770      	bx	lr
 800244e:	f803 1b01 	strb.w	r1, [r3], #1
 8002452:	e7f9      	b.n	8002448 <memset+0x4>

08002454 <_init>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	bf00      	nop
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr

08002460 <_fini>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr
