
food_dispenser_STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d5e8  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022bac  08022bac  0004001c  2**0
                  CONTENTS
  4 .ARM          00000000  08022bac  08022bac  0004001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08022bac  08022bac  0004001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022bac  08022bac  00032bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022bb0  08022bb0  00032bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08022bb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c88  2000001c  08022bd0  0004001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009ca4  08022bd0  00049ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139dd  00000000  00000000  0004004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003229  00000000  00000000  00053a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00056c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00057e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e11  00000000  00000000  00058ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147da  00000000  00000000  00070cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097727  00000000  00000000  00085493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cbba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  0011cc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055ac 	.word	0x080055ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	080055ac 	.word	0x080055ac

080001e0 <displayWelcome>:
{
    tft_ili9341_init();
}

void displayWelcome(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af04      	add	r7, sp, #16
    tft_ili9341_send_str(0, TFT_ILI9341_HEIGHT / 2, "Hello word, I am the display. Changing the background...", Font_16x26, BLUE, WHITE);
 80001e6:	4b24      	ldr	r3, [pc, #144]	; (8000278 <displayWelcome+0x98>)
 80001e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001ec:	9202      	str	r2, [sp, #8]
 80001ee:	221f      	movs	r2, #31
 80001f0:	9201      	str	r2, [sp, #4]
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	9200      	str	r2, [sp, #0]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a20      	ldr	r2, [pc, #128]	; (800027c <displayWelcome+0x9c>)
 80001fa:	21a0      	movs	r1, #160	; 0xa0
 80001fc:	2000      	movs	r0, #0
 80001fe:	f002 fc98 	bl	8002b32 <tft_ili9341_send_str>
    HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 fcdb 	bl	8000bc0 <HAL_Delay>
    tft_ili9341_fill_screen(WHITE);
 800020a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800020e:	f002 fbc9 	bl	80029a4 <tft_ili9341_fill_screen>
    tft_ili9341_send_str(0, TFT_ILI9341_HEIGHT / 2, "Writing an image...", Font_16x26, BLUE, WHITE);
 8000212:	4b19      	ldr	r3, [pc, #100]	; (8000278 <displayWelcome+0x98>)
 8000214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000218:	9202      	str	r2, [sp, #8]
 800021a:	221f      	movs	r2, #31
 800021c:	9201      	str	r2, [sp, #4]
 800021e:	685a      	ldr	r2, [r3, #4]
 8000220:	9200      	str	r2, [sp, #0]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a16      	ldr	r2, [pc, #88]	; (8000280 <displayWelcome+0xa0>)
 8000226:	21a0      	movs	r1, #160	; 0xa0
 8000228:	2000      	movs	r0, #0
 800022a:	f002 fc82 	bl	8002b32 <tft_ili9341_send_str>
    HAL_Delay(1000);
 800022e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000232:	f000 fcc5 	bl	8000bc0 <HAL_Delay>
    ILI9341_DrawImage((TFT_ILI9341_WIDTH - 240) / 2, (TFT_ILI9341_HEIGHT - 240) / 2, 240, 240, (const uint16_t*)test_img_240x240);
 8000236:	4b13      	ldr	r3, [pc, #76]	; (8000284 <displayWelcome+0xa4>)
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	23f0      	movs	r3, #240	; 0xf0
 800023c:	22f0      	movs	r2, #240	; 0xf0
 800023e:	2128      	movs	r1, #40	; 0x28
 8000240:	2000      	movs	r0, #0
 8000242:	f002 fbc1 	bl	80029c8 <ILI9341_DrawImage>
    HAL_Delay(1000);
 8000246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024a:	f000 fcb9 	bl	8000bc0 <HAL_Delay>
    tft_ili9341_fill_screen(WHITE);
 800024e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000252:	f002 fba7 	bl	80029a4 <tft_ili9341_fill_screen>
    tft_ili9341_send_str(0, TFT_ILI9341_HEIGHT / 2, "Display: Ok", Font_16x26, BLUE, WHITE);
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <displayWelcome+0x98>)
 8000258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800025c:	9202      	str	r2, [sp, #8]
 800025e:	221f      	movs	r2, #31
 8000260:	9201      	str	r2, [sp, #4]
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	9200      	str	r2, [sp, #0]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a07      	ldr	r2, [pc, #28]	; (8000288 <displayWelcome+0xa8>)
 800026a:	21a0      	movs	r1, #160	; 0xa0
 800026c:	2000      	movs	r0, #0
 800026e:	f002 fc60 	bl	8002b32 <tft_ili9341_send_str>
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000000c 	.word	0x2000000c
 800027c:	080055c4 	.word	0x080055c4
 8000280:	08005600 	.word	0x08005600
 8000284:	08005658 	.word	0x08005658
 8000288:	08005614 	.word	0x08005614

0800028c <testServoMotor>:

void testServoMotor(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 3; i++)
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	e018      	b.n	80002ca <testServoMotor+0x3e>
    {
        servoMotorRotate(SERVO_MOTOR_DEGREES_180);
 8000298:	2002      	movs	r0, #2
 800029a:	f000 fb9b 	bl	80009d4 <servoMotorRotate>
        buzzerBeep(100, 0, 1);
 800029e:	2201      	movs	r2, #1
 80002a0:	2100      	movs	r1, #0
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f000 f9d0 	bl	8000648 <buzzerBeep>
        HAL_Delay(250);
 80002a8:	20fa      	movs	r0, #250	; 0xfa
 80002aa:	f000 fc89 	bl	8000bc0 <HAL_Delay>
        servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 fb90 	bl	80009d4 <servoMotorRotate>
        buzzerBeep(100, 0 , 1);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2100      	movs	r1, #0
 80002b8:	2064      	movs	r0, #100	; 0x64
 80002ba:	f000 f9c5 	bl	8000648 <buzzerBeep>
        HAL_Delay(250);
 80002be:	20fa      	movs	r0, #250	; 0xfa
 80002c0:	f000 fc7e 	bl	8000bc0 <HAL_Delay>
    for (i = 0; i < 3; i++)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	dde3      	ble.n	8000298 <testServoMotor+0xc>
    }
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <feed>:

void feed(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
    // TODO: update screen
    servoMotorRotate(SERVO_MOTOR_DEGREES_180);
 80002de:	2002      	movs	r0, #2
 80002e0:	f000 fb78 	bl	80009d4 <servoMotorRotate>
    HAL_Delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e8:	f000 fc6a 	bl	8000bc0 <HAL_Delay>
    servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 fb71 	bl	80009d4 <servoMotorRotate>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <displayIniScreen>:

void displayIniScreen(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
    /* Show to recangules: 1. Feed, 2. Settings */
    /* Show cursos in the first rectangule */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <vTaskDisplay>:

void vTaskDisplay(void *params)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	6078      	str	r0, [r7, #4]
    uint32_t event;
    uint8_t cursorPosition = OPTION_FEED;
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]

    displayWelcome();
 8000310:	f7ff ff66 	bl	80001e0 <displayWelcome>
    buzzerBeep(100, 100, 2);
 8000314:	2202      	movs	r2, #2
 8000316:	2164      	movs	r1, #100	; 0x64
 8000318:	2064      	movs	r0, #100	; 0x64
 800031a:	f000 f995 	bl	8000648 <buzzerBeep>
    testServoMotor();
 800031e:	f7ff ffb5 	bl	800028c <testServoMotor>
    displayIniScreen();
 8000322:	f7ff ffe8 	bl	80002f6 <displayIniScreen>
        /* Wait until a push button is pressed.
         * Notification settings: Index > 0, no clear on entry,
         *                       Clear all events on exit,
         *                       Block until there is an event.
        */
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &event, portMAX_DELAY);
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	f04f 32ff 	mov.w	r2, #4294967295
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	f04f 32ff 	mov.w	r2, #4294967295
 8000334:	2100      	movs	r1, #0
 8000336:	2001      	movs	r0, #1
 8000338:	f003 ffd0 	bl	80042dc <xTaskGenericNotifyWait>
        if (event & BUTTON_EVENT_ENTER)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	2b00      	cmp	r3, #0
 8000344:	d004      	beq.n	8000350 <vTaskDisplay+0x4c>
        {
            if (cursorPosition == OPTION_FEED)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <vTaskDisplay+0x4c>
            {
                feed();
 800034c:	f7ff ffc5 	bl	80002da <feed>
            {
                //Go to screen for settings
                //settingsScreen();
            }
        }
        if (event & BUTTON_EVENT_UP)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d00a      	beq.n	8000370 <vTaskDisplay+0x6c>
        {
            if (cursorPosition == OPTION_FEED)
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d105      	bne.n	800036c <vTaskDisplay+0x68>
            {
                //There is no more options above, play a beep
                buzzerBeep(100, 100, 2);
 8000360:	2202      	movs	r2, #2
 8000362:	2164      	movs	r1, #100	; 0x64
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f000 f96f 	bl	8000648 <buzzerBeep>
 800036a:	e001      	b.n	8000370 <vTaskDisplay+0x6c>
            }
            else
            {
                cursorPosition = OPTION_FEED;
 800036c:	2300      	movs	r3, #0
 800036e:	73fb      	strb	r3, [r7, #15]
                 // TODO: update screen
            }
        }
        if (event & BUTTON_EVENT_DOWN)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0d5      	beq.n	8000326 <vTaskDisplay+0x22>
        {
            if (cursorPosition == OPTION_SETTINGS)
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d105      	bne.n	800038c <vTaskDisplay+0x88>
            {
                buzzerBeep(100, 100, 2);
 8000380:	2202      	movs	r2, #2
 8000382:	2164      	movs	r1, #100	; 0x64
 8000384:	2064      	movs	r0, #100	; 0x64
 8000386:	f000 f95f 	bl	8000648 <buzzerBeep>
 800038a:	e7cc      	b.n	8000326 <vTaskDisplay+0x22>
            }
            else
            {
                cursorPosition = OPTION_SETTINGS;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &event, portMAX_DELAY);
 8000390:	e7c9      	b.n	8000326 <vTaskDisplay+0x22>
	...

08000394 <heartBeatInit>:

/*
* Function to initialize the heart beat low level settings.
*/
static void heartBeatInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]

    /* Heart beat: GPIO settings  */
    GPIO_InitStruct.Pin = HEART_BEAT_LED_PIN;
 80003a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(HEART_BEAT_LED_PORT, &GPIO_InitStruct);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <heartBeatInit+0x38>)
 80003c0:	f000 fd04 	bl	8000dcc <HAL_GPIO_Init>
}
 80003c4:	bf00      	nop
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40020800 	.word	0x40020800

080003d0 <HAL_TIM_PeriodElapsedCallback>:

/*
* Callback to increment the timer for the STM HAL layer.
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    if (timerHandler->Instance == TIM9)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d101      	bne.n	80003e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80003e2:	f000 fbcd 	bl	8000b80 <HAL_IncTick>
    }
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40014000 	.word	0x40014000

080003f4 <errorHandler>:

/*
* General handler for all the errors. TODO: Handle individual errors.
*/
void errorHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_WritePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	4802      	ldr	r0, [pc, #8]	; (800040c <errorHandler+0x18>)
 8000404:	f000 fe66 	bl	80010d4 <HAL_GPIO_WritePin>
 8000408:	e7f8      	b.n	80003fc <errorHandler+0x8>
 800040a:	bf00      	nop
 800040c:	40020800 	.word	0x40020800

08000410 <vTaskHeartBeat>:

/*
* Task to indicate the freeRTOS app is alive.
*/
void vTaskHeartBeat(void *params)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    while (1)
    {
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 8000418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <vTaskHeartBeat+0x1c>)
 800041e:	f000 fe72 	bl	8001106 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(HEART_BEAT_BLINK_DELAY));
 8000422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000426:	f003 f9af 	bl	8003788 <vTaskDelay>
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 800042a:	e7f5      	b.n	8000418 <vTaskHeartBeat+0x8>
 800042c:	40020800 	.word	0x40020800

08000430 <testBspBuzzer>:
     HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
     HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
}

void testBspBuzzer(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    buzzerBeep(300, 300, 4);
 8000434:	2204      	movs	r2, #4
 8000436:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800043a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800043e:	f000 f903 	bl	8000648 <buzzerBeep>
    buzzerBeep(200, 200, 3);
 8000442:	2203      	movs	r2, #3
 8000444:	21c8      	movs	r1, #200	; 0xc8
 8000446:	20c8      	movs	r0, #200	; 0xc8
 8000448:	f000 f8fe 	bl	8000648 <buzzerBeep>
    buzzerBeep(100, 100, 2);
 800044c:	2202      	movs	r2, #2
 800044e:	2164      	movs	r1, #100	; 0x64
 8000450:	2064      	movs	r0, #100	; 0x64
 8000452:	f000 f8f9 	bl	8000648 <buzzerBeep>
    buzzerBeep(50, 0, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	2100      	movs	r1, #0
 800045a:	2032      	movs	r0, #50	; 0x32
 800045c:	f000 f8f4 	bl	8000648 <buzzerBeep>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <testBspServoMotor>:

void testBspServoMotor(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 3; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e018      	b.n	80004a2 <testBspServoMotor+0x3e>
    {
        servoMotorRotate(SERVO_MOTOR_DEGREES_180);
 8000470:	2002      	movs	r0, #2
 8000472:	f000 faaf 	bl	80009d4 <servoMotorRotate>
        buzzerBeep(100, 0, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	2100      	movs	r1, #0
 800047a:	2064      	movs	r0, #100	; 0x64
 800047c:	f000 f8e4 	bl	8000648 <buzzerBeep>
        HAL_Delay(250);
 8000480:	20fa      	movs	r0, #250	; 0xfa
 8000482:	f000 fb9d 	bl	8000bc0 <HAL_Delay>
        servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 faa4 	bl	80009d4 <servoMotorRotate>
        buzzerBeep(100, 0, 1);
 800048c:	2201      	movs	r2, #1
 800048e:	2100      	movs	r1, #0
 8000490:	2064      	movs	r0, #100	; 0x64
 8000492:	f000 f8d9 	bl	8000648 <buzzerBeep>
        HAL_Delay(250);
 8000496:	20fa      	movs	r0, #250	; 0xfa
 8000498:	f000 fb92 	bl	8000bc0 <HAL_Delay>
    for (i = 0; i < 3; i++)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3301      	adds	r3, #1
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	dde3      	ble.n	8000470 <testBspServoMotor+0xc>
    }
}
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <testBsp>:

void testBsp(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
    testBspBuzzer();
 80004b6:	f7ff ffbb 	bl	8000430 <testBspBuzzer>
    testBspServoMotor();
 80004ba:	f7ff ffd3 	bl	8000464 <testBspServoMotor>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <main>:

int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
    BaseType_t retVal;
    HAL_StatusTypeDef halStatus;
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004ca:	f000 fb37 	bl	8000b3c <HAL_Init>
    /* Configure the system clock */
    // clkInit(); // system CLK = 16 MHz
    /* Initialize push buttons */
//    pushButtonsInit();
    /* Initialize heart beat led */
    heartBeatInit();
 80004ce:	f7ff ff61 	bl	8000394 <heartBeatInit>
    /* Initialize debug console*/
    // consoleInit();
    /* Initialize display */
//    displayInit();
    /* Initialize servomotor */
    halStatus = servoMotorInit();
 80004d2:	f000 fa3f 	bl	8000954 <servoMotorInit>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <main+0x20>
    {
        errorHandler();
 80004e0:	f7ff ff88 	bl	80003f4 <errorHandler>
    }
    /* Initialize the buzzer */
    halStatus = buzzerInit();
 80004e4:	f000 f870 	bl	80005c8 <buzzerInit>
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <main+0x32>
    {
        errorHandler();
 80004f2:	f7ff ff7f 	bl	80003f4 <errorHandler>
    }

    #if (TEST_BSP == 1)
        testBsp();
 80004f6:	f7ff ffdc 	bl	80004b2 <testBsp>
    #endif

    /* Heart beat task */
    retVal = xTaskCreate(vTaskHeartBeat, "task-heart-beat", configMINIMAL_STACK_SIZE, NULL, HEART_BEAT_PRIORITY_TASK, &xTaskHeartBeatHandler);
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <main+0xac>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2282      	movs	r2, #130	; 0x82
 8000506:	491b      	ldr	r1, [pc, #108]	; (8000574 <main+0xb0>)
 8000508:	481b      	ldr	r0, [pc, #108]	; (8000578 <main+0xb4>)
 800050a:	f002 ff2d 	bl	8003368 <xTaskCreate>
 800050e:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d110      	bne.n	8000538 <main+0x74>
    {
        goto main_out;
    }
    /* Display task */
    retVal = xTaskCreate(vTaskDisplay, "task-display", configMINIMAL_STACK_SIZE, NULL, DISPLAY_PRIORITY_TASK, &xTaskDisplayHandler);
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0xb8>)
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2302      	movs	r3, #2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	2282      	movs	r2, #130	; 0x82
 8000522:	4917      	ldr	r1, [pc, #92]	; (8000580 <main+0xbc>)
 8000524:	4817      	ldr	r0, [pc, #92]	; (8000584 <main+0xc0>)
 8000526:	f002 ff1f 	bl	8003368 <xTaskCreate>
 800052a:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d104      	bne.n	800053c <main+0x78>
    {
        goto main_out;
    }

    vTaskStartScheduler();
 8000532:	f003 f95d 	bl	80037f0 <vTaskStartScheduler>
 8000536:	e002      	b.n	800053e <main+0x7a>
        goto main_out;
 8000538:	bf00      	nop
 800053a:	e000      	b.n	800053e <main+0x7a>
        goto main_out;
 800053c:	bf00      	nop

main_out:
    if (xTaskHeartBeatHandler != NULL)
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <main+0xac>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <main+0x8c>
    {
        vTaskDelete(xTaskHeartBeatHandler);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0xac>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f888 	bl	8003660 <vTaskDelete>
    }
    if (xTaskDisplayHandler != NULL)
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0xb8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <main+0x9e>
    {
        vTaskDelete(xTaskDisplayHandler);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f87f 	bl	8003660 <vTaskDelete>
    }
    errorHandler();
 8000562:	f7ff ff47 	bl	80003f4 <errorHandler>
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000003c 	.word	0x2000003c
 8000574:	08005620 	.word	0x08005620
 8000578:	08000411 	.word	0x08000411
 800057c:	20000038 	.word	0x20000038
 8000580:	08005630 	.word	0x08005630
 8000584:	08000305 	.word	0x08000305

08000588 <buzzerStart>:

/*
 * Description: Start the buzzer by starting the hardware timer.
 */
HAL_StatusTypeDef buzzerStart(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Start_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 800058e:	2100      	movs	r1, #0
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <buzzerStart+0x1c>)
 8000592:	f001 f90d 	bl	80017b0 <HAL_TIM_OC_Start_IT>
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 800059a:	79fb      	ldrb	r3, [r7, #7]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000040 	.word	0x20000040

080005a8 <buzzerStop>:

/*
 * Description: Stop the buzzer by stopping the hardware timer.
 */
HAL_StatusTypeDef buzzerStop(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Stop_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <buzzerStop+0x1c>)
 80005b2:	f001 f9fb 	bl	80019ac <HAL_TIM_OC_Stop_IT>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000040 	.word	0x20000040

080005c8 <buzzerInit>:

/*
 * Description: Initialize TIMER : Output compare mode to produce a square wave.
 */
HAL_StatusTypeDef buzzerInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef timerOCInit = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus = HAL_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	77fb      	strb	r3, [r7, #31]

    /* Timer: Base unit settings */
    buzzerTimHandler.Instance = BUZZER_TIM_INSTANCE;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <buzzerInit+0x7c>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	601a      	str	r2, [r3, #0]
    buzzerTimHandler.Init.Period = BUZZER_TIM_PERIOD;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <buzzerInit+0x7c>)
 80005ee:	f04f 32ff 	mov.w	r2, #4294967295
 80005f2:	60da      	str	r2, [r3, #12]
    buzzerTimHandler.Init.Prescaler = BUZZER_TIM_PRESCALER;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <buzzerInit+0x7c>)
 80005f6:	220f      	movs	r2, #15
 80005f8:	605a      	str	r2, [r3, #4]
    buzzerTimHandler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <buzzerInit+0x7c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    buzzerTimHandler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <buzzerInit+0x7c>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
    halStatus = HAL_TIM_OC_Init(&buzzerTimHandler);
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <buzzerInit+0x7c>)
 8000608:	f001 f882 	bl	8001710 <HAL_TIM_OC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Timer: Channel settings */
    timerOCInit.OCMode = TIM_OCMODE_TOGGLE;
 8000610:	2330      	movs	r3, #48	; 0x30
 8000612:	603b      	str	r3, [r7, #0]
    timerOCInit.OCPolarity = TIM_OCNPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
    timerOCInit.Pulse = BUZZER_TIM_PULSE_VALUE;
 8000618:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800061c:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_OC_ConfigChannel(&buzzerTimHandler, &timerOCInit, BUZZER_TIM_CHANNEL);
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <buzzerInit+0x7c>)
 8000626:	f001 fcdf 	bl	8001fe8 <HAL_TIM_OC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Clear interrupt to not jump to the interrupt handler */
    __HAL_TIM_CLEAR_IT(&buzzerTimHandler, TIM_IT_UPDATE);
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <buzzerInit+0x7c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f06f 0201 	mvn.w	r2, #1
 8000636:	611a      	str	r2, [r3, #16]

    return halStatus;
 8000638:	7ffb      	ldrb	r3, [r7, #31]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000040 	.word	0x20000040

08000648 <buzzerBeep>:

/*
 * Description: Play a tone multiple times. Time in ms.
 */
void buzzerBeep(uint32_t timeOn, uint32_t timeOff, uint32_t times)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
    int i;

    /* Protect against 0 */
    if (times <= 0 || timeOn <= 0)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d01a      	beq.n	8000690 <buzzerBeep+0x48>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d017      	beq.n	8000690 <buzzerBeep+0x48>
    {
        return;
    }
    for ( i = 0; i < times; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e00f      	b.n	8000686 <buzzerBeep+0x3e>
    {

        buzzerStart();
 8000666:	f7ff ff8f 	bl	8000588 <buzzerStart>
        HAL_Delay(timeOn);
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 faa8 	bl	8000bc0 <HAL_Delay>
        buzzerStop();
 8000670:	f7ff ff9a 	bl	80005a8 <buzzerStop>
        if (times > 1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d902      	bls.n	8000680 <buzzerBeep+0x38>
        {
            HAL_Delay(timeOff);
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f000 faa0 	bl	8000bc0 <HAL_Delay>
    for ( i = 0; i < times; i++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8eb      	bhi.n	8000666 <buzzerBeep+0x1e>
 800068e:	e000      	b.n	8000692 <buzzerBeep+0x4a>
        return;
 8000690:	bf00      	nop
        }
    }
}
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <TIM2_IRQHandler>:

/*
* Interrupt handler for the buzzer timer.
*/
void TIM2_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&buzzerTimHandler);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <TIM2_IRQHandler+0x10>)
 800069e:	f001 fb9b 	bl	8001dd8 <HAL_TIM_IRQHandler>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000040 	.word	0x20000040

080006ac <HAL_TIM_OC_DelayElapsedCallback>:

/*
 *  Callback to handle update events and capture compare mode
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    static uint32_t ccr1Reg;

    if (timerHandler->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7f1b      	ldrb	r3, [r3, #28]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10d      	bne.n	80006d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    {
        ccr1Reg = HAL_TIM_ReadCapturedValue(timerHandler, BUZZER_TIM_CHANNEL);
 80006bc:	2100      	movs	r1, #0
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f001 fdb0 	bl	8002224 <HAL_TIM_ReadCapturedValue>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80006c8:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(timerHandler, BUZZER_TIM_CHANNEL, (ccr1Reg + BUZZER_TIM_PULSE_VALUE));
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000088 	.word	0x20000088

080006e4 <EXTI0_IRQHandler>:

/*
 * Interrupt handler for push button ENTER.
 */
void EXTI0_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_ENTER_GPIO_PIN);
 80006e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006ec:	f000 fd26 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <EXTI1_IRQHandler>:

/*
 * Interrupt handler for push button UP.
 */
void EXTI1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_GPIO_PIN);
 80006f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006fc:	f000 fd1e 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <EXTI2_IRQHandler>:

/*
 * Interrupt handler for push button DOWN.
 */
void EXTI2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_GPIO_PIN);
 8000708:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800070c:	f000 fd16 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback to handle push button requests.
 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af02      	add	r7, sp, #8
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
    BaseType_t  pxHigherPriorityTaskWoken = pdFALSE;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]

    if (pin == BUTTON_ENTER_GPIO_PIN)
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000728:	d10b      	bne.n	8000742 <HAL_GPIO_EXTI_Callback+0x2e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_ENTER, eSetBits, &pxHigherPriorityTaskWoken);
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_EXTI_Callback+0x78>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2204      	movs	r2, #4
 800073c:	2101      	movs	r1, #1
 800073e:	f003 fe4d 	bl	80043dc <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_UP_GPIO_PIN)
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000748:	d10b      	bne.n	8000762 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_UP, eSetBits, &pxHigherPriorityTaskWoken);
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_GPIO_EXTI_Callback+0x78>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2201      	movs	r2, #1
 800075c:	2101      	movs	r1, #1
 800075e:	f003 fe3d 	bl	80043dc <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_DOWN_GPIO_PIN)
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000768:	d10b      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x6e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_DOWN, eSetBits, &pxHigherPriorityTaskWoken);
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_GPIO_EXTI_Callback+0x78>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2300      	movs	r3, #0
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2202      	movs	r2, #2
 800077c:	2101      	movs	r1, #1
 800077e:	f003 fe2d 	bl	80043dc <xTaskGenericNotifyFromISR>
    }
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000038 	.word	0x20000038

08000790 <TIM1_BRK_TIM9_IRQHandler>:

/*
 *  Interrupt handler for the HAL time base.
 */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim9);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000796:	f001 fb1f 	bl	8001dd8 <HAL_TIM_IRQHandler>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d4 	.word	0x200000d4

080007a4 <HAL_MspInit>:

/*
 *   Enable clocks and set NVIC settings.
 */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
    /* Enable clocks for some system settings */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <HAL_MspInit+0x104>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <HAL_MspInit+0x104>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <HAL_MspInit+0x104>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <HAL_MspInit+0x104>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <HAL_MspInit+0x104>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <HAL_MspInit+0x104>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
    /* Enable clock for GPIOs being used */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <HAL_MspInit+0x104>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <HAL_MspInit+0x104>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_MspInit+0x104>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <HAL_MspInit+0x104>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <HAL_MspInit+0x104>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <HAL_MspInit+0x104>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <HAL_MspInit+0x104>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <HAL_MspInit+0x104>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <HAL_MspInit+0x104>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /*Enable clock for TIMERS being used */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_MspInit+0x104>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <HAL_MspInit+0x104>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_MspInit+0x104>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_MspInit+0x104>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_MspInit+0x104>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_MspInit+0x104>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x104>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <HAL_MspInit+0x104>)
 8000878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_MspInit+0x104>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
    /* Set NVIC priority configuration */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088a:	2003      	movs	r0, #3
 800088c:	f000 fa69 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>
    /* Enable interrupt for buzzer timer  */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	210f      	movs	r1, #15
 8000894:	201c      	movs	r0, #28
 8000896:	f000 fa6f 	bl	8000d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089a:	201c      	movs	r0, #28
 800089c:	f000 fa88 	bl	8000db0 <HAL_NVIC_EnableIRQ>
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_TIM_OC_MspInit>:

/*
 *   GPIO settings: Buzzer.
 */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *timerHandler)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef buzzerGpioInit = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

    /* BUZZER: GPIO settings */
    buzzerGpioInit.Pin = BUZZER_GPIO_PIN;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
    buzzerGpioInit.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
    buzzerGpioInit.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
    buzzerGpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    buzzerGpioInit.Alternate = BUZZER_GPIO_ALTERNATE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_INSTANCE, &buzzerGpioInit);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <HAL_TIM_OC_MspInit+0x40>)
 80008e0:	f000 fa74 	bl	8000dcc <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_TIM_PWM_MspInit>:

/*
 *   GPIO settings: Servo motor.
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *timerHandler)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef servoMotorGpioInit = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

    /* GPIO settings: ServoMotor */
    servoMotorGpioInit.Pin = SERVO_MOTOR_GPIO_PIN;
 8000908:	2302      	movs	r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
    servoMotorGpioInit.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
    servoMotorGpioInit.Alternate = SERVO_MOTOR_GPIO_ALTERNATE;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_INSTANCE, &servoMotorGpioInit);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <HAL_TIM_PWM_MspInit+0x38>)
 800091c:	f000 fa56 	bl	8000dcc <HAL_GPIO_Init>
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40020000 	.word	0x40020000

0800092c <servoMotorStart>:
static void servoMotorStart(void);
static void servoMotorStop(void);
void servoMotorRotate(ServoPosition position);

static void servoMotorStart(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <servoMotorStart+0x10>)
 8000934:	f001 f93c 	bl	8001bb0 <HAL_TIM_PWM_Start>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000008c 	.word	0x2000008c

08000940 <servoMotorStop>:

static void servoMotorStop(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000944:	2100      	movs	r1, #0
 8000946:	4802      	ldr	r0, [pc, #8]	; (8000950 <servoMotorStop+0x10>)
 8000948:	f001 f9e2 	bl	8001d10 <HAL_TIM_PWM_Stop>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000008c 	.word	0x2000008c

08000954 <servoMotorInit>:

HAL_StatusTypeDef servoMotorInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef servoMotorChannelConfing = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus;

    /* TIMER base unit settings: Servo motor */
    servoMotorTimHandler.Instance = SERVO_MOTOR_TIM_INSTANCE;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <servoMotorInit+0x78>)
 800096e:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <servoMotorInit+0x7c>)
 8000970:	601a      	str	r2, [r3, #0]
    servoMotorTimHandler.Init.Prescaler = SERVO_MOTOR_TIM_BASE_PRESCALER;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <servoMotorInit+0x78>)
 8000974:	220f      	movs	r2, #15
 8000976:	605a      	str	r2, [r3, #4]
    servoMotorTimHandler.Init.Period = SERVO_MOTOR_TIM_BASE_PERIOD;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <servoMotorInit+0x78>)
 800097a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800097e:	60da      	str	r2, [r3, #12]
    halStatus = HAL_TIM_PWM_Init(&servoMotorTimHandler);
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <servoMotorInit+0x78>)
 8000982:	f001 f8c5 	bl	8001b10 <HAL_TIM_PWM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <servoMotorInit+0x40>
    {
        errorHandler();
 8000990:	f7ff fd30 	bl	80003f4 <errorHandler>
    }

    /* TIMER channel settings: Servo motor */
    servoMotorChannelConfing.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	603b      	str	r3, [r7, #0]
    servoMotorChannelConfing.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
    servoMotorChannelConfing.Pulse = SERVO_MOTOR_2MS_SIGNAL;
 800099c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009a0:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_PWM_ConfigChannel(&servoMotorTimHandler, &servoMotorChannelConfing, SERVO_MOTOR_TIM_CHANNEL);
 80009a2:	463b      	mov	r3, r7
 80009a4:	2204      	movs	r2, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <servoMotorInit+0x78>)
 80009aa:	f001 fb79 	bl	80020a0 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 80009b2:	7ffb      	ldrb	r3, [r7, #31]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <servoMotorInit+0x68>
    {
        errorHandler();
 80009b8:	f7ff fd1c 	bl	80003f4 <errorHandler>
    }

    /* Go to the default state */
    servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f809 	bl	80009d4 <servoMotorRotate>

    return halStatus;
 80009c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	40000c00 	.word	0x40000c00

080009d4 <servoMotorRotate>:

void servoMotorRotate(ServoPosition position)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
    switch (position)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d012      	beq.n	8000a0a <servoMotorRotate+0x36>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	dc16      	bgt.n	8000a16 <servoMotorRotate+0x42>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <servoMotorRotate+0x1e>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d006      	beq.n	80009fe <servoMotorRotate+0x2a>
                                                           SERVO_MOTOR_1_5MS_SIGNAL);
                                    break;
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
                                                            SERVO_MOTOR_1MS_SIGNAL);
                                    break;
        default : break;
 80009f0:	e011      	b.n	8000a16 <servoMotorRotate+0x42>
        case SERVO_MOTOR_DEGREES_0: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <servoMotorRotate+0x5c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 80009fc:	e00c      	b.n	8000a18 <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_90: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <servoMotorRotate+0x5c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000a08:	e006      	b.n	8000a18 <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <servoMotorRotate+0x5c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000a14:	e000      	b.n	8000a18 <servoMotorRotate+0x44>
        default : break;
 8000a16:	bf00      	nop
    }
    servoMotorStart();
 8000a18:	f7ff ff88 	bl	800092c <servoMotorStart>
    HAL_Delay(SERVO_MOTOR_DELAY);
 8000a1c:	20fa      	movs	r0, #250	; 0xfa
 8000a1e:	f000 f8cf 	bl	8000bc0 <HAL_Delay>
    servoMotorStop();
 8000a22:	f7ff ff8d 	bl	8000940 <servoMotorStop>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_InitTick+0xd0>)
 8000a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <HAL_InitTick+0xd0>)
 8000a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a76:	6453      	str	r3, [r2, #68]	; 0x44
 8000a78:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <HAL_InitTick+0xd0>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fb8c 	bl	80011ac <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a94:	f000 fb76 	bl	8001184 <HAL_RCC_GetPCLK2Freq>
 8000a98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_InitTick+0xd4>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	0c9b      	lsrs	r3, r3, #18
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_InitTick+0xd8>)
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <HAL_InitTick+0xdc>)
 8000aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_InitTick+0xd8>)
 8000ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_InitTick+0xd8>)
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0xd8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_InitTick+0xd8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_InitTick+0xd8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <HAL_InitTick+0xd8>)
 8000ad0:	f000 fd62 	bl	8001598 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d11b      	bne.n	8000b1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <HAL_InitTick+0xd8>)
 8000ae4:	f000 fdb2 	bl	800164c <HAL_TIM_Base_Start_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d111      	bne.n	8000b1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000af6:	2018      	movs	r0, #24
 8000af8:	f000 f95a 	bl	8000db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d808      	bhi.n	8000b14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000b02:	2200      	movs	r2, #0
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	2018      	movs	r0, #24
 8000b08:	f000 f936 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_InitTick+0xe0>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e002      	b.n	8000b1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	200000d4 	.word	0x200000d4
 8000b34:	40014000 	.word	0x40014000
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f8fc 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff74 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe18 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	2000011c 	.word	0x2000011c

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000011c 	.word	0x2000011c

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff4c 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8a:	f7ff ff61 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f7ff ffb1 	bl	8000cfc <NVIC_EncodePriority>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff80 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff54 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e159      	b.n	800109c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8148 	bne.w	8001096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d017      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a2 	beq.w	8001096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6e:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2ec>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x202>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2f4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1fe>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1fa>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a46      	ldr	r2, [pc, #280]	; (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1f6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a45      	ldr	r2, [pc, #276]	; (80010cc <HAL_GPIO_Init+0x300>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1f2>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2ec>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_GPIO_Init+0x304>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f aea2 	bls.w	8000de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	041a      	lsls	r2, r3, #16
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43d9      	mvns	r1, r3
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	400b      	ands	r3, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fada 	bl	8000714 <HAL_GPIO_EXTI_Callback>
  }
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_RCC_GetHCLKFreq+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000

08001184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001188:	f7ff fff0 	bl	800116c <HAL_RCC_GetHCLKFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	0b5b      	lsrs	r3, r3, #13
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	4903      	ldr	r1, [pc, #12]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	08021858 	.word	0x08021858

080011ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	220f      	movs	r2, #15
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_RCC_GetClockConfig+0x5c>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_RCC_GetClockConfig+0x5c>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_RCC_GetClockConfig+0x5c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_RCC_GetClockConfig+0x5c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_RCC_GetClockConfig+0x60>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0207 	and.w	r2, r3, #7
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_SPI_Transmit+0x26>
 8001232:	2302      	movs	r3, #2
 8001234:	e125      	b.n	8001482 <HAL_SPI_Transmit+0x272>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800123e:	f7ff fcb3 	bl	8000ba8 <HAL_GetTick>
 8001242:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001250:	2302      	movs	r3, #2
 8001252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001254:	e10c      	b.n	8001470 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <HAL_SPI_Transmit+0x52>
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001266:	e103      	b.n	8001470 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2203      	movs	r2, #3
 800126c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	88fa      	ldrh	r2, [r7, #6]
 8001286:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ae:	d107      	bne.n	80012c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	d007      	beq.n	80012de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012e6:	d147      	bne.n	8001378 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_SPI_Transmit+0xea>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d138      	bne.n	800136c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3302      	adds	r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001318:	e028      	b.n	800136c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b02      	cmp	r3, #2
 8001326:	d10f      	bne.n	8001348 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3302      	adds	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800133c:	b29b      	uxth	r3, r3
 800133e:	3b01      	subs	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	86da      	strh	r2, [r3, #54]	; 0x36
 8001346:	e011      	b.n	800136c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_SPI_Transmit+0x156>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d00a      	beq.n	800136c <HAL_SPI_Transmit+0x15c>
 8001356:	f7ff fc27 	bl	8000ba8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d802      	bhi.n	800136c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800136a:	e081      	b.n	8001470 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001370:	b29b      	uxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1d1      	bne.n	800131a <HAL_SPI_Transmit+0x10a>
 8001376:	e048      	b.n	800140a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <HAL_SPI_Transmit+0x17a>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001384:	b29b      	uxth	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d13a      	bne.n	8001400 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	330c      	adds	r3, #12
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80013aa:	e029      	b.n	8001400 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d110      	bne.n	80013dc <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	330c      	adds	r3, #12
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80013da:	e011      	b.n	8001400 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_SPI_Transmit+0x1ea>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d00a      	beq.n	8001400 <HAL_SPI_Transmit+0x1f0>
 80013ea:	f7ff fbdd 	bl	8000ba8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d802      	bhi.n	8001400 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80013fe:	e037      	b.n	8001470 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001404:	b29b      	uxth	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1d0      	bne.n	80013ac <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f838 	bl	800148a <SPI_WaitFlagStateUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001424:	e024      	b.n	8001470 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f896 	bl	800155c <SPI_CheckFlag_BSY>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2220      	movs	r2, #32
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001440:	e016      	b.n	8001470 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	77fb      	strb	r3, [r7, #31]
 800146c:	e000      	b.n	8001470 <HAL_SPI_Transmit+0x260>
  }

error:
 800146e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001480:	7ffb      	ldrb	r3, [r7, #31]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001498:	e04d      	b.n	8001536 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d049      	beq.n	8001536 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80014a8:	f7ff fb7e 	bl	8000ba8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d83e      	bhi.n	8001536 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80014c6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80014d0:	d111      	bne.n	80014f6 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014da:	d004      	beq.n	80014e6 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	d107      	bne.n	80014f6 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fe:	d110      	bne.n	8001522 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800150e:	400b      	ands	r3, r1
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001520:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00e      	b.n	8001554 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4013      	ands	r3, r2
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d101      	bne.n	800154a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001546:	2201      	movs	r2, #1
 8001548:	e000      	b.n	800154c <SPI_WaitFlagStateUntilTimeout+0xc2>
 800154a:	2200      	movs	r2, #0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d1a3      	bne.n	800149a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ff89 	bl	800148a <SPI_WaitFlagStateUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f043 0220 	orr.w	r2, r3, #32
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e000      	b.n	8001590 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e041      	b.n	800162e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f839 	bl	8001636 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f000 fe86 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d001      	beq.n	8001664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e044      	b.n	80016ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_TIM_Base_Start_IT+0xb0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d018      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x6c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168e:	d013      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x6c>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_TIM_Base_Start_IT+0xb4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00e      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x6c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_TIM_Base_Start_IT+0xb8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x6c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_TIM_Base_Start_IT+0xbc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d004      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x6c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <HAL_TIM_Base_Start_IT+0xc0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d010      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016da:	e007      	b.n	80016ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40010000 	.word	0x40010000
 8001700:	40000400 	.word	0x40000400
 8001704:	40000800 	.word	0x40000800
 8001708:	40000c00 	.word	0x40000c00
 800170c:	40014000 	.word	0x40014000

08001710 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e041      	b.n	80017a6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff f8b8 	bl	80008ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3304      	adds	r3, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f000 fdca 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_TIM_OC_Start_IT+0x28>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e022      	b.n	800181e <HAL_TIM_OC_Start_IT+0x6e>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d109      	bne.n	80017f2 <HAL_TIM_OC_Start_IT+0x42>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	e015      	b.n	800181e <HAL_TIM_OC_Start_IT+0x6e>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d109      	bne.n	800180c <HAL_TIM_OC_Start_IT+0x5c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e008      	b.n	800181e <HAL_TIM_OC_Start_IT+0x6e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0b3      	b.n	800198e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <HAL_TIM_OC_Start_IT+0x86>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001834:	e013      	b.n	800185e <HAL_TIM_OC_Start_IT+0xae>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d104      	bne.n	8001846 <HAL_TIM_OC_Start_IT+0x96>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001844:	e00b      	b.n	800185e <HAL_TIM_OC_Start_IT+0xae>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b08      	cmp	r3, #8
 800184a:	d104      	bne.n	8001856 <HAL_TIM_OC_Start_IT+0xa6>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001854:	e003      	b.n	800185e <HAL_TIM_OC_Start_IT+0xae>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d841      	bhi.n	80018e8 <HAL_TIM_OC_Start_IT+0x138>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_TIM_OC_Start_IT+0xbc>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	080018a1 	.word	0x080018a1
 8001870:	080018e9 	.word	0x080018e9
 8001874:	080018e9 	.word	0x080018e9
 8001878:	080018e9 	.word	0x080018e9
 800187c:	080018b3 	.word	0x080018b3
 8001880:	080018e9 	.word	0x080018e9
 8001884:	080018e9 	.word	0x080018e9
 8001888:	080018e9 	.word	0x080018e9
 800188c:	080018c5 	.word	0x080018c5
 8001890:	080018e9 	.word	0x080018e9
 8001894:	080018e9 	.word	0x080018e9
 8001898:	080018e9 	.word	0x080018e9
 800189c:	080018d7 	.word	0x080018d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0202 	orr.w	r2, r2, #2
 80018ae:	60da      	str	r2, [r3, #12]
      break;
 80018b0:	e01d      	b.n	80018ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0204 	orr.w	r2, r2, #4
 80018c0:	60da      	str	r2, [r3, #12]
      break;
 80018c2:	e014      	b.n	80018ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0208 	orr.w	r2, r2, #8
 80018d2:	60da      	str	r2, [r3, #12]
      break;
 80018d4:	e00b      	b.n	80018ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0210 	orr.w	r2, r2, #16
 80018e4:	60da      	str	r2, [r3, #12]
      break;
 80018e6:	e002      	b.n	80018ee <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
      break;
 80018ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d14b      	bne.n	800198c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 feff 	bl	8002700 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d107      	bne.n	800191c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d018      	beq.n	8001958 <HAL_TIM_OC_Start_IT+0x1a8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192e:	d013      	beq.n	8001958 <HAL_TIM_OC_Start_IT+0x1a8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_TIM_OC_Start_IT+0x1ec>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00e      	beq.n	8001958 <HAL_TIM_OC_Start_IT+0x1a8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d009      	beq.n	8001958 <HAL_TIM_OC_Start_IT+0x1a8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <HAL_TIM_OC_Start_IT+0x1f4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_TIM_OC_Start_IT+0x1a8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b06      	cmp	r3, #6
 8001968:	d010      	beq.n	800198c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197a:	e007      	b.n	800198c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000
 800199c:	40000400 	.word	0x40000400
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40000c00 	.word	0x40000c00
 80019a8:	40014000 	.word	0x40014000

080019ac <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d841      	bhi.n	8001a44 <HAL_TIM_OC_Stop_IT+0x98>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019fd 	.word	0x080019fd
 80019cc:	08001a45 	.word	0x08001a45
 80019d0:	08001a45 	.word	0x08001a45
 80019d4:	08001a45 	.word	0x08001a45
 80019d8:	08001a0f 	.word	0x08001a0f
 80019dc:	08001a45 	.word	0x08001a45
 80019e0:	08001a45 	.word	0x08001a45
 80019e4:	08001a45 	.word	0x08001a45
 80019e8:	08001a21 	.word	0x08001a21
 80019ec:	08001a45 	.word	0x08001a45
 80019f0:	08001a45 	.word	0x08001a45
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a33 	.word	0x08001a33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0202 	bic.w	r2, r2, #2
 8001a0a:	60da      	str	r2, [r3, #12]
      break;
 8001a0c:	e01d      	b.n	8001a4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0204 	bic.w	r2, r2, #4
 8001a1c:	60da      	str	r2, [r3, #12]
      break;
 8001a1e:	e014      	b.n	8001a4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0208 	bic.w	r2, r2, #8
 8001a2e:	60da      	str	r2, [r3, #12]
      break;
 8001a30:	e00b      	b.n	8001a4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0210 	bic.w	r2, r2, #16
 8001a40:	60da      	str	r2, [r3, #12]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      break;
 8001a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d157      	bne.n	8001b00 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	6839      	ldr	r1, [r7, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fe51 	bl	8002700 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_TIM_OC_Stop_IT+0x160>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d117      	bne.n	8001a98 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_TIM_OC_Stop_IT+0xec>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	f240 4344 	movw	r3, #1092	; 0x444
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_TIM_OC_Stop_IT+0xec>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_TIM_OC_Stop_IT+0x11c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	f240 4344 	movw	r3, #1092	; 0x444
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_TIM_OC_Stop_IT+0x11c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <HAL_TIM_OC_Stop_IT+0x12c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad6:	e013      	b.n	8001b00 <HAL_TIM_OC_Stop_IT+0x154>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d104      	bne.n	8001ae8 <HAL_TIM_OC_Stop_IT+0x13c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae6:	e00b      	b.n	8001b00 <HAL_TIM_OC_Stop_IT+0x154>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d104      	bne.n	8001af8 <HAL_TIM_OC_Stop_IT+0x14c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af6:	e003      	b.n	8001b00 <HAL_TIM_OC_Stop_IT+0x154>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e041      	b.n	8001ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe feda 	bl	80008f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f000 fbca 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_TIM_PWM_Start+0x24>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e022      	b.n	8001c1a <HAL_TIM_PWM_Start+0x6a>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d109      	bne.n	8001bee <HAL_TIM_PWM_Start+0x3e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e015      	b.n	8001c1a <HAL_TIM_PWM_Start+0x6a>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d109      	bne.n	8001c08 <HAL_TIM_PWM_Start+0x58>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e008      	b.n	8001c1a <HAL_TIM_PWM_Start+0x6a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e068      	b.n	8001cf4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <HAL_TIM_PWM_Start+0x82>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c30:	e013      	b.n	8001c5a <HAL_TIM_PWM_Start+0xaa>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d104      	bne.n	8001c42 <HAL_TIM_PWM_Start+0x92>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c40:	e00b      	b.n	8001c5a <HAL_TIM_PWM_Start+0xaa>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d104      	bne.n	8001c52 <HAL_TIM_PWM_Start+0xa2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	e003      	b.n	8001c5a <HAL_TIM_PWM_Start+0xaa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd4c 	bl	8002700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_TIM_PWM_Start+0x14c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d107      	bne.n	8001c82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_TIM_PWM_Start+0x14c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d018      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x10e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c94:	d013      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x10e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_TIM_PWM_Start+0x150>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x10e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_TIM_PWM_Start+0x154>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d009      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x10e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_TIM_PWM_Start+0x158>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x10e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_TIM_PWM_Start+0x15c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d111      	bne.n	8001ce2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	d010      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce0:	e007      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40014000 	.word	0x40014000

08001d10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fcec 	bl	8002700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <HAL_TIM_PWM_Stop+0xc4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d117      	bne.n	8001d62 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_TIM_PWM_Stop+0x52>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	f240 4344 	movw	r3, #1092	; 0x444
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_TIM_PWM_Stop+0x52>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a1a      	ldr	r2, [r3, #32]
 8001d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <HAL_TIM_PWM_Stop+0x82>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	f240 4344 	movw	r3, #1092	; 0x444
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_TIM_PWM_Stop+0x82>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_PWM_Stop+0x92>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	e013      	b.n	8001dca <HAL_TIM_PWM_Stop+0xba>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d104      	bne.n	8001db2 <HAL_TIM_PWM_Stop+0xa2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db0:	e00b      	b.n	8001dca <HAL_TIM_PWM_Stop+0xba>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_PWM_Stop+0xb2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc0:	e003      	b.n	8001dca <HAL_TIM_PWM_Stop+0xba>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa46 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fc42 	bl	80006ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fa49 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0204 	mvn.w	r2, #4
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fa1c 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fc18 	bl	80006ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fa1f 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d11b      	bne.n	8001edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0208 	mvn.w	r2, #8
 8001eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f9f2 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fbee 	bl	80006ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f9f5 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0210 	mvn.w	r2, #16
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2208      	movs	r2, #8
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f9c8 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fbc4 	bl	80006ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f9cb 	bl	80022c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0201 	mvn.w	r2, #1
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fa3a 	bl	80003d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	2b80      	cmp	r3, #128	; 0x80
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fbeb 	bl	800275e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f990 	bl	80022d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0220 	mvn.w	r2, #32
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fbb5 	bl	800274a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002002:	2302      	movs	r3, #2
 8002004:	e048      	b.n	8002098 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d839      	bhi.n	8002088 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	08002051 	.word	0x08002051
 8002020:	08002089 	.word	0x08002089
 8002024:	08002089 	.word	0x08002089
 8002028:	08002089 	.word	0x08002089
 800202c:	0800205f 	.word	0x0800205f
 8002030:	08002089 	.word	0x08002089
 8002034:	08002089 	.word	0x08002089
 8002038:	08002089 	.word	0x08002089
 800203c:	0800206d 	.word	0x0800206d
 8002040:	08002089 	.word	0x08002089
 8002044:	08002089 	.word	0x08002089
 8002048:	08002089 	.word	0x08002089
 800204c:	0800207b 	.word	0x0800207b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f9c6 	bl	80023e8 <TIM_OC1_SetConfig>
      break;
 800205c:	e017      	b.n	800208e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fa25 	bl	80024b4 <TIM_OC2_SetConfig>
      break;
 800206a:	e010      	b.n	800208e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fa8a 	bl	800258c <TIM_OC3_SetConfig>
      break;
 8002078:	e009      	b.n	800208e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 faed 	bl	8002660 <TIM_OC4_SetConfig>
      break;
 8002086:	e002      	b.n	800208e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
      break;
 800208c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ae      	b.n	800221c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	f200 809f 	bhi.w	800220c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800220d 	.word	0x0800220d
 80020dc:	0800220d 	.word	0x0800220d
 80020e0:	0800220d 	.word	0x0800220d
 80020e4:	08002149 	.word	0x08002149
 80020e8:	0800220d 	.word	0x0800220d
 80020ec:	0800220d 	.word	0x0800220d
 80020f0:	0800220d 	.word	0x0800220d
 80020f4:	0800218b 	.word	0x0800218b
 80020f8:	0800220d 	.word	0x0800220d
 80020fc:	0800220d 	.word	0x0800220d
 8002100:	0800220d 	.word	0x0800220d
 8002104:	080021cb 	.word	0x080021cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f96a 	bl	80023e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0208 	orr.w	r2, r2, #8
 8002122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6999      	ldr	r1, [r3, #24]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	619a      	str	r2, [r3, #24]
      break;
 8002146:	e064      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f9b0 	bl	80024b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	619a      	str	r2, [r3, #24]
      break;
 8002188:	e043      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f9fb 	bl	800258c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0208 	orr.w	r2, r2, #8
 80021a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0204 	bic.w	r2, r2, #4
 80021b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	61da      	str	r2, [r3, #28]
      break;
 80021c8:	e023      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa45 	bl	8002660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69d9      	ldr	r1, [r3, #28]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
      break;
 800220a:	e002      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	75fb      	strb	r3, [r7, #23]
      break;
 8002210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d831      	bhi.n	800229c <HAL_TIM_ReadCapturedValue+0x78>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_TIM_ReadCapturedValue+0x1c>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002275 	.word	0x08002275
 8002244:	0800229d 	.word	0x0800229d
 8002248:	0800229d 	.word	0x0800229d
 800224c:	0800229d 	.word	0x0800229d
 8002250:	0800227f 	.word	0x0800227f
 8002254:	0800229d 	.word	0x0800229d
 8002258:	0800229d 	.word	0x0800229d
 800225c:	0800229d 	.word	0x0800229d
 8002260:	08002289 	.word	0x08002289
 8002264:	0800229d 	.word	0x0800229d
 8002268:	0800229d 	.word	0x0800229d
 800226c:	0800229d 	.word	0x0800229d
 8002270:	08002293 	.word	0x08002293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	60fb      	str	r3, [r7, #12]

      break;
 800227c:	e00f      	b.n	800229e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	60fb      	str	r3, [r7, #12]

      break;
 8002286:	e00a      	b.n	800229e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	60fb      	str	r3, [r7, #12]

      break;
 8002290:	e005      	b.n	800229e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	60fb      	str	r3, [r7, #12]

      break;
 800229a:	e000      	b.n	800229e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800229c:	bf00      	nop
  }

  return tmpreg;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a34      	ldr	r2, [pc, #208]	; (80023cc <TIM_Base_SetConfig+0xe4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00f      	beq.n	8002320 <TIM_Base_SetConfig+0x38>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d00b      	beq.n	8002320 <TIM_Base_SetConfig+0x38>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <TIM_Base_SetConfig+0xe8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <TIM_Base_SetConfig+0x38>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <TIM_Base_SetConfig+0xec>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x38>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2f      	ldr	r2, [pc, #188]	; (80023d8 <TIM_Base_SetConfig+0xf0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <TIM_Base_SetConfig+0xe4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01b      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d017      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <TIM_Base_SetConfig+0xe8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <TIM_Base_SetConfig+0xec>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00f      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <TIM_Base_SetConfig+0xf0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00b      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <TIM_Base_SetConfig+0xf4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <TIM_Base_SetConfig+0xf8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d003      	beq.n	8002372 <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <TIM_Base_SetConfig+0xfc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d108      	bne.n	8002384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <TIM_Base_SetConfig+0xe4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d103      	bne.n	80023b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	615a      	str	r2, [r3, #20]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800

080023e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f023 0302 	bic.w	r3, r3, #2
 8002430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <TIM_OC1_SetConfig+0xc8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d10c      	bne.n	800245e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0308 	bic.w	r3, r3, #8
 800244a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <TIM_OC1_SetConfig+0xc8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d111      	bne.n	800248a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800246c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	621a      	str	r2, [r3, #32]
}
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40010000 	.word	0x40010000

080024b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f023 0210 	bic.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0320 	bic.w	r3, r3, #32
 80024fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <TIM_OC2_SetConfig+0xd4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10d      	bne.n	8002530 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800251a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <TIM_OC2_SetConfig+0xd4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d113      	bne.n	8002560 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40010000 	.word	0x40010000

0800258c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <TIM_OC3_SetConfig+0xd0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10d      	bne.n	8002606 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <TIM_OC3_SetConfig+0xd0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d113      	bne.n	8002636 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800261c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40010000 	.word	0x40010000

08002660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	031b      	lsls	r3, r3, #12
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <TIM_OC4_SetConfig+0x9c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d109      	bne.n	80026d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000

08002700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2201      	movs	r2, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1a      	ldr	r2, [r3, #32]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <tft_ili93241_select_chip>:
static void tft_ili9341_set_window(uint16_t x_col, uint16_t y_col, uint16_t x_page, uint16_t y_page);
void tft_ili9341_draw_pixel(uint16_t x, uint16_t y, Color eColor);
void tft_ili9341_fill_screen(Color eColor);

void tft_ili93241_select_chip(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN_NUM, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800277e:	4802      	ldr	r0, [pc, #8]	; (8002788 <tft_ili93241_select_chip+0x14>)
 8002780:	f7fe fca8 	bl	80010d4 <HAL_GPIO_WritePin>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40020400 	.word	0x40020400

0800278c <tft_ili93241_unselect_chip>:

void tft_ili93241_unselect_chip(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN_NUM, GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002796:	4802      	ldr	r0, [pc, #8]	; (80027a0 <tft_ili93241_unselect_chip+0x14>)
 8002798:	f7fe fc9c 	bl	80010d4 <HAL_GPIO_WritePin>
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40020400 	.word	0x40020400

080027a4 <tft_ili9341_send_cmd>:

    tft_ili93241_unselect_chip();
}

static void tft_ili9341_send_cmd(uint8_t usCmd)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <tft_ili9341_send_cmd+0x2c>)
 80027b6:	f7fe fc8d 	bl	80010d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &usCmd, 1, HAL_MAX_DELAY);
 80027ba:	1df9      	adds	r1, r7, #7
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	2201      	movs	r2, #1
 80027c2:	4804      	ldr	r0, [pc, #16]	; (80027d4 <tft_ili9341_send_cmd+0x30>)
 80027c4:	f7fe fd24 	bl	8001210 <HAL_SPI_Transmit>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40020400 	.word	0x40020400
 80027d4:	20000120 	.word	0x20000120

080027d8 <tft_ili9341_send_data>:

static void tft_ili9341_send_data(uint8_t* buff, size_t buff_len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_SET);
 80027e2:	2201      	movs	r2, #1
 80027e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e8:	4810      	ldr	r0, [pc, #64]	; (800282c <tft_ili9341_send_data+0x54>)
 80027ea:	f7fe fc73 	bl	80010d4 <HAL_GPIO_WritePin>
    while (buff_len > 0)
 80027ee:	e015      	b.n	800281c <tft_ili9341_send_data+0x44>
    {
        uint16_t chunk_len = buff_len  > 32768 ? 32768 : buff_len ;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f6:	bf28      	it	cs
 80027f8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80027fc:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&hspi, buff, chunk_len, HAL_MAX_DELAY);
 80027fe:	89fa      	ldrh	r2, [r7, #14]
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	480a      	ldr	r0, [pc, #40]	; (8002830 <tft_ili9341_send_data+0x58>)
 8002808:	f7fe fd02 	bl	8001210 <HAL_SPI_Transmit>
        buff_len -= chunk_len;
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	603b      	str	r3, [r7, #0]
        buff += chunk_len;
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	607b      	str	r3, [r7, #4]
    while (buff_len > 0)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e6      	bne.n	80027f0 <tft_ili9341_send_data+0x18>
    }
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40020400 	.word	0x40020400
 8002830:	20000120 	.word	0x20000120

08002834 <tft_ili9341_set_window>:
{
    tft_ili9341_send_cmd(TFT_CMD_DISPLAY_OFF);
}

static void tft_ili9341_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) 
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4604      	mov	r4, r0
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4623      	mov	r3, r4
 8002844:	80fb      	strh	r3, [r7, #6]
 8002846:	4603      	mov	r3, r0
 8002848:	80bb      	strh	r3, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	807b      	strh	r3, [r7, #2]
 800284e:	4613      	mov	r3, r2
 8002850:	803b      	strh	r3, [r7, #0]
    /* column address set */
    tft_ili9341_send_cmd(0x2A);
 8002852:	202a      	movs	r0, #42	; 0x2a
 8002854:	f7ff ffa6 	bl	80027a4 <tft_ili9341_send_cmd>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	b29b      	uxth	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	733b      	strb	r3, [r7, #12]
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	737b      	strb	r3, [r7, #13]
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b29b      	uxth	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	73bb      	strb	r3, [r7, #14]
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	73fb      	strb	r3, [r7, #15]
        tft_ili9341_send_data(data, sizeof(data));
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2104      	movs	r1, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ffaa 	bl	80027d8 <tft_ili9341_send_data>
    }

    /* row address set */
    tft_ili9341_send_cmd(0x2B);
 8002884:	202b      	movs	r0, #43	; 0x2b
 8002886:	f7ff ff8d 	bl	80027a4 <tft_ili9341_send_cmd>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800288a:	88bb      	ldrh	r3, [r7, #4]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	b29b      	uxth	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	723b      	strb	r3, [r7, #8]
 8002894:	88bb      	ldrh	r3, [r7, #4]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	727b      	strb	r3, [r7, #9]
 800289a:	883b      	ldrh	r3, [r7, #0]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	72bb      	strb	r3, [r7, #10]
 80028a4:	883b      	ldrh	r3, [r7, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	72fb      	strb	r3, [r7, #11]
        tft_ili9341_send_data(data, sizeof(data));
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	2104      	movs	r1, #4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff91 	bl	80027d8 <tft_ili9341_send_data>
    }

    /* write to RAM */
    tft_ili9341_send_cmd(0x2C);
 80028b6:	202c      	movs	r0, #44	; 0x2c
 80028b8:	f7ff ff74 	bl	80027a4 <tft_ili9341_send_cmd>
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}

080028c4 <tft_ili9341_fill_rectangle>:

void tft_ili9341_fill_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) 
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	4603      	mov	r3, r0
 80028d8:	80bb      	strh	r3, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
 80028de:	4613      	mov	r3, r2
 80028e0:	803b      	strh	r3, [r7, #0]
    uint8_t data[] = { UPPER_NIBBLE(color), LOWER_NIBBLE(color) };
 80028e2:	8c3b      	ldrh	r3, [r7, #32]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	733b      	strb	r3, [r7, #12]
 80028ec:	8c3b      	ldrh	r3, [r7, #32]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	737b      	strb	r3, [r7, #13]

    if ( (x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) 
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	2bef      	cmp	r3, #239	; 0xef
 80028f6:	d84c      	bhi.n	8002992 <tft_ili9341_fill_rectangle+0xce>
 80028f8:	88bb      	ldrh	r3, [r7, #4]
 80028fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028fe:	d248      	bcs.n	8002992 <tft_ili9341_fill_rectangle+0xce>
    {
        return;
    }
        
    if ( (x + w - 1) >= ILI9341_WIDTH)
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	4413      	add	r3, r2
 8002906:	2bf0      	cmp	r3, #240	; 0xf0
 8002908:	dd03      	ble.n	8002912 <tft_ili9341_fill_rectangle+0x4e>
    {
        w = ILI9341_WIDTH - x;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002910:	807b      	strh	r3, [r7, #2]
    }

    if ( (y + h - 1) >= ILI9341_HEIGHT)
 8002912:	88ba      	ldrh	r2, [r7, #4]
 8002914:	883b      	ldrh	r3, [r7, #0]
 8002916:	4413      	add	r3, r2
 8002918:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800291c:	dd03      	ble.n	8002926 <tft_ili9341_fill_rectangle+0x62>
    {
        h = ILI9341_HEIGHT - y;
 800291e:	88bb      	ldrh	r3, [r7, #4]
 8002920:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002924:	803b      	strh	r3, [r7, #0]
    }

    tft_ili93241_select_chip();
 8002926:	f7ff ff25 	bl	8002774 <tft_ili93241_select_chip>
    tft_ili9341_set_window(x, y, x+w-1, y+h-1);
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4413      	add	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29c      	uxth	r4, r3
 8002936:	88ba      	ldrh	r2, [r7, #4]
 8002938:	883b      	ldrh	r3, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	88b9      	ldrh	r1, [r7, #4]
 8002944:	88f8      	ldrh	r0, [r7, #6]
 8002946:	4622      	mov	r2, r4
 8002948:	f7ff ff74 	bl	8002834 <tft_ili9341_set_window>
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002952:	4812      	ldr	r0, [pc, #72]	; (800299c <tft_ili9341_fill_rectangle+0xd8>)
 8002954:	f7fe fbbe 	bl	80010d4 <HAL_GPIO_WritePin>
    for ( y = h; y > 0; y-- )
 8002958:	883b      	ldrh	r3, [r7, #0]
 800295a:	80bb      	strh	r3, [r7, #4]
 800295c:	e013      	b.n	8002986 <tft_ili9341_fill_rectangle+0xc2>
    {
        for ( x = w; x > 0; x-- )
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	e00a      	b.n	800297a <tft_ili9341_fill_rectangle+0xb6>
        {
            HAL_SPI_Transmit(&hspi, data, sizeof(data), HAL_MAX_DELAY);
 8002964:	f107 010c 	add.w	r1, r7, #12
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	2202      	movs	r2, #2
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <tft_ili9341_fill_rectangle+0xdc>)
 8002970:	f7fe fc4e 	bl	8001210 <HAL_SPI_Transmit>
        for ( x = w; x > 0; x-- )
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	3b01      	subs	r3, #1
 8002978:	80fb      	strh	r3, [r7, #6]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f1      	bne.n	8002964 <tft_ili9341_fill_rectangle+0xa0>
    for ( y = h; y > 0; y-- )
 8002980:	88bb      	ldrh	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	80bb      	strh	r3, [r7, #4]
 8002986:	88bb      	ldrh	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e8      	bne.n	800295e <tft_ili9341_fill_rectangle+0x9a>
        }
    }
    tft_ili93241_unselect_chip();
 800298c:	f7ff fefe 	bl	800278c <tft_ili93241_unselect_chip>
 8002990:	e000      	b.n	8002994 <tft_ili9341_fill_rectangle+0xd0>
        return;
 8002992:	bf00      	nop
}
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	40020400 	.word	0x40020400
 80029a0:	20000120 	.word	0x20000120

080029a4 <tft_ili9341_fill_screen>:

void tft_ili9341_fill_screen(Color eColor)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
    tft_ili9341_fill_rectangle(0, 0, TFT_ILI9341_WIDTH, TFT_ILI9341_HEIGHT, eColor);
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80029b6:	22f0      	movs	r2, #240	; 0xf0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff ff82 	bl	80028c4 <tft_ili9341_fill_rectangle>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	4603      	mov	r3, r0
 80029dc:	80bb      	strh	r3, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
 80029e2:	4613      	mov	r3, r2
 80029e4:	803b      	strh	r3, [r7, #0]
    if ( (x >= TFT_ILI9341_WIDTH) || (y >= TFT_ILI9341_HEIGHT) )
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2bef      	cmp	r3, #239	; 0xef
 80029ea:	d827      	bhi.n	8002a3c <ILI9341_DrawImage+0x74>
 80029ec:	88bb      	ldrh	r3, [r7, #4]
 80029ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80029f2:	d223      	bcs.n	8002a3c <ILI9341_DrawImage+0x74>
    {
        return;
    }
    if ( (x + w - 1) >= TFT_ILI9341_WIDTH)
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	4413      	add	r3, r2
 80029fa:	2bf0      	cmp	r3, #240	; 0xf0
 80029fc:	dc20      	bgt.n	8002a40 <ILI9341_DrawImage+0x78>
    {
        return;
    }
    tft_ili93241_select_chip();
 80029fe:	f7ff feb9 	bl	8002774 <tft_ili93241_select_chip>
    tft_ili9341_set_window(x, y, x+w-1, y+h-1);
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	4413      	add	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29c      	uxth	r4, r3
 8002a0e:	88ba      	ldrh	r2, [r7, #4]
 8002a10:	883b      	ldrh	r3, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	88b9      	ldrh	r1, [r7, #4]
 8002a1c:	88f8      	ldrh	r0, [r7, #6]
 8002a1e:	4622      	mov	r2, r4
 8002a20:	f7ff ff08 	bl	8002834 <tft_ili9341_set_window>
    tft_ili9341_send_data( (uint8_t*)data, sizeof(uint16_t) * w * h);
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	883a      	ldrh	r2, [r7, #0]
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4619      	mov	r1, r3
 8002a30:	69b8      	ldr	r0, [r7, #24]
 8002a32:	f7ff fed1 	bl	80027d8 <tft_ili9341_send_data>
    tft_ili93241_unselect_chip();
 8002a36:	f7ff fea9 	bl	800278c <tft_ili93241_unselect_chip>
 8002a3a:	e002      	b.n	8002a42 <ILI9341_DrawImage+0x7a>
        return;
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <ILI9341_DrawImage+0x7a>
        return;
 8002a40:	bf00      	nop
}
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}

08002a48 <tft_ili9341_send_char>:


static void tft_ili9341_send_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) 
{
 8002a48:	b082      	sub	sp, #8
 8002a4a:	b590      	push	{r4, r7, lr}
 8002a4c:	b089      	sub	sp, #36	; 0x24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
 8002a56:	460b      	mov	r3, r1
 8002a58:	80bb      	strh	r3, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    tft_ili9341_set_window(x, y, x+font.width-1, y+font.height-1);
 8002a5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4413      	add	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29c      	uxth	r4, r3
 8002a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	88bb      	ldrh	r3, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	88b9      	ldrh	r1, [r7, #4]
 8002a80:	88f8      	ldrh	r0, [r7, #6]
 8002a82:	4622      	mov	r2, r4
 8002a84:	f7ff fed6 	bl	8002834 <tft_ili9341_set_window>
    for(i = 0; i < font.height; i++) 
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	e043      	b.n	8002b16 <tft_ili9341_send_char+0xce>
    {
        b = font.data[(ch - 32) * font.height + i];
 8002a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	3b20      	subs	r3, #32
 8002a94:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	617b      	str	r3, [r7, #20]
        for (j = 0; j < font.width; j++) 
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e029      	b.n	8002b04 <tft_ili9341_send_char+0xbc>
        {
            if ((b << j) & 0x8000)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <tft_ili9341_send_char+0x96>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002ac0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	743b      	strb	r3, [r7, #16]
 8002aca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	747b      	strb	r3, [r7, #17]
                tft_ili9341_send_data(data, sizeof(data));
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fe7e 	bl	80027d8 <tft_ili9341_send_data>
 8002adc:	e00f      	b.n	8002afe <tft_ili9341_send_char+0xb6>
            } 
            else 
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	733b      	strb	r3, [r7, #12]
 8002aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	737b      	strb	r3, [r7, #13]
                tft_ili9341_send_data(data, sizeof(data));
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	2102      	movs	r1, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe6d 	bl	80027d8 <tft_ili9341_send_data>
        for (j = 0; j < font.width; j++) 
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d3cf      	bcc.n	8002ab0 <tft_ili9341_send_char+0x68>
    for(i = 0; i < font.height; i++) 
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d3b5      	bcc.n	8002a8e <tft_ili9341_send_char+0x46>
            }
        }
    }
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr

08002b32 <tft_ili9341_send_str>:

void tft_ili9341_send_str(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002b32:	b082      	sub	sp, #8
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	603a      	str	r2, [r7, #0]
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
 8002b42:	460b      	mov	r3, r1
 8002b44:	80bb      	strh	r3, [r7, #4]
    tft_ili93241_select_chip();
 8002b46:	f7ff fe15 	bl	8002774 <tft_ili93241_select_chip>
    while (*str)
 8002b4a:	e02e      	b.n	8002baa <tft_ili9341_send_str+0x78>
    {
        if (x + font.width >= ILI9341_WIDTH)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	7d3a      	ldrb	r2, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	2bef      	cmp	r3, #239	; 0xef
 8002b54:	dd14      	ble.n	8002b80 <tft_ili9341_send_str+0x4e>
        {
            x = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002b5a:	7d7b      	ldrb	r3, [r7, #21]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	88bb      	ldrh	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= ILI9341_HEIGHT) 
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	7d7a      	ldrb	r2, [r7, #21]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b6e:	da21      	bge.n	8002bb4 <tft_ili9341_send_str+0x82>
            {
                break;
            }

            if (*str == ' ')
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d103      	bne.n	8002b80 <tft_ili9341_send_str+0x4e>
            {
                /* skip spaces in the beginning of the new line */
                str++;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
                continue;
 8002b7e:	e014      	b.n	8002baa <tft_ili9341_send_str+0x78>
            }
        }
        tft_ili9341_send_char(x, y, *str, font, color, bgcolor);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	88b9      	ldrh	r1, [r7, #4]
 8002b86:	88f8      	ldrh	r0, [r7, #6]
 8002b88:	8c3b      	ldrh	r3, [r7, #32]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	8bbb      	ldrh	r3, [r7, #28]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f7ff ff57 	bl	8002a48 <tft_ili9341_send_char>
        x += font.width;
 8002b9a:	7d3b      	ldrb	r3, [r7, #20]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	80fb      	strh	r3, [r7, #6]
        str++;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	603b      	str	r3, [r7, #0]
    while (*str)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1cc      	bne.n	8002b4c <tft_ili9341_send_str+0x1a>
 8002bb2:	e000      	b.n	8002bb6 <tft_ili9341_send_str+0x84>
                break;
 8002bb4:	bf00      	nop
    }
    tft_ili93241_unselect_chip();
 8002bb6:	f7ff fde9 	bl	800278c <tft_ili93241_unselect_chip>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bc4:	b002      	add	sp, #8
 8002bc6:	4770      	bx	lr

08002bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bf2:	f7fd ff1f 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f002 fc9f 	bl	8005538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfa:	f7fd fc63 	bl	80004c4 <main>
  bx  lr    
 8002bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002c0c:	08022bb4 	.word	0x08022bb4
  ldr r2, =_sbss
 8002c10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002c14:	20009ca4 	.word	0x20009ca4

08002c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC_IRQHandler>

08002c1a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0208 	add.w	r2, r3, #8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c32:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0208 	add.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 0208 	add.w	r2, r3, #8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d103      	bne.n	8002cdc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e00c      	b.n	8002cf6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	e002      	b.n	8002cea <vListInsert+0x2e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d2f6      	bcs.n	8002ce4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6852      	ldr	r2, [r2, #4]
 8002d4e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d103      	bne.n	8002d62 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05d      	beq.n	8002e74 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d059      	beq.n	8002e74 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	2100      	movs	r1, #0
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d000      	beq.n	8002dd4 <xQueueGenericReset+0x50>
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d14c      	bne.n	8002e74 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002dda:	f002 f88d 	bl	8004ef8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	6939      	ldr	r1, [r7, #16]
 8002de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	441a      	add	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2200      	movs	r2, #0
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6939      	ldr	r1, [r7, #16]
 8002e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	441a      	add	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d114      	bne.n	8002e5a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01a      	beq.n	8002e6e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 f81f 	bl	8003e80 <xTaskRemoveFromEventList>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <xQueueGenericReset+0x11c>)
 8002e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	e009      	b.n	8002e6e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fedb 	bl	8002c1a <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fed6 	bl	8002c1a <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e6e:	f002 f873 	bl	8004f58 <vPortExitCritical>
 8002e72:	e001      	b.n	8002e78 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <xQueueGenericReset+0x110>
        __asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	60bb      	str	r3, [r7, #8]
    }
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e94:	697b      	ldr	r3, [r7, #20]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02e      	beq.n	8002f1a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d000      	beq.n	8002ecc <xQueueGenericCreate+0x28>
 8002eca:	2101      	movs	r1, #1
 8002ecc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d123      	bne.n	8002f1a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002eda:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ede:	d81c      	bhi.n	8002f1a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 f924 	bl	800513c <pvPortMalloc>
 8002ef4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01c      	beq.n	8002f36 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3350      	adds	r3, #80	; 0x50
 8002f04:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f814 	bl	8002f40 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f18:	e00d      	b.n	8002f36 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreate+0x92>
        __asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
    }
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f36:	69fb      	ldr	r3, [r7, #28]
    }
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e002      	b.n	8002f62 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f6e:	2101      	movs	r1, #1
 8002f70:	69b8      	ldr	r0, [r7, #24]
 8002f72:	f7ff ff07 	bl	8002d84 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <xQueueReceive+0x30>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	623b      	str	r3, [r7, #32]
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <xQueueReceive+0x3e>
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <xQueueReceive+0x42>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <xQueueReceive+0x44>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueReceive+0x5e>
        __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	61fb      	str	r3, [r7, #28]
    }
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe6:	f001 f95b 	bl	80042a0 <xTaskGetSchedulerState>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <xQueueReceive+0x6e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <xQueueReceive+0x72>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueReceive+0x74>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueReceive+0x8e>
        __asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61bb      	str	r3, [r7, #24]
    }
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003016:	f001 ff6f 	bl	8004ef8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01f      	beq.n	8003066 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800302a:	f000 f88d 	bl	8003148 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00f      	beq.n	800305e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	3310      	adds	r3, #16
 8003042:	4618      	mov	r0, r3
 8003044:	f000 ff1c 	bl	8003e80 <xTaskRemoveFromEventList>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <xQueueReceive+0x1bc>)
 8003050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800305e:	f001 ff7b 	bl	8004f58 <vPortExitCritical>
                return pdPASS;
 8003062:	2301      	movs	r3, #1
 8003064:	e069      	b.n	800313a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800306c:	f001 ff74 	bl	8004f58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003070:	2300      	movs	r3, #0
 8003072:	e062      	b.n	800313a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	4618      	mov	r0, r3
 8003080:	f000 ffd4 	bl	800402c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003088:	f001 ff66 	bl	8004f58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800308c:	f000 fc02 	bl	8003894 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003090:	f001 ff32 	bl	8004ef8 <vPortEnterCritical>
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800309a:	b25b      	sxtb	r3, r3
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d103      	bne.n	80030aa <xQueueReceive+0x122>
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d103      	bne.n	80030c0 <xQueueReceive+0x138>
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c0:	f001 ff4a 	bl	8004f58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c4:	1d3a      	adds	r2, r7, #4
 80030c6:	f107 0310 	add.w	r3, r7, #16
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 ffc3 	bl	8004058 <xTaskCheckForTimeOut>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d123      	bne.n	8003120 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030da:	f000 f8ad 	bl	8003238 <prvIsQueueEmpty>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	3324      	adds	r3, #36	; 0x24
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fe5d 	bl	8003dac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f4:	f000 f84e 	bl	8003194 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030f8:	f000 fbda 	bl	80038b0 <xTaskResumeAll>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d189      	bne.n	8003016 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <xQueueReceive+0x1bc>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	e780      	b.n	8003016 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003116:	f000 f83d 	bl	8003194 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800311a:	f000 fbc9 	bl	80038b0 <xTaskResumeAll>
 800311e:	e77a      	b.n	8003016 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003122:	f000 f837 	bl	8003194 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003126:	f000 fbc3 	bl	80038b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800312a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312c:	f000 f884 	bl	8003238 <prvIsQueueEmpty>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f43f af6f 	beq.w	8003016 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003138:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800313a:	4618      	mov	r0, r3
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	d303      	bcc.n	800317c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	461a      	mov	r2, r3
 8003186:	6838      	ldr	r0, [r7, #0]
 8003188:	f002 f9fa 	bl	8005580 <memcpy>
    }
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800319c:	f001 feac 	bl	8004ef8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80031a8:	e011      	b.n	80031ce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3324      	adds	r3, #36	; 0x24
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fe62 	bl	8003e80 <xTaskRemoveFromEventList>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80031c2:	f000 ffaf 	bl	8004124 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	dce9      	bgt.n	80031aa <prvUnlockQueue+0x16>
 80031d6:	e000      	b.n	80031da <prvUnlockQueue+0x46>
                        break;
 80031d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80031e2:	f001 feb9 	bl	8004f58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80031e6:	f001 fe87 	bl	8004ef8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80031f2:	e011      	b.n	8003218 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3310      	adds	r3, #16
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe3d 	bl	8003e80 <xTaskRemoveFromEventList>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800320c:	f000 ff8a 	bl	8004124 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003210:	7bbb      	ldrb	r3, [r7, #14]
 8003212:	3b01      	subs	r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dce9      	bgt.n	80031f4 <prvUnlockQueue+0x60>
 8003220:	e000      	b.n	8003224 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003222:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800322c:	f001 fe94 	bl	8004f58 <vPortExitCritical>
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003240:	f001 fe5a 	bl	8004ef8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e001      	b.n	8003256 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003256:	f001 fe7f 	bl	8004f58 <vPortExitCritical>

    return xReturn;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <vQueueAddToRegistry+0x26>
        __asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
    }
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d024      	beq.n	80032de <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e01e      	b.n	80032d8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <vQueueAddToRegistry+0x98>)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d105      	bne.n	80032b6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <vQueueAddToRegistry+0x98>)
 80032b0:	4413      	add	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
                    break;
 80032b4:	e013      	b.n	80032de <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <vQueueAddToRegistry+0x6e>
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <vQueueAddToRegistry+0x98>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <vQueueAddToRegistry+0x98>)
 80032ce:	4413      	add	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b07      	cmp	r3, #7
 80032dc:	d9dd      	bls.n	800329a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000178 	.word	0x20000178

08003300 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003310:	f001 fdf2 	bl	8004ef8 <vPortEnterCritical>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800331a:	b25b      	sxtb	r3, r3
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d103      	bne.n	800332a <vQueueWaitForMessageRestricted+0x2a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003330:	b25b      	sxtb	r3, r3
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <vQueueWaitForMessageRestricted+0x40>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003340:	f001 fe0a 	bl	8004f58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd4d 	bl	8003df4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff1a 	bl	8003194 <prvUnlockQueue>
    }
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	; 0x30
 800336c:	af04      	add	r7, sp, #16
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f001 fedd 	bl	800513c <pvPortMalloc>
 8003382:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338a:	205c      	movs	r0, #92	; 0x5c
 800338c:	f001 fed6 	bl	800513c <pvPortMalloc>
 8003390:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	e005      	b.n	80033ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f001 ffab 	bl	80052fc <vPortFree>
 80033a6:	e001      	b.n	80033ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d013      	beq.n	80033da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f80e 	bl	80033ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80033ce:	69f8      	ldr	r0, [r7, #28]
 80033d0:	f000 f8b0 	bl	8003534 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80033d4:	2301      	movs	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e002      	b.n	80033e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80033e0:	69bb      	ldr	r3, [r7, #24]
    }
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b088      	sub	sp, #32
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	461a      	mov	r2, r3
 8003402:	21a5      	movs	r1, #165	; 0xa5
 8003404:	f002 f8ca 	bl	800559c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003412:	3b01      	subs	r3, #1
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <prvInitialiseNewTask+0x58>
        __asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	617b      	str	r3, [r7, #20]
    }
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01f      	beq.n	8003488 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e012      	b.n	8003474 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	7819      	ldrb	r1, [r3, #0]
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	3334      	adds	r3, #52	; 0x34
 800345e:	460a      	mov	r2, r1
 8003460:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d006      	beq.n	800347c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b09      	cmp	r3, #9
 8003478:	d9e9      	bls.n	800344e <prvInitialiseNewTask+0x64>
 800347a:	e000      	b.n	800347e <prvInitialiseNewTask+0x94>
            {
                break;
 800347c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003486:	e003      	b.n	8003490 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	2b04      	cmp	r3, #4
 8003494:	d90a      	bls.n	80034ac <prvInitialiseNewTask+0xc2>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	613b      	str	r3, [r7, #16]
    }
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d901      	bls.n	80034b6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034b2:	2304      	movs	r3, #4
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fbc4 	bl	8002c5a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	3318      	adds	r3, #24
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fbbf 	bl	8002c5a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	f1c3 0205 	rsb	r2, r3, #5
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	3350      	adds	r3, #80	; 0x50
 80034f6:	2208      	movs	r2, #8
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 f84e 	bl	800559c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	3358      	adds	r3, #88	; 0x58
 8003504:	2202      	movs	r2, #2
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f002 f847 	bl	800559c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	69b8      	ldr	r0, [r7, #24]
 8003514:	f001 fbc2 	bl	8004c9c <pxPortInitialiseStack>
 8003518:	4602      	mov	r2, r0
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003528:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800352a:	bf00      	nop
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800353c:	f001 fcdc 	bl	8004ef8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003540:	4b40      	ldr	r3, [pc, #256]	; (8003644 <prvAddNewTaskToReadyList+0x110>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	4a3f      	ldr	r2, [pc, #252]	; (8003644 <prvAddNewTaskToReadyList+0x110>)
 8003548:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <prvAddNewTaskToReadyList+0x114>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <prvAddNewTaskToReadyList+0x114>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003558:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <prvAddNewTaskToReadyList+0x110>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d110      	bne.n	8003582 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003560:	f000 fe04 	bl	800416c <prvInitialiseTaskLists>
 8003564:	e00d      	b.n	8003582 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <prvAddNewTaskToReadyList+0x118>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <prvAddNewTaskToReadyList+0x114>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	429a      	cmp	r2, r3
 800357a:	d802      	bhi.n	8003582 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800357c:	4a32      	ldr	r2, [pc, #200]	; (8003648 <prvAddNewTaskToReadyList+0x114>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <prvAddNewTaskToReadyList+0x11c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	4a31      	ldr	r2, [pc, #196]	; (8003650 <prvAddNewTaskToReadyList+0x11c>)
 800358a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <prvAddNewTaskToReadyList+0x11c>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <prvAddNewTaskToReadyList+0x120>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <prvAddNewTaskToReadyList+0x120>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	492b      	ldr	r1, [pc, #172]	; (8003658 <prvAddNewTaskToReadyList+0x124>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3304      	adds	r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	3204      	adds	r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <prvAddNewTaskToReadyList+0x124>)
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4918      	ldr	r1, [pc, #96]	; (8003658 <prvAddNewTaskToReadyList+0x124>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	4814      	ldr	r0, [pc, #80]	; (8003658 <prvAddNewTaskToReadyList+0x124>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003612:	f001 fca1 	bl	8004f58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <prvAddNewTaskToReadyList+0x118>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <prvAddNewTaskToReadyList+0x114>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d207      	bcs.n	800363c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <prvAddNewTaskToReadyList+0x128>)
 800362e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000290 	.word	0x20000290
 8003648:	200001b8 	.word	0x200001b8
 800364c:	2000029c 	.word	0x2000029c
 8003650:	200002ac 	.word	0x200002ac
 8003654:	20000298 	.word	0x20000298
 8003658:	200001bc 	.word	0x200001bc
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003668:	f001 fc46 	bl	8004ef8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <vTaskDelete+0x18>
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <vTaskDelete+0x100>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e000      	b.n	800367a <vTaskDelete+0x1a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fb54 	bl	8002d2e <uxListRemove>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4934      	ldr	r1, [pc, #208]	; (8003764 <vTaskDelete+0x104>)
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <vTaskDelete+0x58>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2201      	movs	r2, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43da      	mvns	r2, r3
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <vTaskDelete+0x108>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4013      	ands	r3, r2
 80036b4:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <vTaskDelete+0x108>)
 80036b6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fb32 	bl	8002d2e <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <vTaskDelete+0x10c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <vTaskDelete+0x10c>)
 80036d2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <vTaskDelete+0x100>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d10b      	bne.n	80036f6 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4822      	ldr	r0, [pc, #136]	; (8003770 <vTaskDelete+0x110>)
 80036e6:	f7ff fac5 	bl	8002c74 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80036ea:	4b22      	ldr	r3, [pc, #136]	; (8003774 <vTaskDelete+0x114>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <vTaskDelete+0x114>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e006      	b.n	8003704 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <vTaskDelete+0x118>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <vTaskDelete+0x118>)
 80036fe:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003700:	f000 fdb2 	bl	8004268 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003704:	f001 fc28 	bl	8004f58 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <vTaskDelete+0x100>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	429a      	cmp	r2, r3
 8003710:	d002      	beq.n	8003718 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fd98 	bl	8004248 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <vTaskDelete+0x11c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <vTaskDelete+0x100>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d116      	bne.n	8003758 <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <vTaskDelete+0x120>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <vTaskDelete+0xe8>
        __asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60bb      	str	r3, [r7, #8]
    }
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <vTaskDelete+0x124>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200001b8 	.word	0x200001b8
 8003764:	200001bc 	.word	0x200001bc
 8003768:	20000298 	.word	0x20000298
 800376c:	200002ac 	.word	0x200002ac
 8003770:	20000264 	.word	0x20000264
 8003774:	20000278 	.word	0x20000278
 8003778:	20000290 	.word	0x20000290
 800377c:	2000029c 	.word	0x2000029c
 8003780:	200002b8 	.word	0x200002b8
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <vTaskDelay+0x60>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <vTaskDelay+0x30>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	60bb      	str	r3, [r7, #8]
    }
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80037b8:	f000 f86c 	bl	8003894 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037bc:	2100      	movs	r1, #0
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 ff68 	bl	8004694 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80037c4:	f000 f874 	bl	80038b0 <xTaskResumeAll>
 80037c8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <vTaskDelay+0x64>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200002b8 	.word	0x200002b8
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <vTaskStartScheduler+0x88>)
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	2282      	movs	r2, #130	; 0x82
 8003802:	491e      	ldr	r1, [pc, #120]	; (800387c <vTaskStartScheduler+0x8c>)
 8003804:	481e      	ldr	r0, [pc, #120]	; (8003880 <vTaskStartScheduler+0x90>)
 8003806:	f7ff fdaf 	bl	8003368 <xTaskCreate>
 800380a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003812:	f000 ffbf 	bl	8004794 <xTimerCreateTimerTask>
 8003816:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d116      	bne.n	800384c <vTaskStartScheduler+0x5c>
        __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60bb      	str	r3, [r7, #8]
    }
 8003830:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <vTaskStartScheduler+0x94>)
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <vTaskStartScheduler+0x98>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003840:	4b12      	ldr	r3, [pc, #72]	; (800388c <vTaskStartScheduler+0x9c>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003846:	f001 fab5 	bl	8004db4 <xPortStartScheduler>
 800384a:	e00e      	b.n	800386a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d10a      	bne.n	800386a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	607b      	str	r3, [r7, #4]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <vTaskStartScheduler+0xa0>)
 800386c:	681b      	ldr	r3, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200002b4 	.word	0x200002b4
 800387c:	08005640 	.word	0x08005640
 8003880:	0800413d 	.word	0x0800413d
 8003884:	200002b0 	.word	0x200002b0
 8003888:	2000029c 	.word	0x2000029c
 800388c:	20000294 	.word	0x20000294
 8003890:	20000014 	.word	0x20000014

08003894 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <vTaskSuspendAll+0x18>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a03      	ldr	r2, [pc, #12]	; (80038ac <vTaskSuspendAll+0x18>)
 80038a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	200002b8 	.word	0x200002b8

080038b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038be:	4b71      	ldr	r3, [pc, #452]	; (8003a84 <xTaskResumeAll+0x1d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <xTaskResumeAll+0x2c>
        __asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	607b      	str	r3, [r7, #4]
    }
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038dc:	f001 fb0c 	bl	8004ef8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038e0:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <xTaskResumeAll+0x1d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <xTaskResumeAll+0x1d4>)
 80038e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ea:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <xTaskResumeAll+0x1d4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 80c0 	bne.w	8003a74 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038f4:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <xTaskResumeAll+0x1d8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80bb 	beq.w	8003a74 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038fe:	e08a      	b.n	8003a16 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003900:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <xTaskResumeAll+0x1dc>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	6a12      	ldr	r2, [r2, #32]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	69d2      	ldr	r2, [r2, #28]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3318      	adds	r3, #24
 800392a:	429a      	cmp	r2, r3
 800392c:	d103      	bne.n	8003936 <xTaskResumeAll+0x86>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2200      	movs	r2, #0
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	68d2      	ldr	r2, [r2, #12]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	6892      	ldr	r2, [r2, #8]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3304      	adds	r3, #4
 8003968:	429a      	cmp	r2, r3
 800396a:	d103      	bne.n	8003974 <xTaskResumeAll+0xc4>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2200      	movs	r2, #0
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <xTaskResumeAll+0x1e0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <xTaskResumeAll+0x1e0>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	493e      	ldr	r1, [pc, #248]	; (8003a94 <xTaskResumeAll+0x1e4>)
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	3304      	adds	r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	3204      	adds	r2, #4
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1d1a      	adds	r2, r3, #4
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <xTaskResumeAll+0x1e4>)
 80039da:	441a      	add	r2, r3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	492b      	ldr	r1, [pc, #172]	; (8003a94 <xTaskResumeAll+0x1e4>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	4827      	ldr	r0, [pc, #156]	; (8003a94 <xTaskResumeAll+0x1e4>)
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4403      	add	r3, r0
 8003a00:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <xTaskResumeAll+0x1e8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <xTaskResumeAll+0x1ec>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <xTaskResumeAll+0x1dc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f47f af70 	bne.w	8003900 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a26:	f000 fc1f 	bl	8004268 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <xTaskResumeAll+0x1f0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a36:	f000 f847 	bl	8003ac8 <xTaskIncrementTick>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <xTaskResumeAll+0x1ec>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f1      	bne.n	8003a36 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <xTaskResumeAll+0x1f0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <xTaskResumeAll+0x1ec>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <xTaskResumeAll+0x1f4>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a74:	f001 fa70 	bl	8004f58 <vPortExitCritical>

    return xAlreadyYielded;
 8003a78:	69bb      	ldr	r3, [r7, #24]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200002b8 	.word	0x200002b8
 8003a88:	20000290 	.word	0x20000290
 8003a8c:	20000250 	.word	0x20000250
 8003a90:	20000298 	.word	0x20000298
 8003a94:	200001bc 	.word	0x200001bc
 8003a98:	200001b8 	.word	0x200001b8
 8003a9c:	200002a4 	.word	0x200002a4
 8003aa0:	200002a0 	.word	0x200002a0
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <xTaskGetTickCount+0x1c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000294 	.word	0x20000294

08003ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad2:	4b7d      	ldr	r3, [pc, #500]	; (8003cc8 <xTaskIncrementTick+0x200>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 80ec 	bne.w	8003cb4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <xTaskIncrementTick+0x204>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ae4:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <xTaskIncrementTick+0x204>)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d120      	bne.n	8003b32 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003af0:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <xTaskIncrementTick+0x208>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <xTaskIncrementTick+0x48>
        __asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
    }
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xTaskIncrementTick+0x46>
 8003b10:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <xTaskIncrementTick+0x208>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <xTaskIncrementTick+0x20c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6d      	ldr	r2, [pc, #436]	; (8003cd0 <xTaskIncrementTick+0x208>)
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <xTaskIncrementTick+0x20c>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <xTaskIncrementTick+0x210>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a6b      	ldr	r2, [pc, #428]	; (8003cd8 <xTaskIncrementTick+0x210>)
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	f000 fb9b 	bl	8004268 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b32:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <xTaskIncrementTick+0x214>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f0c0 80a6 	bcc.w	8003c8a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3e:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <xTaskIncrementTick+0x208>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b48:	4b64      	ldr	r3, [pc, #400]	; (8003cdc <xTaskIncrementTick+0x214>)
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	601a      	str	r2, [r3, #0]
                    break;
 8003b50:	e09b      	b.n	8003c8a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b52:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <xTaskIncrementTick+0x208>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003b62:	6a3a      	ldr	r2, [r7, #32]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d203      	bcs.n	8003b72 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b6a:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <xTaskIncrementTick+0x214>)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003b70:	e08b      	b.n	8003c8a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	68d2      	ldr	r2, [r2, #12]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	3304      	adds	r3, #4
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <xTaskIncrementTick+0xd8>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	615a      	str	r2, [r3, #20]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01e      	beq.n	8003bf6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	6a12      	ldr	r2, [r2, #32]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	69d2      	ldr	r2, [r2, #28]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3318      	adds	r3, #24
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d103      	bne.n	8003be6 <xTaskIncrementTick+0x11e>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <xTaskIncrementTick+0x218>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <xTaskIncrementTick+0x218>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4935      	ldr	r1, [pc, #212]	; (8003ce4 <xTaskIncrementTick+0x21c>)
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	3204      	adds	r2, #4
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <xTaskIncrementTick+0x21c>)
 8003c4c:	441a      	add	r2, r3
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	615a      	str	r2, [r3, #20]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	4923      	ldr	r1, [pc, #140]	; (8003ce4 <xTaskIncrementTick+0x21c>)
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	481f      	ldr	r0, [pc, #124]	; (8003ce4 <xTaskIncrementTick+0x21c>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4403      	add	r3, r0
 8003c72:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <xTaskIncrementTick+0x220>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	f4ff af5d 	bcc.w	8003b3e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c88:	e759      	b.n	8003b3e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <xTaskIncrementTick+0x220>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	4914      	ldr	r1, [pc, #80]	; (8003ce4 <xTaskIncrementTick+0x21c>)
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d901      	bls.n	8003ca6 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <xTaskIncrementTick+0x224>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	e004      	b.n	8003cbe <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <xTaskIncrementTick+0x228>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <xTaskIncrementTick+0x228>)
 8003cbc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200002b8 	.word	0x200002b8
 8003ccc:	20000294 	.word	0x20000294
 8003cd0:	20000248 	.word	0x20000248
 8003cd4:	2000024c 	.word	0x2000024c
 8003cd8:	200002a8 	.word	0x200002a8
 8003cdc:	200002b0 	.word	0x200002b0
 8003ce0:	20000298 	.word	0x20000298
 8003ce4:	200001bc 	.word	0x200001bc
 8003ce8:	200001b8 	.word	0x200001b8
 8003cec:	200002a4 	.word	0x200002a4
 8003cf0:	200002a0 	.word	0x200002a0

08003cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <vTaskSwitchContext+0xa4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <vTaskSwitchContext+0xa8>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003d08:	e03f      	b.n	8003d8a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <vTaskSwitchContext+0xa8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <vTaskSwitchContext+0xac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f1c3 031f 	rsb	r3, r3, #31
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	491f      	ldr	r1, [pc, #124]	; (8003da4 <vTaskSwitchContext+0xb0>)
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	607b      	str	r3, [r7, #4]
    }
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <vTaskSwitchContext+0x5a>
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <vTaskSwitchContext+0xb0>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3308      	adds	r3, #8
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d104      	bne.n	8003d80 <vTaskSwitchContext+0x8c>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <vTaskSwitchContext+0xb4>)
 8003d88:	6013      	str	r3, [r2, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200002b8 	.word	0x200002b8
 8003d9c:	200002a4 	.word	0x200002a4
 8003da0:	20000298 	.word	0x20000298
 8003da4:	200001bc 	.word	0x200001bc
 8003da8:	200001b8 	.word	0x200001b8

08003dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60fb      	str	r3, [r7, #12]
    }
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <vTaskPlaceOnEventList+0x44>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe ff6e 	bl	8002cbc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003de0:	2101      	movs	r1, #1
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f000 fc56 	bl	8004694 <prvAddCurrentTaskToDelayedList>
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200001b8 	.word	0x200001b8

08003df4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	613b      	str	r3, [r7, #16]
    }
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x88>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x88>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	621a      	str	r2, [r3, #32]
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x88>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	3218      	adds	r2, #24
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x88>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f103 0218 	add.w	r2, r3, #24
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <vTaskPlaceOnEventListRestricted+0x88>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68b8      	ldr	r0, [r7, #8]
 8003e6e:	f000 fc11 	bl	8004694 <prvAddCurrentTaskToDelayedList>
    }
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200001b8 	.word	0x200001b8

08003e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b08b      	sub	sp, #44	; 0x2c
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60fb      	str	r3, [r7, #12]
    }
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	6a12      	ldr	r2, [r2, #32]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	6a3a      	ldr	r2, [r7, #32]
 8003ec2:	69d2      	ldr	r2, [r2, #28]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	3318      	adds	r3, #24
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d103      	bne.n	8003eda <xTaskRemoveFromEventList+0x5a>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2200      	movs	r2, #0
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <xTaskRemoveFromEventList+0x194>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d15e      	bne.n	8003fb0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	68d2      	ldr	r2, [r2, #12]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	6892      	ldr	r2, [r2, #8]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	3304      	adds	r3, #4
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d103      	bne.n	8003f20 <xTaskRemoveFromEventList+0xa0>
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2200      	movs	r2, #0
 8003f24:	615a      	str	r2, [r3, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	4b37      	ldr	r3, [pc, #220]	; (8004018 <xTaskRemoveFromEventList+0x198>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a36      	ldr	r2, [pc, #216]	; (8004018 <xTaskRemoveFromEventList+0x198>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	4935      	ldr	r1, [pc, #212]	; (800401c <xTaskRemoveFromEventList+0x19c>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3304      	adds	r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	6a3a      	ldr	r2, [r7, #32]
 8003f6c:	3204      	adds	r2, #4
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	1d1a      	adds	r2, r3, #4
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4a25      	ldr	r2, [pc, #148]	; (800401c <xTaskRemoveFromEventList+0x19c>)
 8003f86:	441a      	add	r2, r3
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	615a      	str	r2, [r3, #20]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4922      	ldr	r1, [pc, #136]	; (800401c <xTaskRemoveFromEventList+0x19c>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	481e      	ldr	r0, [pc, #120]	; (800401c <xTaskRemoveFromEventList+0x19c>)
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4403      	add	r3, r0
 8003fac:	6019      	str	r1, [r3, #0]
 8003fae:	e01b      	b.n	8003fe8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <xTaskRemoveFromEventList+0x1a0>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	61da      	str	r2, [r3, #28]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	3218      	adds	r2, #24
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f103 0218 	add.w	r2, r3, #24
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <xTaskRemoveFromEventList+0x1a0>)
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xTaskRemoveFromEventList+0x1a0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <xTaskRemoveFromEventList+0x1a0>)
 8003fe6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <xTaskRemoveFromEventList+0x1a4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d905      	bls.n	8004002 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <xTaskRemoveFromEventList+0x1a8>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e001      	b.n	8004006 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004008:	4618      	mov	r0, r3
 800400a:	372c      	adds	r7, #44	; 0x2c
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	200002b8 	.word	0x200002b8
 8004018:	20000298 	.word	0x20000298
 800401c:	200001bc 	.word	0x200001bc
 8004020:	20000250 	.word	0x20000250
 8004024:	200001b8 	.word	0x200001b8
 8004028:	200002a4 	.word	0x200002a4

0800402c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <vTaskInternalSetTimeOutState+0x24>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <vTaskInternalSetTimeOutState+0x28>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	200002a8 	.word	0x200002a8
 8004054:	20000294 	.word	0x20000294

08004058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	613b      	str	r3, [r7, #16]
    }
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
    }
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800409a:	f000 ff2d 	bl	8004ef8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800409e:	4b1f      	ldr	r3, [pc, #124]	; (800411c <xTaskCheckForTimeOut+0xc4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d102      	bne.n	80040be <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e026      	b.n	800410c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <xTaskCheckForTimeOut+0xc8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d00a      	beq.n	80040e0 <xTaskCheckForTimeOut+0x88>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d305      	bcc.n	80040e0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e015      	b.n	800410c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d20b      	bcs.n	8004102 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad2      	subs	r2, r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff98 	bl	800402c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e004      	b.n	800410c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800410c:	f000 ff24 	bl	8004f58 <vPortExitCritical>

    return xReturn;
 8004110:	69fb      	ldr	r3, [r7, #28]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000294 	.word	0x20000294
 8004120:	200002a8 	.word	0x200002a8

08004124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <vTaskMissedYield+0x14>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	200002a4 	.word	0x200002a4

0800413c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004144:	f000 f852 	bl	80041ec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <prvIdleTask+0x28>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d9f9      	bls.n	8004144 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <prvIdleTask+0x2c>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004160:	e7f0      	b.n	8004144 <prvIdleTask+0x8>
 8004162:	bf00      	nop
 8004164:	200001bc 	.word	0x200001bc
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	e00c      	b.n	8004192 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <prvInitialiseTaskLists+0x60>)
 8004184:	4413      	add	r3, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fd47 	bl	8002c1a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3301      	adds	r3, #1
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d9ef      	bls.n	8004178 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004198:	480d      	ldr	r0, [pc, #52]	; (80041d0 <prvInitialiseTaskLists+0x64>)
 800419a:	f7fe fd3e 	bl	8002c1a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <prvInitialiseTaskLists+0x68>)
 80041a0:	f7fe fd3b 	bl	8002c1a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80041a4:	480c      	ldr	r0, [pc, #48]	; (80041d8 <prvInitialiseTaskLists+0x6c>)
 80041a6:	f7fe fd38 	bl	8002c1a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80041aa:	480c      	ldr	r0, [pc, #48]	; (80041dc <prvInitialiseTaskLists+0x70>)
 80041ac:	f7fe fd35 	bl	8002c1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80041b0:	480b      	ldr	r0, [pc, #44]	; (80041e0 <prvInitialiseTaskLists+0x74>)
 80041b2:	f7fe fd32 	bl	8002c1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <prvInitialiseTaskLists+0x78>)
 80041b8:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <prvInitialiseTaskLists+0x64>)
 80041ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <prvInitialiseTaskLists+0x7c>)
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <prvInitialiseTaskLists+0x68>)
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200001bc 	.word	0x200001bc
 80041d0:	20000220 	.word	0x20000220
 80041d4:	20000234 	.word	0x20000234
 80041d8:	20000250 	.word	0x20000250
 80041dc:	20000264 	.word	0x20000264
 80041e0:	2000027c 	.word	0x2000027c
 80041e4:	20000248 	.word	0x20000248
 80041e8:	2000024c 	.word	0x2000024c

080041ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f2:	e019      	b.n	8004228 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80041f4:	f000 fe80 	bl	8004ef8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f8:	4b10      	ldr	r3, [pc, #64]	; (800423c <prvCheckTasksWaitingTermination+0x50>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fd92 	bl	8002d2e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <prvCheckTasksWaitingTermination+0x54>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <prvCheckTasksWaitingTermination+0x54>)
 8004212:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <prvCheckTasksWaitingTermination+0x58>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <prvCheckTasksWaitingTermination+0x58>)
 800421c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800421e:	f000 fe9b 	bl	8004f58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f810 	bl	8004248 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <prvCheckTasksWaitingTermination+0x58>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e1      	bne.n	80041f4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000264 	.word	0x20000264
 8004240:	20000290 	.word	0x20000290
 8004244:	20000278 	.word	0x20000278

08004248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	4618      	mov	r0, r3
 8004256:	f001 f851 	bl	80052fc <vPortFree>
                vPortFree( pxTCB );
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f001 f84e 	bl	80052fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <prvResetNextTaskUnblockTime+0x30>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <prvResetNextTaskUnblockTime+0x34>)
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800427e:	e005      	b.n	800428c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <prvResetNextTaskUnblockTime+0x30>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <prvResetNextTaskUnblockTime+0x34>)
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000248 	.word	0x20000248
 800429c:	200002b0 	.word	0x200002b0

080042a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <xTaskGetSchedulerState+0x34>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80042ae:	2301      	movs	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	e008      	b.n	80042c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <xTaskGetSchedulerState+0x38>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80042bc:	2302      	movs	r3, #2
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	e001      	b.n	80042c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80042c6:	687b      	ldr	r3, [r7, #4]
    }
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	2000029c 	.word	0x2000029c
 80042d8:	200002b8 	.word	0x200002b8

080042dc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d90a      	bls.n	8004306 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
    }
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004306:	f000 fdf7 	bl	8004ef8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800430a:	4b32      	ldr	r3, [pc, #200]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	3358      	adds	r3, #88	; 0x58
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d022      	beq.n	8004362 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	3214      	adds	r2, #20
 8004324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	43d2      	mvns	r2, r2
 800432c:	4011      	ands	r1, r2
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	3214      	adds	r2, #20
 8004332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	3358      	adds	r3, #88	; 0x58
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800434a:	2101      	movs	r1, #1
 800434c:	6a38      	ldr	r0, [r7, #32]
 800434e:	f000 f9a1 	bl	8004694 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <xTaskGenericNotifyWait+0xfc>)
 8004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004362:	f000 fdf9 	bl	8004f58 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004366:	f000 fdc7 	bl	8004ef8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	3214      	adds	r2, #20
 8004378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	3358      	adds	r3, #88	; 0x58
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d002      	beq.n	8004398 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e00e      	b.n	80043b6 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	3214      	adds	r2, #20
 80043a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	43d2      	mvns	r2, r2
 80043a8:	4011      	ands	r1, r2
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	3214      	adds	r2, #20
 80043ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <xTaskGenericNotifyWait+0xf8>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	3358      	adds	r3, #88	; 0x58
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80043c4:	f000 fdc8 	bl	8004f58 <vPortExitCritical>

        return xReturn;
 80043c8:	697b      	ldr	r3, [r7, #20]
    }
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200001b8 	.word	0x200001b8
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b092      	sub	sp, #72	; 0x48
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80043ea:	2301      	movs	r3, #1
 80043ec:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d90a      	bls.n	8004426 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004426:	f000 fe49 	bl	80050bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800442e:	f3ef 8211 	mrs	r2, BASEPRI
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	623a      	str	r2, [r7, #32]
 8004444:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004446:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	3214      	adds	r2, #20
 8004456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800445e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4413      	add	r3, r2
 8004464:	3358      	adds	r3, #88	; 0x58
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800446c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4413      	add	r3, r2
 8004472:	3358      	adds	r3, #88	; 0x58
 8004474:	2202      	movs	r2, #2
 8004476:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d83b      	bhi.n	80044f6 <xTaskGenericNotifyFromISR+0x11a>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <xTaskGenericNotifyFromISR+0xa8>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	08004515 	.word	0x08004515
 8004488:	08004499 	.word	0x08004499
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044cd 	.word	0x080044cd
 8004494:	080044db 	.word	0x080044db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	3214      	adds	r2, #20
 800449e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	3214      	adds	r2, #20
 80044ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80044b2:	e032      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80044b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	3214      	adds	r2, #20
 80044ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	3214      	adds	r2, #20
 80044c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80044ca:	e026      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80044cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	3214      	adds	r2, #20
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80044d8:	e01f      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80044da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d006      	beq.n	80044f0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80044e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	3214      	adds	r2, #20
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80044ee:	e014      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80044f4:	e011      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <xTaskGenericNotifyFromISR+0x29c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61bb      	str	r3, [r7, #24]
    }
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004518:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800451a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800451e:	2b01      	cmp	r3, #1
 8004520:	f040 809e 	bne.w	8004660 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	617b      	str	r3, [r7, #20]
    }
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004542:	4b4e      	ldr	r3, [pc, #312]	; (800467c <xTaskGenericNotifyFromISR+0x2a0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d15e      	bne.n	8004608 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
 8004550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456a:	3304      	adds	r3, #4
 800456c:	429a      	cmp	r2, r3
 800456e:	d103      	bne.n	8004578 <xTaskGenericNotifyFromISR+0x19c>
 8004570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457a:	2200      	movs	r2, #0
 800457c:	615a      	str	r2, [r3, #20]
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1e5a      	subs	r2, r3, #1
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	409a      	lsls	r2, r3
 8004590:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <xTaskGenericNotifyFromISR+0x2a4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	4a3a      	ldr	r2, [pc, #232]	; (8004680 <xTaskGenericNotifyFromISR+0x2a4>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	4939      	ldr	r1, [pc, #228]	; (8004684 <xTaskGenericNotifyFromISR+0x2a8>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3304      	adds	r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c4:	3204      	adds	r2, #4
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4a29      	ldr	r2, [pc, #164]	; (8004684 <xTaskGenericNotifyFromISR+0x2a8>)
 80045de:	441a      	add	r2, r3
 80045e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e2:	615a      	str	r2, [r3, #20]
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4926      	ldr	r1, [pc, #152]	; (8004684 <xTaskGenericNotifyFromISR+0x2a8>)
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	4822      	ldr	r0, [pc, #136]	; (8004684 <xTaskGenericNotifyFromISR+0x2a8>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4403      	add	r3, r0
 8004604:	6019      	str	r1, [r3, #0]
 8004606:	e01b      	b.n	8004640 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004608:	4b1f      	ldr	r3, [pc, #124]	; (8004688 <xTaskGenericNotifyFromISR+0x2ac>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004612:	61da      	str	r2, [r3, #28]
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461a:	621a      	str	r2, [r3, #32]
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004622:	3218      	adds	r2, #24
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004628:	f103 0218 	add.w	r2, r3, #24
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <xTaskGenericNotifyFromISR+0x2ac>)
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <xTaskGenericNotifyFromISR+0x2ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	4a12      	ldr	r2, [pc, #72]	; (8004688 <xTaskGenericNotifyFromISR+0x2ac>)
 800463e:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <xTaskGenericNotifyFromISR+0x2b0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	429a      	cmp	r2, r3
 800464c:	d908      	bls.n	8004660 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800464e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <xTaskGenericNotifyFromISR+0x2b4>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004662:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800466a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800466c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800466e:	4618      	mov	r0, r3
 8004670:	3748      	adds	r7, #72	; 0x48
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000294 	.word	0x20000294
 800467c:	200002b8 	.word	0x200002b8
 8004680:	20000298 	.word	0x20000298
 8004684:	200001bc 	.word	0x200001bc
 8004688:	20000250 	.word	0x20000250
 800468c:	200001b8 	.word	0x200001b8
 8004690:	200002a4 	.word	0x200002a4

08004694 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fb3f 	bl	8002d2e <uxListRemove>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	2201      	movs	r2, #1
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <prvAddCurrentTaskToDelayedList+0xec>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4013      	ands	r3, r2
 80046ca:	4a2d      	ldr	r2, [pc, #180]	; (8004780 <prvAddCurrentTaskToDelayedList+0xec>)
 80046cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d124      	bne.n	8004720 <prvAddCurrentTaskToDelayedList+0x8c>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d021      	beq.n	8004720 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046dc:	4b29      	ldr	r3, [pc, #164]	; (8004784 <prvAddCurrentTaskToDelayedList+0xf0>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	3204      	adds	r2, #4
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004710:	615a      	str	r2, [r3, #20]
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <prvAddCurrentTaskToDelayedList+0xf0>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800471e:	e026      	b.n	800476e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	d209      	bcs.n	800474c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <prvAddCurrentTaskToDelayedList+0xf4>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe fab9 	bl	8002cbc <vListInsert>
}
 800474a:	e010      	b.n	800476e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <prvAddCurrentTaskToDelayedList+0xf8>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fe faaf 	bl	8002cbc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d202      	bcs.n	800476e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <prvAddCurrentTaskToDelayedList+0xfc>)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6013      	str	r3, [r2, #0]
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000294 	.word	0x20000294
 800477c:	200001b8 	.word	0x200001b8
 8004780:	20000298 	.word	0x20000298
 8004784:	2000027c 	.word	0x2000027c
 8004788:	2000024c 	.word	0x2000024c
 800478c:	20000248 	.word	0x20000248
 8004790:	200002b0 	.word	0x200002b0

08004794 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800479e:	f000 fa47 	bl	8004c30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <xTimerCreateTimerTask+0x54>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <xTimerCreateTimerTask+0x58>)
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2302      	movs	r3, #2
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047b8:	490d      	ldr	r1, [pc, #52]	; (80047f0 <xTimerCreateTimerTask+0x5c>)
 80047ba:	480e      	ldr	r0, [pc, #56]	; (80047f4 <xTimerCreateTimerTask+0x60>)
 80047bc:	f7fe fdd4 	bl	8003368 <xTaskCreate>
 80047c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	603b      	str	r3, [r7, #0]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80047de:	687b      	ldr	r3, [r7, #4]
    }
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	200002ec 	.word	0x200002ec
 80047ec:	200002f0 	.word	0x200002f0
 80047f0:	08005648 	.word	0x08005648
 80047f4:	0800489d 	.word	0x0800489d

080047f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004804:	e008      	b.n	8004818 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	18d1      	adds	r1, r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f8dd 	bl	80049e4 <prvInsertTimerInActiveList>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ea      	bne.n	8004806 <prvReloadTimer+0xe>
        }
    }
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <prvProcessExpiredTimer+0x5c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fa6a 	bl	8002d2e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff ffc3 	bl	80047f8 <prvReloadTimer>
 8004872:	e008      	b.n	8004886 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	4798      	blx	r3
    }
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200002e4 	.word	0x200002e4

0800489c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a4:	f107 0308 	add.w	r3, r7, #8
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f857 	bl	800495c <prvGetNextExpireTime>
 80048ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4619      	mov	r1, r3
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f803 	bl	80048c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80048ba:	f000 f8d5 	bl	8004a68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048be:	e7f1      	b.n	80048a4 <prvTimerTask+0x8>

080048c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048ca:	f7fe ffe3 	bl	8003894 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f866 	bl	80049a4 <prvSampleTimeNow>
 80048d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d130      	bne.n	8004942 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d806      	bhi.n	80048fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80048ee:	f7fe ffdf 	bl	80038b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ffa1 	bl	800483c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80048fa:	e024      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <prvProcessTimerOrBlockTask+0x90>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <prvProcessTimerOrBlockTask+0x50>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <prvProcessTimerOrBlockTask+0x52>
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <prvProcessTimerOrBlockTask+0x94>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	f7fe fced 	bl	8003300 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004926:	f7fe ffc3 	bl	80038b0 <xTaskResumeAll>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <prvProcessTimerOrBlockTask+0x98>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
    }
 8004940:	e001      	b.n	8004946 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004942:	f7fe ffb5 	bl	80038b0 <xTaskResumeAll>
    }
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200002e8 	.word	0x200002e8
 8004954:	200002ec 	.word	0x200002ec
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <prvGetNextExpireTime+0x44>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <prvGetNextExpireTime+0x16>
 800496e:	2201      	movs	r2, #1
 8004970:	e000      	b.n	8004974 <prvGetNextExpireTime+0x18>
 8004972:	2200      	movs	r2, #0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <prvGetNextExpireTime+0x44>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e001      	b.n	8004990 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004990:	68fb      	ldr	r3, [r7, #12]
    }
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	200002e4 	.word	0x200002e4

080049a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80049ac:	f7ff f87c 	bl	8003aa8 <xTaskGetTickCount>
 80049b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <prvSampleTimeNow+0x3c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d205      	bcs.n	80049c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80049bc:	f000 f912 	bl	8004be4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e002      	b.n	80049ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <prvSampleTimeNow+0x3c>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80049d4:	68fb      	ldr	r3, [r7, #12]
    }
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200002f4 	.word	0x200002f4

080049e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d812      	bhi.n	8004a30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e01b      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <prvInsertTimerInActiveList+0x7c>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7fe f947 	bl	8002cbc <vListInsert>
 8004a2e:	e012      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d206      	bcs.n	8004a46 <prvInsertTimerInActiveList+0x62>
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e007      	b.n	8004a56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <prvInsertTimerInActiveList+0x80>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe f933 	bl	8002cbc <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a56:	697b      	ldr	r3, [r7, #20]
    }
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200002e8 	.word	0x200002e8
 8004a64:	200002e4 	.word	0x200002e4

08004a68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a6e:	e0a6      	b.n	8004bbe <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f2c0 80a2 	blt.w	8004bbc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f950 	bl	8002d2e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff87 	bl	80049a4 <prvSampleTimeNow>
 8004a96:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	f200 808e 	bhi.w	8004bbe <prvProcessReceivedCommands+0x156>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <prvProcessReceivedCommands+0x40>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004acd 	.word	0x08004acd
 8004ab0:	08004b35 	.word	0x08004b35
 8004ab4:	08004b49 	.word	0x08004b49
 8004ab8:	08004b93 	.word	0x08004b93
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004acd 	.word	0x08004acd
 8004ac4:	08004b35 	.word	0x08004b35
 8004ac8:	08004b49 	.word	0x08004b49
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	18d1      	adds	r1, r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	69f8      	ldr	r0, [r7, #28]
 8004aec:	f7ff ff7a 	bl	80049e4 <prvInsertTimerInActiveList>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	69f8      	ldr	r0, [r7, #28]
 8004b12:	f7ff fe71 	bl	80047f8 <prvReloadTimer>
 8004b16:	e008      	b.n	8004b2a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	69f8      	ldr	r0, [r7, #28]
 8004b30:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b32:	e044      	b.n	8004bbe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004b46:	e03a      	b.n	8004bbe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	617b      	str	r3, [r7, #20]
    }
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	18d1      	adds	r1, r2, r3
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	69f8      	ldr	r0, [r7, #28]
 8004b8c:	f7ff ff2a 	bl	80049e4 <prvInsertTimerInActiveList>
                        break;
 8004b90:	e015      	b.n	8004bbe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004ba0:	69f8      	ldr	r0, [r7, #28]
 8004ba2:	f000 fbab 	bl	80052fc <vPortFree>
 8004ba6:	e00a      	b.n	8004bbe <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004bba:	e000      	b.n	8004bbe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004bbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <prvProcessReceivedCommands+0x178>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f107 0108 	add.w	r1, r7, #8
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe f9dd 	bl	8002f88 <xQueueReceive>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f af4d 	bne.w	8004a70 <prvProcessReceivedCommands+0x8>
        }
    }
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200002ec 	.word	0x200002ec

08004be4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bea:	e009      	b.n	8004c00 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <prvSwitchTimerLists+0x44>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfa:	6838      	ldr	r0, [r7, #0]
 8004bfc:	f7ff fe1e 	bl	800483c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <prvSwitchTimerLists+0x44>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <prvSwitchTimerLists+0x44>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <prvSwitchTimerLists+0x48>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvSwitchTimerLists+0x44>)
 8004c16:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <prvSwitchTimerLists+0x48>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
    }
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200002e4 	.word	0x200002e4
 8004c2c:	200002e8 	.word	0x200002e8

08004c30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c34:	f000 f960 	bl	8004ef8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <prvCheckForValidListAndQueue+0x54>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11d      	bne.n	8004c7c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c40:	4811      	ldr	r0, [pc, #68]	; (8004c88 <prvCheckForValidListAndQueue+0x58>)
 8004c42:	f7fd ffea 	bl	8002c1a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c46:	4811      	ldr	r0, [pc, #68]	; (8004c8c <prvCheckForValidListAndQueue+0x5c>)
 8004c48:	f7fd ffe7 	bl	8002c1a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <prvCheckForValidListAndQueue+0x60>)
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <prvCheckForValidListAndQueue+0x58>)
 8004c50:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <prvCheckForValidListAndQueue+0x64>)
 8004c54:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <prvCheckForValidListAndQueue+0x5c>)
 8004c56:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c58:	2200      	movs	r2, #0
 8004c5a:	210c      	movs	r1, #12
 8004c5c:	200a      	movs	r0, #10
 8004c5e:	f7fe f921 	bl	8002ea4 <xQueueGenericCreate>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <prvCheckForValidListAndQueue+0x54>)
 8004c66:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <prvCheckForValidListAndQueue+0x54>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <prvCheckForValidListAndQueue+0x54>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4908      	ldr	r1, [pc, #32]	; (8004c98 <prvCheckForValidListAndQueue+0x68>)
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe faf4 	bl	8003264 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c7c:	f000 f96c 	bl	8004f58 <vPortExitCritical>
    }
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200002ec 	.word	0x200002ec
 8004c88:	200002bc 	.word	0x200002bc
 8004c8c:	200002d0 	.word	0x200002d0
 8004c90:	200002e4 	.word	0x200002e4
 8004c94:	200002e8 	.word	0x200002e8
 8004c98:	08005650 	.word	0x08005650

08004c9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b04      	subs	r3, #4
 8004cac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b04      	subs	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <pxPortInitialiseStack+0x64>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b14      	subs	r3, #20
 8004cd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f06f 0202 	mvn.w	r2, #2
 8004cea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3b20      	subs	r3, #32
 8004cf0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	08004d05 	.word	0x08004d05

08004d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvTaskExitError+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d00a      	beq.n	8004d2e <prvTaskExitError+0x2a>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvTaskExitError+0x28>
        __asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
    }
 8004d40:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d42:	bf00      	nop
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0fc      	beq.n	8004d44 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000018 	.word	0x20000018
 8004d5c:	00000000 	.word	0x00000000

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	200001b8 	.word	0x200001b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <prvPortStartFirstTask+0x24>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8814 	msr	CONTROL, r0
 8004d9a:	b662      	cpsie	i
 8004d9c:	b661      	cpsie	f
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	df00      	svc	0
 8004da8:	bf00      	nop
 8004daa:	0000      	.short	0x0000
 8004dac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop

08004db4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dba:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <xPortStartScheduler+0x120>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a46      	ldr	r2, [pc, #280]	; (8004ed8 <xPortStartScheduler+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10a      	bne.n	8004dda <xPortStartScheduler+0x26>
        __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	613b      	str	r3, [r7, #16]
    }
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dda:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <xPortStartScheduler+0x120>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <xPortStartScheduler+0x128>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10a      	bne.n	8004dfa <xPortStartScheduler+0x46>
        __asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
    }
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dfa:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <xPortStartScheduler+0x12c>)
 8004dfc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	22ff      	movs	r2, #255	; 0xff
 8004e0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <xPortStartScheduler+0x130>)
 8004e20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e28:	e009      	b.n	8004e3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d0ef      	beq.n	8004e2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e4a:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1c3 0307 	rsb	r3, r3, #7
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00a      	beq.n	8004e6c <xPortStartScheduler+0xb8>
        __asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60bb      	str	r3, [r7, #8]
    }
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <xPortStartScheduler+0x134>)
 8004e80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <xPortStartScheduler+0x138>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <xPortStartScheduler+0x138>)
 8004e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <xPortStartScheduler+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <xPortStartScheduler+0x138>)
 8004e9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ea2:	f000 f8db 	bl	800505c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <xPortStartScheduler+0x13c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004eac:	f000 f8fa 	bl	80050a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <xPortStartScheduler+0x140>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <xPortStartScheduler+0x140>)
 8004eb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004eba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004ebc:	f7ff ff64 	bl	8004d88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ec0:	f7fe ff18 	bl	8003cf4 <vTaskSwitchContext>
    prvTaskExitError();
 8004ec4:	f7ff ff1e 	bl	8004d04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed00 	.word	0xe000ed00
 8004ed8:	410fc271 	.word	0x410fc271
 8004edc:	410fc270 	.word	0x410fc270
 8004ee0:	e000e400 	.word	0xe000e400
 8004ee4:	200002f8 	.word	0x200002f8
 8004ee8:	200002fc 	.word	0x200002fc
 8004eec:	e000ed20 	.word	0xe000ed20
 8004ef0:	20000018 	.word	0x20000018
 8004ef4:	e000ef34 	.word	0xe000ef34

08004ef8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
        __asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
    }
 8004f10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <vPortEnterCritical+0x58>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <vPortEnterCritical+0x58>)
 8004f1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <vPortEnterCritical+0x58>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10f      	bne.n	8004f44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <vPortEnterCritical+0x5c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <vPortEnterCritical+0x4c>
        __asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	603b      	str	r3, [r7, #0]
    }
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <vPortEnterCritical+0x4a>
    }
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000018 	.word	0x20000018
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <vPortExitCritical+0x50>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <vPortExitCritical+0x24>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	607b      	str	r3, [r7, #4]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <vPortExitCritical+0x50>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <vPortExitCritical+0x50>)
 8004f84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <vPortExitCritical+0x50>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d105      	bne.n	8004f9a <vPortExitCritical+0x42>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f383 8811 	msr	BASEPRI, r3
    }
 8004f98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000018 	.word	0x20000018
 8004fac:	00000000 	.word	0x00000000

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f01e 0f10 	tst.w	lr, #16
 8004fc0:	bf08      	it	eq
 8004fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fd4:	f380 8811 	msr	BASEPRI, r0
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f7fe fe88 	bl	8003cf4 <vTaskSwitchContext>
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f380 8811 	msr	BASEPRI, r0
 8004fec:	bc09      	pop	{r0, r3}
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6808      	ldr	r0, [r1, #0]
 8004ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff6:	f01e 0f10 	tst.w	lr, #16
 8004ffa:	bf08      	it	eq
 8004ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005000:	f380 8809 	msr	PSP, r0
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst>:
 8005010:	200001b8 	.word	0x200001b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
        __asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
    }
 8005030:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005032:	f7fe fd49 	bl	8003ac8 <xTaskIncrementTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <SysTick_Handler+0x40>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f383 8811 	msr	BASEPRI, r3
    }
 800504e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
 80050b2:	0000      	.short	0x0000
 80050b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop

080050bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80050c2:	f3ef 8305 	mrs	r3, IPSR
 80050c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d914      	bls.n	80050f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <vPortValidateInterruptPriority+0x70>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <vPortValidateInterruptPriority+0x74>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	7afa      	ldrb	r2, [r7, #11]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20a      	bcs.n	80050f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
    }
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <vPortValidateInterruptPriority+0x78>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <vPortValidateInterruptPriority+0x7c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d90a      	bls.n	800511e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	603b      	str	r3, [r7, #0]
    }
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <vPortValidateInterruptPriority+0x60>
    }
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e3f0 	.word	0xe000e3f0
 8005130:	200002f8 	.word	0x200002f8
 8005134:	e000ed0c 	.word	0xe000ed0c
 8005138:	200002fc 	.word	0x200002fc

0800513c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005148:	f7fe fba4 	bl	8003894 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800514c:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <pvPortMalloc+0x1a8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005154:	f000 f934 	bl	80053c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005158:	4b63      	ldr	r3, [pc, #396]	; (80052e8 <pvPortMalloc+0x1ac>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 80a7 	bne.w	80052b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02d      	beq.n	80051c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800516c:	2208      	movs	r2, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d227      	bcs.n	80051c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005178:	2208      	movs	r2, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d021      	beq.n	80051ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d214      	bcs.n	80051c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	3308      	adds	r3, #8
 80051a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d010      	beq.n	80051ce <pvPortMalloc+0x92>
        __asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	617b      	str	r3, [r7, #20]
    }
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c6:	e002      	b.n	80051ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e000      	b.n	80051d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06e      	beq.n	80052b4 <pvPortMalloc+0x178>
 80051d6:	4b45      	ldr	r3, [pc, #276]	; (80052ec <pvPortMalloc+0x1b0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d869      	bhi.n	80052b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80051e0:	4b43      	ldr	r3, [pc, #268]	; (80052f0 <pvPortMalloc+0x1b4>)
 80051e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80051e4:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <pvPortMalloc+0x1b4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ea:	e004      	b.n	80051f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d903      	bls.n	8005208 <pvPortMalloc+0xcc>
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f1      	bne.n	80051ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <pvPortMalloc+0x1a8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	429a      	cmp	r2, r3
 8005210:	d050      	beq.n	80052b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2208      	movs	r2, #8
 8005218:	4413      	add	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1ad2      	subs	r2, r2, r3
 800522c:	2308      	movs	r3, #8
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	429a      	cmp	r2, r3
 8005232:	d91f      	bls.n	8005274 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <pvPortMalloc+0x120>
        __asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	613b      	str	r3, [r7, #16]
    }
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800526e:	69b8      	ldr	r0, [r7, #24]
 8005270:	f000 f908 	bl	8005484 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005274:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <pvPortMalloc+0x1b0>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <pvPortMalloc+0x1b0>)
 8005280:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005282:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <pvPortMalloc+0x1b0>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <pvPortMalloc+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d203      	bcs.n	8005296 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <pvPortMalloc+0x1b0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <pvPortMalloc+0x1b8>)
 8005294:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <pvPortMalloc+0x1ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <pvPortMalloc+0x1bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <pvPortMalloc+0x1bc>)
 80052b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80052b4:	f7fe fafc 	bl	80038b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <pvPortMalloc+0x19c>
        __asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60fb      	str	r3, [r7, #12]
    }
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80052d8:	69fb      	ldr	r3, [r7, #28]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20009c8c 	.word	0x20009c8c
 80052e8:	20009ca0 	.word	0x20009ca0
 80052ec:	20009c90 	.word	0x20009c90
 80052f0:	20009c84 	.word	0x20009c84
 80052f4:	20009c94 	.word	0x20009c94
 80052f8:	20009c98 	.word	0x20009c98

080052fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04d      	beq.n	80053aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800530e:	2308      	movs	r3, #8
 8005310:	425b      	negs	r3, r3
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <vPortFree+0xb8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <vPortFree+0x44>
        __asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60fb      	str	r3, [r7, #12]
    }
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <vPortFree+0x62>
        __asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60bb      	str	r3, [r7, #8]
    }
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <vPortFree+0xb8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01e      	beq.n	80053aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11a      	bne.n	80053aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <vPortFree+0xb8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005384:	f7fe fa86 	bl	8003894 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <vPortFree+0xbc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4413      	add	r3, r2
 8005392:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <vPortFree+0xbc>)
 8005394:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005396:	6938      	ldr	r0, [r7, #16]
 8005398:	f000 f874 	bl	8005484 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <vPortFree+0xc0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a06      	ldr	r2, [pc, #24]	; (80053bc <vPortFree+0xc0>)
 80053a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80053a6:	f7fe fa83 	bl	80038b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20009ca0 	.word	0x20009ca0
 80053b8:	20009c90 	.word	0x20009c90
 80053bc:	20009c9c 	.word	0x20009c9c

080053c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053c6:	f649 1384 	movw	r3, #39300	; 0x9984
 80053ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <prvHeapInit+0xac>)
 80053ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3307      	adds	r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0307 	bic.w	r3, r3, #7
 80053e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	4a1f      	ldr	r2, [pc, #124]	; (800546c <prvHeapInit+0xac>)
 80053f0:	4413      	add	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <prvHeapInit+0xb0>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80053fe:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <prvHeapInit+0xb0>)
 8005400:	2200      	movs	r2, #0
 8005402:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4413      	add	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800540c:	2208      	movs	r2, #8
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a15      	ldr	r2, [pc, #84]	; (8005474 <prvHeapInit+0xb4>)
 8005420:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <prvHeapInit+0xb4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <prvHeapInit+0xb4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <prvHeapInit+0xb4>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <prvHeapInit+0xb8>)
 800544e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a09      	ldr	r2, [pc, #36]	; (800547c <prvHeapInit+0xbc>)
 8005456:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <prvHeapInit+0xc0>)
 800545a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800545e:	601a      	str	r2, [r3, #0]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000300 	.word	0x20000300
 8005470:	20009c84 	.word	0x20009c84
 8005474:	20009c8c 	.word	0x20009c8c
 8005478:	20009c94 	.word	0x20009c94
 800547c:	20009c90 	.word	0x20009c90
 8005480:	20009ca0 	.word	0x20009ca0

08005484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <prvInsertBlockIntoFreeList+0xac>)
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e002      	b.n	8005498 <prvInsertBlockIntoFreeList+0x14>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d8f7      	bhi.n	8005492 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d108      	bne.n	80054c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d118      	bne.n	800550c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <prvInsertBlockIntoFreeList+0xb0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d00d      	beq.n	8005502 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e008      	b.n	8005514 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e003      	b.n	8005514 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	d002      	beq.n	8005522 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20009c84 	.word	0x20009c84
 8005534:	20009c8c 	.word	0x20009c8c

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4d0d      	ldr	r5, [pc, #52]	; (8005570 <__libc_init_array+0x38>)
 800553c:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	2600      	movs	r6, #0
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	4d0b      	ldr	r5, [pc, #44]	; (8005578 <__libc_init_array+0x40>)
 800554a:	4c0c      	ldr	r4, [pc, #48]	; (800557c <__libc_init_array+0x44>)
 800554c:	f000 f82e 	bl	80055ac <_init>
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	2600      	movs	r6, #0
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	f855 3b04 	ldr.w	r3, [r5], #4
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	08022bac 	.word	0x08022bac
 8005574:	08022bac 	.word	0x08022bac
 8005578:	08022bac 	.word	0x08022bac
 800557c:	08022bb0 	.word	0x08022bb0

08005580 <memcpy>:
 8005580:	440a      	add	r2, r1
 8005582:	4291      	cmp	r1, r2
 8005584:	f100 33ff 	add.w	r3, r0, #4294967295
 8005588:	d100      	bne.n	800558c <memcpy+0xc>
 800558a:	4770      	bx	lr
 800558c:	b510      	push	{r4, lr}
 800558e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005596:	4291      	cmp	r1, r2
 8005598:	d1f9      	bne.n	800558e <memcpy+0xe>
 800559a:	bd10      	pop	{r4, pc}

0800559c <memset>:
 800559c:	4402      	add	r2, r0
 800559e:	4603      	mov	r3, r0
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d100      	bne.n	80055a6 <memset+0xa>
 80055a4:	4770      	bx	lr
 80055a6:	f803 1b01 	strb.w	r1, [r3], #1
 80055aa:	e7f9      	b.n	80055a0 <memset+0x4>

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
