
pet_food_dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b7c  08004b7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e54  20000014  08004b98  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e68  08004b98  00022e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001349a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9f  00000000  00000000  000334de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00035f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c71  00000000  00000000  00038088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eca  00000000  00000000  0005acf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b10  00000000  00000000  0006ebc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001486d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  00148724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b1c 	.word	0x08004b1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08004b1c 	.word	0x08004b1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vTaskHeartBeat>:
#include "ili9341.h"

extern SPI_HandleTypeDef hspi1;

void vTaskHeartBeat(void *params)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        HAL_GPIO_TogglePin(HEART_BEAT_LED);
 800051c:	2120      	movs	r1, #32
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <vTaskHeartBeat+0x1c>)
 8000520:	f000 fd5f 	bl	8000fe2 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(DELAY_HEART_BEAT_TASK));
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f002 fdfe 	bl	8003128 <vTaskDelay>
        HAL_GPIO_TogglePin(HEART_BEAT_LED);
 800052c:	e7f6      	b.n	800051c <vTaskHeartBeat+0x8>
 800052e:	bf00      	nop
 8000530:	40020000 	.word	0x40020000

08000534 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800053a:	f000 fa81 	bl	8000a40 <HAL_Init>
    /* Configure the system clock */
    SystemClock_Config();
 800053e:	f000 f819 	bl	8000574 <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000542:	f000 f8af 	bl	80006a4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000546:	f000 f883 	bl	8000650 <MX_USART2_UART_Init>
    /* Create tasks */
    xTaskCreate(vTaskHeartBeat, "task-heart-beat", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800054a:	2300      	movs	r3, #0
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2282      	movs	r2, #130	; 0x82
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <main+0x38>)
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <main+0x3c>)
 800055a:	f002 fc69 	bl	8002e30 <xTaskCreate>
    vTaskStartScheduler();
 800055e:	f002 fe17 	bl	8003190 <vTaskStartScheduler>
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	08004b34 	.word	0x08004b34
 8000570:	08000515 	.word	0x08000515

08000574 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fac2 	bl	8004b0c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <SystemClock_Config+0xd4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a29      	ldr	r2, [pc, #164]	; (8000648 <SystemClock_Config+0xd4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xd4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <SystemClock_Config+0xd8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <SystemClock_Config+0xd8>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f884 	bl	8001710 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9e>
    {
      Error_Handler();
 800060e:	f000 f8c9 	bl	80007a4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;   
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fcf2 	bl	8001018 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xca>
    {
      Error_Handler();
 800063a:	f000 f8b3 	bl	80007a4 <Error_Handler>
    }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f001 fd8e 	bl	80021a8 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
    {
      Error_Handler();
 8000692:	f000 f887 	bl	80007a4 <Error_Handler>
    }
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000030 	.word	0x20000030
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0}; 
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);  
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0xd4>)
 8000730:	f000 fc3e 	bl	8000fb0 <HAL_GPIO_WritePin>
    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8000734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);  
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_GPIO_Init+0xd8>)
 800074c:	f000 fa9c 	bl	8000c88 <HAL_GPIO_Init>
    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0xd4>)
 8000768:	f000 fa8e 	bl	8000c88 <HAL_GPIO_Init>
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020800 	.word	0x40020800

08000780 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 f977 	bl	8000a84 <HAL_IncTick>
  }
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40001000 	.word	0x40001000

080007a4 <Error_Handler>:

void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
    __disable_irq();
    while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_UART_MspInit+0x84>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d12b      	bne.n	800087a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_UART_MspInit+0x88>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085a:	230c      	movs	r3, #12
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086a:	2307      	movs	r3, #7
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_UART_MspInit+0x8c>)
 8000876:	f000 fa07 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40004400 	.word	0x40004400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000

08000890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08e      	sub	sp, #56	; 0x38
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b33      	ldr	r3, [pc, #204]	; (8000974 <HAL_InitTick+0xe4>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a32      	ldr	r2, [pc, #200]	; (8000974 <HAL_InitTick+0xe4>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <HAL_InitTick+0xe4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fcc0 	bl	800124c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d103      	bne.n	80008de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d6:	f000 fc91 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
 80008da:	6378      	str	r0, [r7, #52]	; 0x34
 80008dc:	e004      	b.n	80008e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008de:	f000 fc8d 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
 80008e2:	4603      	mov	r3, r0
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <HAL_InitTick+0xe8>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0c9b      	lsrs	r3, r3, #18
 80008f2:	3b01      	subs	r3, #1
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <HAL_InitTick+0xec>)
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <HAL_InitTick+0xf0>)
 80008fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_InitTick+0xec>)
 80008fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000902:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <HAL_InitTick+0xec>)
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_InitTick+0xec>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_InitTick+0xec>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_InitTick+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <HAL_InitTick+0xec>)
 800091e:	f001 f995 	bl	8001c4c <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092c:	2b00      	cmp	r3, #0
 800092e:	d11b      	bne.n	8000968 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <HAL_InitTick+0xec>)
 8000932:	f001 f9e5 	bl	8001d00 <HAL_TIM_Base_Start_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800093c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000940:	2b00      	cmp	r3, #0
 8000942:	d111      	bne.n	8000968 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000944:	2036      	movs	r0, #54	; 0x36
 8000946:	f000 f991 	bl	8000c6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d808      	bhi.n	8000962 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2036      	movs	r0, #54	; 0x36
 8000956:	f000 f96d 	bl	8000c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_InitTick+0xf4>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	e002      	b.n	8000968 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800096c:	4618      	mov	r0, r3
 800096e:	3738      	adds	r7, #56	; 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	431bde83 	.word	0x431bde83
 800097c:	20000074 	.word	0x20000074
 8000980:	40001000 	.word	0x40001000
 8000984:	20000004 	.word	0x20000004

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <TIM6_DAC_IRQHandler+0x10>)
 80009ba:	f001 fa11 	bl	8001de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000074 	.word	0x20000074

080009c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009f2:	490e      	ldr	r1, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a08:	4c0b      	ldr	r4, [pc, #44]	; (8000a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a16:	f7ff ffd7 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f004 f845 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1e:	f7ff fd89 	bl	8000534 <main>
  bx  lr    
 8000a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a30:	08004b84 	.word	0x08004b84
  ldr r2, =_sbss
 8000a34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a38:	20012e68 	.word	0x20012e68

08000a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_Init+0x40>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_Init+0x40>)
 8000a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x40>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f8d8 	bl	8000c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff ff0e 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fe9c 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023c00 	.word	0x40023c00

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000bc 	.word	0x200000bc

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200000bc 	.word	0x200000bc

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff4c 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c46:	f7ff ff61 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffb1 	bl	8000bb8 <NVIC_EncodePriority>
 8000c56:	4602      	mov	r2, r0
 8000c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff80 	bl	8000b64 <__NVIC_SetPriority>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff54 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e165      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8154 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d005      	beq.n	8000cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d017      	beq.n	8000d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d123      	bne.n	8000dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0203 	and.w	r2, r3, #3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80ae 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a5c      	ldr	r2, [pc, #368]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e2a:	4a58      	ldr	r2, [pc, #352]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <HAL_GPIO_Init+0x308>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_GPIO_Init+0x30c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4d      	ldr	r2, [pc, #308]	; (8000f98 <HAL_GPIO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x20e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	; (8000fa0 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x20a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x206>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x202>
 8000e86:	2306      	movs	r3, #6
 8000e88:	e00c      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00a      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e008      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x21c>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f10:	4a26      	ldr	r2, [pc, #152]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f ae96 	bls.w	8000ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	041a      	lsls	r2, r3, #16
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	400b      	ands	r3, r1
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0cc      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d90c      	bls.n	8001054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0b8      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800106c:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001084:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800108e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001090:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	494d      	ldr	r1, [pc, #308]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d044      	beq.n	8001138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d107      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d119      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e07f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d003      	beq.n	80010d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d109      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e06f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e067      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f023 0203 	bic.w	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4934      	ldr	r1, [pc, #208]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	4313      	orrs	r3, r2
 8001106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001108:	f7ff fcd0 	bl	8000aac <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	e00a      	b.n	8001126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001110:	f7ff fccc 	bl	8000aac <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f241 3288 	movw	r2, #5000	; 0x1388
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e04f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 020c 	and.w	r2, r3, #12
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	429a      	cmp	r2, r3
 8001136:	d1eb      	bne.n	8001110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d20c      	bcs.n	8001160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e032      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4916      	ldr	r1, [pc, #88]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	490e      	ldr	r1, [pc, #56]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800119e:	f000 f887 	bl	80012b0 <HAL_RCC_GetSysClockFreq>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	490a      	ldr	r1, [pc, #40]	; (80011d8 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	5ccb      	ldrb	r3, [r1, r3]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_RCC_ClockConfig+0x1c8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fb66 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	08004b5c 	.word	0x08004b5c
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000

080011fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001200:	f7ff fff0 	bl	80011e4 <HAL_RCC_GetHCLKFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	0a9b      	lsrs	r3, r3, #10
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	4903      	ldr	r1, [pc, #12]	; (8001220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	08004b6c 	.word	0x08004b6c

08001224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001228:	f7ff ffdc 	bl	80011e4 <HAL_RCC_GetHCLKFreq>
 800122c:	4602      	mov	r2, r0
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0b5b      	lsrs	r3, r3, #13
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	4903      	ldr	r1, [pc, #12]	; (8001248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	08004b6c 	.word	0x08004b6c

0800124c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	220f      	movs	r2, #15
 800125a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_GetClockConfig+0x5c>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_RCC_GetClockConfig+0x5c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_RCC_GetClockConfig+0x60>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 020f 	and.w	r2, r3, #15
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012b4:	b0ae      	sub	sp, #184	; 0xb8
 80012b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d6:	4bcb      	ldr	r3, [pc, #812]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	f200 8206 	bhi.w	80016f0 <HAL_RCC_GetSysClockFreq+0x440>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	08001321 	.word	0x08001321
 80012f0:	080016f1 	.word	0x080016f1
 80012f4:	080016f1 	.word	0x080016f1
 80012f8:	080016f1 	.word	0x080016f1
 80012fc:	08001329 	.word	0x08001329
 8001300:	080016f1 	.word	0x080016f1
 8001304:	080016f1 	.word	0x080016f1
 8001308:	080016f1 	.word	0x080016f1
 800130c:	08001331 	.word	0x08001331
 8001310:	080016f1 	.word	0x080016f1
 8001314:	080016f1 	.word	0x080016f1
 8001318:	080016f1 	.word	0x080016f1
 800131c:	08001521 	.word	0x08001521
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4bb9      	ldr	r3, [pc, #740]	; (8001608 <HAL_RCC_GetSysClockFreq+0x358>)
 8001322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001326:	e1e7      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001328:	4bb8      	ldr	r3, [pc, #736]	; (800160c <HAL_RCC_GetSysClockFreq+0x35c>)
 800132a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800132e:	e1e3      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001330:	4bb4      	ldr	r3, [pc, #720]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800133c:	4bb1      	ldr	r3, [pc, #708]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d071      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001348:	4bae      	ldr	r3, [pc, #696]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	099b      	lsrs	r3, r3, #6
 800134e:	2200      	movs	r2, #0
 8001350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001354:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800135c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800136a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800136e:	4622      	mov	r2, r4
 8001370:	462b      	mov	r3, r5
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	f04f 0100 	mov.w	r1, #0
 800137a:	0159      	lsls	r1, r3, #5
 800137c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001380:	0150      	lsls	r0, r2, #5
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4621      	mov	r1, r4
 8001388:	1a51      	subs	r1, r2, r1
 800138a:	6439      	str	r1, [r7, #64]	; 0x40
 800138c:	4629      	mov	r1, r5
 800138e:	eb63 0301 	sbc.w	r3, r3, r1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80013a0:	4649      	mov	r1, r9
 80013a2:	018b      	lsls	r3, r1, #6
 80013a4:	4641      	mov	r1, r8
 80013a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013aa:	4641      	mov	r1, r8
 80013ac:	018a      	lsls	r2, r1, #6
 80013ae:	4641      	mov	r1, r8
 80013b0:	1a51      	subs	r1, r2, r1
 80013b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80013b4:	4649      	mov	r1, r9
 80013b6:	eb63 0301 	sbc.w	r3, r3, r1
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80013c8:	4649      	mov	r1, r9
 80013ca:	00cb      	lsls	r3, r1, #3
 80013cc:	4641      	mov	r1, r8
 80013ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013d2:	4641      	mov	r1, r8
 80013d4:	00ca      	lsls	r2, r1, #3
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	4622      	mov	r2, r4
 80013de:	189b      	adds	r3, r3, r2
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
 80013e2:	462b      	mov	r3, r5
 80013e4:	460a      	mov	r2, r1
 80013e6:	eb42 0303 	adc.w	r3, r2, r3
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013f8:	4629      	mov	r1, r5
 80013fa:	024b      	lsls	r3, r1, #9
 80013fc:	4621      	mov	r1, r4
 80013fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001402:	4621      	mov	r1, r4
 8001404:	024a      	lsls	r2, r1, #9
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800140e:	2200      	movs	r2, #0
 8001410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001418:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800141c:	f7fe fef8 	bl	8000210 <__aeabi_uldivmod>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4613      	mov	r3, r2
 8001426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800142a:	e067      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142c:	4b75      	ldr	r3, [pc, #468]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	099b      	lsrs	r3, r3, #6
 8001432:	2200      	movs	r2, #0
 8001434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001438:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800143c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001444:	67bb      	str	r3, [r7, #120]	; 0x78
 8001446:	2300      	movs	r3, #0
 8001448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800144a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800144e:	4622      	mov	r2, r4
 8001450:	462b      	mov	r3, r5
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	0159      	lsls	r1, r3, #5
 800145c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001460:	0150      	lsls	r0, r2, #5
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4621      	mov	r1, r4
 8001468:	1a51      	subs	r1, r2, r1
 800146a:	62b9      	str	r1, [r7, #40]	; 0x28
 800146c:	4629      	mov	r1, r5
 800146e:	eb63 0301 	sbc.w	r3, r3, r1
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001480:	4649      	mov	r1, r9
 8001482:	018b      	lsls	r3, r1, #6
 8001484:	4641      	mov	r1, r8
 8001486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800148a:	4641      	mov	r1, r8
 800148c:	018a      	lsls	r2, r1, #6
 800148e:	4641      	mov	r1, r8
 8001490:	ebb2 0a01 	subs.w	sl, r2, r1
 8001494:	4649      	mov	r1, r9
 8001496:	eb63 0b01 	sbc.w	fp, r3, r1
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014ae:	4692      	mov	sl, r2
 80014b0:	469b      	mov	fp, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	eb1a 0303 	adds.w	r3, sl, r3
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	462b      	mov	r3, r5
 80014bc:	eb4b 0303 	adc.w	r3, fp, r3
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014ce:	4629      	mov	r1, r5
 80014d0:	028b      	lsls	r3, r1, #10
 80014d2:	4621      	mov	r1, r4
 80014d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014d8:	4621      	mov	r1, r4
 80014da:	028a      	lsls	r2, r1, #10
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e4:	2200      	movs	r2, #0
 80014e6:	673b      	str	r3, [r7, #112]	; 0x70
 80014e8:	677a      	str	r2, [r7, #116]	; 0x74
 80014ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014ee:	f7fe fe8f 	bl	8000210 <__aeabi_uldivmod>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4613      	mov	r3, r2
 80014f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014fc:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800150e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800151e:	e0eb      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d06b      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_RCC_GetSysClockFreq+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	2200      	movs	r2, #0
 8001540:	66bb      	str	r3, [r7, #104]	; 0x68
 8001542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
 800154c:	2300      	movs	r3, #0
 800154e:	667b      	str	r3, [r7, #100]	; 0x64
 8001550:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001554:	4622      	mov	r2, r4
 8001556:	462b      	mov	r3, r5
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	0159      	lsls	r1, r3, #5
 8001562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001566:	0150      	lsls	r0, r2, #5
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4621      	mov	r1, r4
 800156e:	1a51      	subs	r1, r2, r1
 8001570:	61b9      	str	r1, [r7, #24]
 8001572:	4629      	mov	r1, r5
 8001574:	eb63 0301 	sbc.w	r3, r3, r1
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001586:	4659      	mov	r1, fp
 8001588:	018b      	lsls	r3, r1, #6
 800158a:	4651      	mov	r1, sl
 800158c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001590:	4651      	mov	r1, sl
 8001592:	018a      	lsls	r2, r1, #6
 8001594:	4651      	mov	r1, sl
 8001596:	ebb2 0801 	subs.w	r8, r2, r1
 800159a:	4659      	mov	r1, fp
 800159c:	eb63 0901 	sbc.w	r9, r3, r1
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015b4:	4690      	mov	r8, r2
 80015b6:	4699      	mov	r9, r3
 80015b8:	4623      	mov	r3, r4
 80015ba:	eb18 0303 	adds.w	r3, r8, r3
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	462b      	mov	r3, r5
 80015c2:	eb49 0303 	adc.w	r3, r9, r3
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015d4:	4629      	mov	r1, r5
 80015d6:	024b      	lsls	r3, r1, #9
 80015d8:	4621      	mov	r1, r4
 80015da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015de:	4621      	mov	r1, r4
 80015e0:	024a      	lsls	r2, r1, #9
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ea:	2200      	movs	r2, #0
 80015ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80015ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015f4:	f7fe fe0c 	bl	8000210 <__aeabi_uldivmod>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4613      	mov	r3, r2
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001602:	e065      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x420>
 8001604:	40023800 	.word	0x40023800
 8001608:	00f42400 	.word	0x00f42400
 800160c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_GetSysClockFreq+0x458>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	2200      	movs	r2, #0
 8001618:	4618      	mov	r0, r3
 800161a:	4611      	mov	r1, r2
 800161c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001620:	653b      	str	r3, [r7, #80]	; 0x50
 8001622:	2300      	movs	r3, #0
 8001624:	657b      	str	r3, [r7, #84]	; 0x54
 8001626:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800162a:	4642      	mov	r2, r8
 800162c:	464b      	mov	r3, r9
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0159      	lsls	r1, r3, #5
 8001638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800163c:	0150      	lsls	r0, r2, #5
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4641      	mov	r1, r8
 8001644:	1a51      	subs	r1, r2, r1
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	4649      	mov	r1, r9
 800164a:	eb63 0301 	sbc.w	r3, r3, r1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800165c:	4659      	mov	r1, fp
 800165e:	018b      	lsls	r3, r1, #6
 8001660:	4651      	mov	r1, sl
 8001662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001666:	4651      	mov	r1, sl
 8001668:	018a      	lsls	r2, r1, #6
 800166a:	4651      	mov	r1, sl
 800166c:	1a54      	subs	r4, r2, r1
 800166e:	4659      	mov	r1, fp
 8001670:	eb63 0501 	sbc.w	r5, r3, r1
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	00eb      	lsls	r3, r5, #3
 800167e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001682:	00e2      	lsls	r2, r4, #3
 8001684:	4614      	mov	r4, r2
 8001686:	461d      	mov	r5, r3
 8001688:	4643      	mov	r3, r8
 800168a:	18e3      	adds	r3, r4, r3
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	464b      	mov	r3, r9
 8001690:	eb45 0303 	adc.w	r3, r5, r3
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016a2:	4629      	mov	r1, r5
 80016a4:	028b      	lsls	r3, r1, #10
 80016a6:	4621      	mov	r1, r4
 80016a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016ac:	4621      	mov	r1, r4
 80016ae:	028a      	lsls	r2, r1, #10
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b8:	2200      	movs	r2, #0
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80016bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80016be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016c2:	f7fe fda5 	bl	8000210 <__aeabi_uldivmod>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4613      	mov	r3, r2
 80016cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_GetSysClockFreq+0x458>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0f1b      	lsrs	r3, r3, #28
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80016de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ee:	e003      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_GetSysClockFreq+0x45c>)
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	37b8      	adds	r7, #184	; 0xb8
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	00f42400 	.word	0x00f42400

08001710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e28d      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8083 	beq.w	8001836 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001730:	4b94      	ldr	r3, [pc, #592]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d019      	beq.n	8001770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173c:	4b91      	ldr	r3, [pc, #580]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001744:	2b08      	cmp	r3, #8
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001748:	4b8e      	ldr	r3, [pc, #568]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001754:	d00c      	beq.n	8001770 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d112      	bne.n	8001788 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176e:	d10b      	bne.n	8001788 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	4b84      	ldr	r3, [pc, #528]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d05b      	beq.n	8001834 <HAL_RCC_OscConfig+0x124>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d157      	bne.n	8001834 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e25a      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x90>
 8001792:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7b      	ldr	r2, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xcc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xb4>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b73      	ldr	r3, [pc, #460]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a72      	ldr	r2, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xcc>
 80017c4:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6b      	ldr	r2, [pc, #428]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f962 	bl	8000aac <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f95e 	bl	8000aac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e21f      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xdc>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff f94e 	bl	8000aac <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff f94a 	bl	8000aac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e20b      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x104>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06f      	beq.n	8001922 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d017      	beq.n	800187e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184e:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001856:	2b08      	cmp	r3, #8
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x186>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1d3      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8f7 	bl	8000aac <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff f8f3 	bl	8000aac <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1b4      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8d6 	bl	8000aac <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff f8d2 	bl	8000aac <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e193      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x27c>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff f8b6 	bl	8000aac <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff f8b2 	bl	8000aac <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e173      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x234>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x27c>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff f89f 	bl	8000aac <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e00e      	b.n	8001990 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff f89b 	bl	8000aac <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d907      	bls.n	8001990 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e15c      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7e      	ldr	r2, [pc, #504]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff f85b 	bl	8000aac <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff f857 	bl	8000aac <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e118      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x31e>
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x358>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x340>
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x358>
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a59      	ldr	r2, [pc, #356]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f81c 	bl	8000aac <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff f818 	bl	8000aac <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0d7      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x368>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f806 	bl	8000aac <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f802 	bl	8000aac <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0c1      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80ad 	beq.w	8001c3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d060      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d145      	bne.n	8001b82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x4b4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7fe ffd6 	bl	8000aac <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7fe ffd2 	bl	8000aac <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e093      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	071b      	lsls	r3, r3, #28
 8001b4e:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x4b4>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7fe ffa7 	bl	8000aac <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe ffa3 	bl	8000aac <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e064      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x452>
 8001b80:	e05c      	b.n	8001c3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x4b4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7fe ff90 	bl	8000aac <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe ff8c 	bl	8000aac <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04d      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x480>
 8001bae:	e045      	b.n	8001c3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e040      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_OscConfig+0x538>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d030      	beq.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d129      	bne.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d122      	bne.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d119      	bne.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f839 	bl	8001cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 f9d8 	bl	8002040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d001      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e04e      	b.n	8001db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d01d      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d111      	bne.n	8001da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d010      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	e007      	b.n	8001db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40010400 	.word	0x40010400
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40001800 	.word	0x40001800

08001de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0202 	mvn.w	r2, #2
 8001e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8ee 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8e0 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8f1 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0204 	mvn.w	r2, #4
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8c4 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8b6 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8c7 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0208 	mvn.w	r2, #8
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f89a 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f88c 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f89d 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0210 	mvn.w	r2, #16
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f870 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f862 	bl	8001ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f873 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fc0e 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f902 	bl	8002194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f838 	bl	800202c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0220 	mvn.w	r2, #32
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8cc 	bl	8002180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d00f      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <TIM_Base_SetConfig+0x118>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <TIM_Base_SetConfig+0x11c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <TIM_Base_SetConfig+0x120>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <TIM_Base_SetConfig+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d027      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <TIM_Base_SetConfig+0x118>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d023      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_Base_SetConfig+0x11c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <TIM_Base_SetConfig+0x120>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0x124>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a28      	ldr	r2, [pc, #160]	; (8002168 <TIM_Base_SetConfig+0x128>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <TIM_Base_SetConfig+0x12c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <TIM_Base_SetConfig+0x130>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <TIM_Base_SetConfig+0x134>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <TIM_Base_SetConfig+0x138>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <TIM_Base_SetConfig+0x13c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <TIM_Base_SetConfig+0x114>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <TIM_Base_SetConfig+0xf8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <TIM_Base_SetConfig+0x124>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	615a      	str	r2, [r3, #20]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40010400 	.word	0x40010400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	40001800 	.word	0x40001800
 8002178:	40001c00 	.word	0x40001c00
 800217c:	40002000 	.word	0x40002000

08002180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e03f      	b.n	800223a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fb16 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f829 	bl	8002244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b0c0      	sub	sp, #256	; 0x100
 800224a:	af00      	add	r7, sp, #0
 800224c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	ea40 0301 	orr.w	r3, r0, r1
 800226c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	431a      	orrs	r2, r3
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	431a      	orrs	r2, r3
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800229c:	f021 010c 	bic.w	r1, r1, #12
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022aa:	430b      	orrs	r3, r1
 80022ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022be:	6999      	ldr	r1, [r3, #24]
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	ea40 0301 	orr.w	r3, r0, r1
 80022ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b8f      	ldr	r3, [pc, #572]	; (8002510 <UART_SetConfig+0x2cc>)
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d005      	beq.n	80022e4 <UART_SetConfig+0xa0>
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <UART_SetConfig+0x2d0>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d104      	bne.n	80022ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022e4:	f7fe ff9e 	bl	8001224 <HAL_RCC_GetPCLK2Freq>
 80022e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022ec:	e003      	b.n	80022f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ee:	f7fe ff85 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
 80022f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002300:	f040 810c 	bne.w	800251c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002308:	2200      	movs	r2, #0
 800230a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800230e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002316:	4622      	mov	r2, r4
 8002318:	462b      	mov	r3, r5
 800231a:	1891      	adds	r1, r2, r2
 800231c:	65b9      	str	r1, [r7, #88]	; 0x58
 800231e:	415b      	adcs	r3, r3
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002326:	4621      	mov	r1, r4
 8002328:	eb12 0801 	adds.w	r8, r2, r1
 800232c:	4629      	mov	r1, r5
 800232e:	eb43 0901 	adc.w	r9, r3, r1
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800233e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002346:	4690      	mov	r8, r2
 8002348:	4699      	mov	r9, r3
 800234a:	4623      	mov	r3, r4
 800234c:	eb18 0303 	adds.w	r3, r8, r3
 8002350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002354:	462b      	mov	r3, r5
 8002356:	eb49 0303 	adc.w	r3, r9, r3
 800235a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800236a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800236e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002372:	460b      	mov	r3, r1
 8002374:	18db      	adds	r3, r3, r3
 8002376:	653b      	str	r3, [r7, #80]	; 0x50
 8002378:	4613      	mov	r3, r2
 800237a:	eb42 0303 	adc.w	r3, r2, r3
 800237e:	657b      	str	r3, [r7, #84]	; 0x54
 8002380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002388:	f7fd ff42 	bl	8000210 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4b61      	ldr	r3, [pc, #388]	; (8002518 <UART_SetConfig+0x2d4>)
 8002392:	fba3 2302 	umull	r2, r3, r3, r2
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	011c      	lsls	r4, r3, #4
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80023b4:	415b      	adcs	r3, r3
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023bc:	4641      	mov	r1, r8
 80023be:	eb12 0a01 	adds.w	sl, r2, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	eb43 0b01 	adc.w	fp, r3, r1
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023dc:	4692      	mov	sl, r2
 80023de:	469b      	mov	fp, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	eb1a 0303 	adds.w	r3, sl, r3
 80023e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023ea:	464b      	mov	r3, r9
 80023ec:	eb4b 0303 	adc.w	r3, fp, r3
 80023f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002400:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002408:	460b      	mov	r3, r1
 800240a:	18db      	adds	r3, r3, r3
 800240c:	643b      	str	r3, [r7, #64]	; 0x40
 800240e:	4613      	mov	r3, r2
 8002410:	eb42 0303 	adc.w	r3, r2, r3
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
 8002416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800241a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800241e:	f7fd fef7 	bl	8000210 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4611      	mov	r1, r2
 8002428:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <UART_SetConfig+0x2d4>)
 800242a:	fba3 2301 	umull	r2, r3, r3, r1
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2264      	movs	r2, #100	; 0x64
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	1acb      	subs	r3, r1, r3
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <UART_SetConfig+0x2d4>)
 8002440:	fba3 2302 	umull	r2, r3, r3, r2
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800244c:	441c      	add	r4, r3
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002458:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800245c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	63b9      	str	r1, [r7, #56]	; 0x38
 8002468:	415b      	adcs	r3, r3
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002470:	4641      	mov	r1, r8
 8002472:	1851      	adds	r1, r2, r1
 8002474:	6339      	str	r1, [r7, #48]	; 0x30
 8002476:	4649      	mov	r1, r9
 8002478:	414b      	adcs	r3, r1
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002488:	4659      	mov	r1, fp
 800248a:	00cb      	lsls	r3, r1, #3
 800248c:	4651      	mov	r1, sl
 800248e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002492:	4651      	mov	r1, sl
 8002494:	00ca      	lsls	r2, r1, #3
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	4603      	mov	r3, r0
 800249c:	4642      	mov	r2, r8
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024a4:	464b      	mov	r3, r9
 80024a6:	460a      	mov	r2, r1
 80024a8:	eb42 0303 	adc.w	r3, r2, r3
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024c4:	460b      	mov	r3, r1
 80024c6:	18db      	adds	r3, r3, r3
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ca:	4613      	mov	r3, r2
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024da:	f7fd fe99 	bl	8000210 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <UART_SetConfig+0x2d4>)
 80024e4:	fba3 1302 	umull	r1, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	2164      	movs	r1, #100	; 0x64
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3332      	adds	r3, #50	; 0x32
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <UART_SetConfig+0x2d4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	f003 0207 	and.w	r2, r3, #7
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4422      	add	r2, r4
 800250a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800250c:	e105      	b.n	800271a <UART_SetConfig+0x4d6>
 800250e:	bf00      	nop
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400
 8002518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002520:	2200      	movs	r2, #0
 8002522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002526:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800252a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800252e:	4642      	mov	r2, r8
 8002530:	464b      	mov	r3, r9
 8002532:	1891      	adds	r1, r2, r2
 8002534:	6239      	str	r1, [r7, #32]
 8002536:	415b      	adcs	r3, r3
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
 800253a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800253e:	4641      	mov	r1, r8
 8002540:	1854      	adds	r4, r2, r1
 8002542:	4649      	mov	r1, r9
 8002544:	eb43 0501 	adc.w	r5, r3, r1
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	4643      	mov	r3, r8
 800255e:	18e3      	adds	r3, r4, r3
 8002560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002564:	464b      	mov	r3, r9
 8002566:	eb45 0303 	adc.w	r3, r5, r3
 800256a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800257a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800258a:	4629      	mov	r1, r5
 800258c:	008b      	lsls	r3, r1, #2
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002594:	4621      	mov	r1, r4
 8002596:	008a      	lsls	r2, r1, #2
 8002598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800259c:	f7fd fe38 	bl	8000210 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4b60      	ldr	r3, [pc, #384]	; (8002728 <UART_SetConfig+0x4e4>)
 80025a6:	fba3 2302 	umull	r2, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	011c      	lsls	r4, r3, #4
 80025ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	61b9      	str	r1, [r7, #24]
 80025c8:	415b      	adcs	r3, r3
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d0:	4641      	mov	r1, r8
 80025d2:	1851      	adds	r1, r2, r1
 80025d4:	6139      	str	r1, [r7, #16]
 80025d6:	4649      	mov	r1, r9
 80025d8:	414b      	adcs	r3, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e8:	4659      	mov	r1, fp
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4651      	mov	r1, sl
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4642      	mov	r2, r8
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002604:	464b      	mov	r3, r9
 8002606:	460a      	mov	r2, r1
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	67bb      	str	r3, [r7, #120]	; 0x78
 800261a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002628:	4649      	mov	r1, r9
 800262a:	008b      	lsls	r3, r1, #2
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002632:	4641      	mov	r1, r8
 8002634:	008a      	lsls	r2, r1, #2
 8002636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800263a:	f7fd fde9 	bl	8000210 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <UART_SetConfig+0x4e4>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	2164      	movs	r1, #100	; 0x64
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <UART_SetConfig+0x4e4>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002662:	441c      	add	r4, r3
 8002664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002668:	2200      	movs	r2, #0
 800266a:	673b      	str	r3, [r7, #112]	; 0x70
 800266c:	677a      	str	r2, [r7, #116]	; 0x74
 800266e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002672:	4642      	mov	r2, r8
 8002674:	464b      	mov	r3, r9
 8002676:	1891      	adds	r1, r2, r2
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	415b      	adcs	r3, r3
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002682:	4641      	mov	r1, r8
 8002684:	1851      	adds	r1, r2, r1
 8002686:	6039      	str	r1, [r7, #0]
 8002688:	4649      	mov	r1, r9
 800268a:	414b      	adcs	r3, r1
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800269a:	4659      	mov	r1, fp
 800269c:	00cb      	lsls	r3, r1, #3
 800269e:	4651      	mov	r1, sl
 80026a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a4:	4651      	mov	r1, sl
 80026a6:	00ca      	lsls	r2, r1, #3
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	4603      	mov	r3, r0
 80026ae:	4642      	mov	r2, r8
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b4:	464b      	mov	r3, r9
 80026b6:	460a      	mov	r2, r1
 80026b8:	eb42 0303 	adc.w	r3, r2, r3
 80026bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60
 80026c8:	667a      	str	r2, [r7, #100]	; 0x64
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026d6:	4649      	mov	r1, r9
 80026d8:	008b      	lsls	r3, r1, #2
 80026da:	4641      	mov	r1, r8
 80026dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e0:	4641      	mov	r1, r8
 80026e2:	008a      	lsls	r2, r1, #2
 80026e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026e8:	f7fd fd92 	bl	8000210 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <UART_SetConfig+0x4e4>)
 80026f2:	fba3 1302 	umull	r1, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	3332      	adds	r3, #50	; 0x32
 8002704:	4a08      	ldr	r2, [pc, #32]	; (8002728 <UART_SetConfig+0x4e4>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4422      	add	r2, r4
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	bf00      	nop
 800271c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	51eb851f 	.word	0x51eb851f

0800272c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0208 	add.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0208 	add.w	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d103      	bne.n	80027a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3308      	adds	r3, #8
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e002      	b.n	80027b4 <vListInsert+0x2e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d2f6      	bcs.n	80027ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6892      	ldr	r2, [r2, #8]
 800280e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d103      	bne.n	800282c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05d      	beq.n	800293c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002884:	2b00      	cmp	r3, #0
 8002886:	d059      	beq.n	800293c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	2100      	movs	r1, #0
 8002892:	fba3 2302 	umull	r2, r3, r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d000      	beq.n	800289c <xQueueGenericReset+0x50>
 800289a:	2101      	movs	r1, #1
 800289c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d14c      	bne.n	800293c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80028a2:	f001 fe21 	bl	80044e8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	6939      	ldr	r1, [r7, #16]
 80028b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	441a      	add	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2200      	movs	r2, #0
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6939      	ldr	r1, [r7, #16]
 80028d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	441a      	add	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d114      	bne.n	8002922 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01a      	beq.n	8002936 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3310      	adds	r3, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f000 ff8b 	bl	8003820 <xTaskRemoveFromEventList>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <xQueueGenericReset+0x11c>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e009      	b.n	8002936 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3310      	adds	r3, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff00 	bl	800272c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	3324      	adds	r3, #36	; 0x24
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fefb 	bl	800272c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002936:	f001 fe07 	bl	8004548 <vPortExitCritical>
 800293a:	e001      	b.n	8002940 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <xQueueGenericReset+0x110>
        __asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	60bb      	str	r3, [r7, #8]
    }
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800295c:	697b      	ldr	r3, [r7, #20]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02e      	beq.n	80029e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002984:	2100      	movs	r1, #0
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d000      	beq.n	8002994 <xQueueGenericCreate+0x28>
 8002992:	2101      	movs	r1, #1
 8002994:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d123      	bne.n	80029e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80029a6:	d81c      	bhi.n	80029e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fe78 	bl	80046ac <pvPortMalloc>
 80029bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3350      	adds	r3, #80	; 0x50
 80029cc:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f814 	bl	8002a08 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80029e0:	e00d      	b.n	80029fe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericCreate+0x92>
        __asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	613b      	str	r3, [r7, #16]
    }
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029fe:	69fb      	ldr	r3, [r7, #28]
    }
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e002      	b.n	8002a2a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a36:	2101      	movs	r1, #1
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f7ff ff07 	bl	800284c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <xQueueReceive+0x30>
        __asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	623b      	str	r3, [r7, #32]
    }
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <xQueueReceive+0x3e>
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <xQueueReceive+0x42>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueReceive+0x44>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueReceive+0x5e>
        __asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	61fb      	str	r3, [r7, #28]
    }
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aae:	f001 f8c7 	bl	8003c40 <xTaskGetSchedulerState>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <xQueueReceive+0x6e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueReceive+0x72>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueReceive+0x74>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueReceive+0x8e>
        __asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61bb      	str	r3, [r7, #24]
    }
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ade:	f001 fd03 	bl	80044e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01f      	beq.n	8002b2e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af2:	f000 f88d 	bl	8002c10 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00f      	beq.n	8002b26 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	3310      	adds	r3, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fe88 	bl	8003820 <xTaskRemoveFromEventList>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <xQueueReceive+0x1bc>)
 8002b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b26:	f001 fd0f 	bl	8004548 <vPortExitCritical>
                return pdPASS;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e069      	b.n	8002c02 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b34:	f001 fd08 	bl	8004548 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e062      	b.n	8002c02 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff40 	bl	80039cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b50:	f001 fcfa 	bl	8004548 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b54:	f000 fb6e 	bl	8003234 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b58:	f001 fcc6 	bl	80044e8 <vPortEnterCritical>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d103      	bne.n	8002b72 <xQueueReceive+0x122>
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d103      	bne.n	8002b88 <xQueueReceive+0x138>
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b88:	f001 fcde 	bl	8004548 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b8c:	1d3a      	adds	r2, r7, #4
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 ff2f 	bl	80039f8 <xTaskCheckForTimeOut>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d123      	bne.n	8002be8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba2:	f000 f8ad 	bl	8002d00 <prvIsQueueEmpty>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d017      	beq.n	8002bdc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fdc9 	bl	800374c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbc:	f000 f84e 	bl	8002c5c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bc0:	f000 fb46 	bl	8003250 <xTaskResumeAll>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d189      	bne.n	8002ade <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <xQueueReceive+0x1bc>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	e780      	b.n	8002ade <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bde:	f000 f83d 	bl	8002c5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002be2:	f000 fb35 	bl	8003250 <xTaskResumeAll>
 8002be6:	e77a      	b.n	8002ade <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bea:	f000 f837 	bl	8002c5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bee:	f000 fb2f 	bl	8003250 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf4:	f000 f884 	bl	8002d00 <prvIsQueueEmpty>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f43f af6f 	beq.w	8002ade <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	441a      	add	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d303      	bcc.n	8002c44 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f001 ff4e 	bl	8004af0 <memcpy>
    }
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c64:	f001 fc40 	bl	80044e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c70:	e011      	b.n	8002c96 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fdce 	bl	8003820 <xTaskRemoveFromEventList>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c8a:	f000 ff1b 	bl	8003ac4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	dce9      	bgt.n	8002c72 <prvUnlockQueue+0x16>
 8002c9e:	e000      	b.n	8002ca2 <prvUnlockQueue+0x46>
                        break;
 8002ca0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002caa:	f001 fc4d 	bl	8004548 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cae:	f001 fc1b 	bl	80044e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cba:	e011      	b.n	8002ce0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fda9 	bl	8003820 <xTaskRemoveFromEventList>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002cd4:	f000 fef6 	bl	8003ac4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002cd8:	7bbb      	ldrb	r3, [r7, #14]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dce9      	bgt.n	8002cbc <prvUnlockQueue+0x60>
 8002ce8:	e000      	b.n	8002cec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002cea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002cf4:	f001 fc28 	bl	8004548 <vPortExitCritical>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d08:	f001 fbee 	bl	80044e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e001      	b.n	8002d1e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d1e:	f001 fc13 	bl	8004548 <vPortExitCritical>

    return xReturn;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	60fb      	str	r3, [r7, #12]
    }
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d024      	beq.n	8002da6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e01e      	b.n	8002da0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d105      	bne.n	8002d7e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
                    break;
 8002d7c:	e013      	b.n	8002da6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <vQueueAddToRegistry+0x6e>
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d96:	4413      	add	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d9dd      	bls.n	8002d62 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	200000c0 	.word	0x200000c0

08002dc8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002dd8:	f001 fb86 	bl	80044e8 <vPortEnterCritical>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d103      	bne.n	8002df2 <vQueueWaitForMessageRestricted+0x2a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d103      	bne.n	8002e08 <vQueueWaitForMessageRestricted+0x40>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e08:	f001 fb9e 	bl	8004548 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3324      	adds	r3, #36	; 0x24
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fcb9 	bl	8003794 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff1a 	bl	8002c5c <prvUnlockQueue>
    }
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fc31 	bl	80046ac <pvPortMalloc>
 8002e4a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e52:	2058      	movs	r0, #88	; 0x58
 8002e54:	f001 fc2a 	bl	80046ac <pvPortMalloc>
 8002e58:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	e005      	b.n	8002e74 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f001 fcff 	bl	800486c <vPortFree>
 8002e6e:	e001      	b.n	8002e74 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9303      	str	r3, [sp, #12]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	9302      	str	r3, [sp, #8]
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f80e 	bl	8002eb2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e96:	69f8      	ldr	r0, [r7, #28]
 8002e98:	f000 f8b0 	bl	8002ffc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e002      	b.n	8002ea8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b088      	sub	sp, #32
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	21a5      	movs	r1, #165	; 0xa5
 8002ecc:	f001 fe1e 	bl	8004b0c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	3b01      	subs	r3, #1
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f023 0307 	bic.w	r3, r3, #7
 8002ee8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	617b      	str	r3, [r7, #20]
    }
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01f      	beq.n	8002f50 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e012      	b.n	8002f3c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	7819      	ldrb	r1, [r3, #0]
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	3334      	adds	r3, #52	; 0x34
 8002f26:	460a      	mov	r2, r1
 8002f28:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	d9e9      	bls.n	8002f16 <prvInitialiseNewTask+0x64>
 8002f42:	e000      	b.n	8002f46 <prvInitialiseNewTask+0x94>
            {
                break;
 8002f44:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f4e:	e003      	b.n	8002f58 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d90a      	bls.n	8002f74 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	613b      	str	r3, [r7, #16]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d901      	bls.n	8002f7e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fbe9 	bl	800276c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fbe4 	bl	800276c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f1c3 0205 	rsb	r2, r3, #5
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	3350      	adds	r3, #80	; 0x50
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 fda2 	bl	8004b0c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	3354      	adds	r3, #84	; 0x54
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 fd9b 	bl	8004b0c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	69b8      	ldr	r0, [r7, #24]
 8002fdc:	f001 f952 	bl	8004284 <pxPortInitialiseStack>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003004:	f001 fa70 	bl	80044e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <prvAddNewTaskToReadyList+0x110>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	4a3f      	ldr	r2, [pc, #252]	; (800310c <prvAddNewTaskToReadyList+0x110>)
 8003010:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003020:	4b3a      	ldr	r3, [pc, #232]	; (800310c <prvAddNewTaskToReadyList+0x110>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d110      	bne.n	800304a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003028:	f000 fd70 	bl	8003b0c <prvInitialiseTaskLists>
 800302c:	e00d      	b.n	800304a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <prvAddNewTaskToReadyList+0x118>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d802      	bhi.n	800304a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800304a:	4b33      	ldr	r3, [pc, #204]	; (8003118 <prvAddNewTaskToReadyList+0x11c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <prvAddNewTaskToReadyList+0x11c>)
 8003052:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <prvAddNewTaskToReadyList+0x11c>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	2201      	movs	r2, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <prvAddNewTaskToReadyList+0x120>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <prvAddNewTaskToReadyList+0x120>)
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	492b      	ldr	r1, [pc, #172]	; (8003120 <prvAddNewTaskToReadyList+0x124>)
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3304      	adds	r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	3204      	adds	r2, #4
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1d1a      	adds	r2, r3, #4
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <prvAddNewTaskToReadyList+0x124>)
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	615a      	str	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	4918      	ldr	r1, [pc, #96]	; (8003120 <prvAddNewTaskToReadyList+0x124>)
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	4814      	ldr	r0, [pc, #80]	; (8003120 <prvAddNewTaskToReadyList+0x124>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030da:	f001 fa35 	bl	8004548 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <prvAddNewTaskToReadyList+0x118>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <prvAddNewTaskToReadyList+0x114>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <prvAddNewTaskToReadyList+0x128>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200001d8 	.word	0x200001d8
 8003110:	20000100 	.word	0x20000100
 8003114:	200001e4 	.word	0x200001e4
 8003118:	200001f4 	.word	0x200001f4
 800311c:	200001e0 	.word	0x200001e0
 8003120:	20000104 	.word	0x20000104
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <vTaskDelay+0x60>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <vTaskDelay+0x30>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60bb      	str	r3, [r7, #8]
    }
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003158:	f000 f86c 	bl	8003234 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800315c:	2100      	movs	r1, #0
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fd8c 	bl	8003c7c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003164:	f000 f874 	bl	8003250 <xTaskResumeAll>
 8003168:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <vTaskDelay+0x64>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000200 	.word	0x20000200
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <vTaskStartScheduler+0x88>)
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	2282      	movs	r2, #130	; 0x82
 80031a2:	491e      	ldr	r1, [pc, #120]	; (800321c <vTaskStartScheduler+0x8c>)
 80031a4:	481e      	ldr	r0, [pc, #120]	; (8003220 <vTaskStartScheduler+0x90>)
 80031a6:	f7ff fe43 	bl	8002e30 <xTaskCreate>
 80031aa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031b2:	f000 fde3 	bl	8003d7c <xTimerCreateTimerTask>
 80031b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d116      	bne.n	80031ec <vTaskStartScheduler+0x5c>
        __asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60bb      	str	r3, [r7, #8]
    }
 80031d0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <vTaskStartScheduler+0x94>)
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <vTaskStartScheduler+0x98>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <vTaskStartScheduler+0x9c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80031e6:	f001 f8dd 	bl	80043a4 <xPortStartScheduler>
 80031ea:	e00e      	b.n	800320a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d10a      	bne.n	800320a <vTaskStartScheduler+0x7a>
        __asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	607b      	str	r3, [r7, #4]
    }
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <vTaskStartScheduler+0xa0>)
 800320c:	681b      	ldr	r3, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200001fc 	.word	0x200001fc
 800321c:	08004b44 	.word	0x08004b44
 8003220:	08003add 	.word	0x08003add
 8003224:	200001f8 	.word	0x200001f8
 8003228:	200001e4 	.word	0x200001e4
 800322c:	200001dc 	.word	0x200001dc
 8003230:	2000000c 	.word	0x2000000c

08003234 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <vTaskSuspendAll+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a03      	ldr	r2, [pc, #12]	; (800324c <vTaskSuspendAll+0x18>)
 8003240:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000200 	.word	0x20000200

08003250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800325e:	4b71      	ldr	r3, [pc, #452]	; (8003424 <xTaskResumeAll+0x1d4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <xTaskResumeAll+0x2c>
        __asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	607b      	str	r3, [r7, #4]
    }
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800327c:	f001 f934 	bl	80044e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <xTaskResumeAll+0x1d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a67      	ldr	r2, [pc, #412]	; (8003424 <xTaskResumeAll+0x1d4>)
 8003288:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328a:	4b66      	ldr	r3, [pc, #408]	; (8003424 <xTaskResumeAll+0x1d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80c0 	bne.w	8003414 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003294:	4b64      	ldr	r3, [pc, #400]	; (8003428 <xTaskResumeAll+0x1d8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80bb 	beq.w	8003414 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800329e:	e08a      	b.n	80033b6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a0:	4b62      	ldr	r3, [pc, #392]	; (800342c <xTaskResumeAll+0x1dc>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	6a12      	ldr	r2, [r2, #32]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	69d2      	ldr	r2, [r2, #28]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3318      	adds	r3, #24
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d103      	bne.n	80032d6 <xTaskResumeAll+0x86>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2200      	movs	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	68d2      	ldr	r2, [r2, #12]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3304      	adds	r3, #4
 8003308:	429a      	cmp	r2, r3
 800330a:	d103      	bne.n	8003314 <xTaskResumeAll+0xc4>
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	4b40      	ldr	r3, [pc, #256]	; (8003430 <xTaskResumeAll+0x1e0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <xTaskResumeAll+0x1e0>)
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	493e      	ldr	r1, [pc, #248]	; (8003434 <xTaskResumeAll+0x1e4>)
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3304      	adds	r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	3204      	adds	r2, #4
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	1d1a      	adds	r2, r3, #4
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <xTaskResumeAll+0x1e4>)
 800337a:	441a      	add	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	492b      	ldr	r1, [pc, #172]	; (8003434 <xTaskResumeAll+0x1e4>)
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	4827      	ldr	r0, [pc, #156]	; (8003434 <xTaskResumeAll+0x1e4>)
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <xTaskResumeAll+0x1e8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <xTaskResumeAll+0x1ec>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <xTaskResumeAll+0x1dc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f47f af70 	bne.w	80032a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033c6:	f000 fc1f 	bl	8003c08 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <xTaskResumeAll+0x1f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033d6:	f000 f847 	bl	8003468 <xTaskIncrementTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <xTaskResumeAll+0x1ec>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f1      	bne.n	80033d6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <xTaskResumeAll+0x1f0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <xTaskResumeAll+0x1ec>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <xTaskResumeAll+0x1f4>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003414:	f001 f898 	bl	8004548 <vPortExitCritical>

    return xAlreadyYielded;
 8003418:	69bb      	ldr	r3, [r7, #24]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000200 	.word	0x20000200
 8003428:	200001d8 	.word	0x200001d8
 800342c:	20000198 	.word	0x20000198
 8003430:	200001e0 	.word	0x200001e0
 8003434:	20000104 	.word	0x20000104
 8003438:	20000100 	.word	0x20000100
 800343c:	200001ec 	.word	0x200001ec
 8003440:	200001e8 	.word	0x200001e8
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <xTaskGetTickCount+0x1c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003454:	687b      	ldr	r3, [r7, #4]
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	200001dc 	.word	0x200001dc

08003468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003472:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <xTaskIncrementTick+0x200>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80ec 	bne.w	8003654 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800347c:	4b7b      	ldr	r3, [pc, #492]	; (800366c <xTaskIncrementTick+0x204>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003484:	4a79      	ldr	r2, [pc, #484]	; (800366c <xTaskIncrementTick+0x204>)
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d120      	bne.n	80034d2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003490:	4b77      	ldr	r3, [pc, #476]	; (8003670 <xTaskIncrementTick+0x208>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <xTaskIncrementTick+0x48>
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
    }
 80034ac:	bf00      	nop
 80034ae:	e7fe      	b.n	80034ae <xTaskIncrementTick+0x46>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <xTaskIncrementTick+0x208>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <xTaskIncrementTick+0x20c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6d      	ldr	r2, [pc, #436]	; (8003670 <xTaskIncrementTick+0x208>)
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4a6d      	ldr	r2, [pc, #436]	; (8003674 <xTaskIncrementTick+0x20c>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <xTaskIncrementTick+0x210>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <xTaskIncrementTick+0x210>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	f000 fb9b 	bl	8003c08 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <xTaskIncrementTick+0x214>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	429a      	cmp	r2, r3
 80034da:	f0c0 80a6 	bcc.w	800362a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034de:	4b64      	ldr	r3, [pc, #400]	; (8003670 <xTaskIncrementTick+0x208>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e8:	4b64      	ldr	r3, [pc, #400]	; (800367c <xTaskIncrementTick+0x214>)
 80034ea:	f04f 32ff 	mov.w	r2, #4294967295
 80034ee:	601a      	str	r2, [r3, #0]
                    break;
 80034f0:	e09b      	b.n	800362a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f2:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <xTaskIncrementTick+0x208>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003502:	6a3a      	ldr	r2, [r7, #32]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	429a      	cmp	r2, r3
 8003508:	d203      	bcs.n	8003512 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800350a:	4a5c      	ldr	r2, [pc, #368]	; (800367c <xTaskIncrementTick+0x214>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003510:	e08b      	b.n	800362a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	68d2      	ldr	r2, [r2, #12]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	3304      	adds	r3, #4
 8003534:	429a      	cmp	r2, r3
 8003536:	d103      	bne.n	8003540 <xTaskIncrementTick+0xd8>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01e      	beq.n	8003596 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	6a12      	ldr	r2, [r2, #32]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	69d2      	ldr	r2, [r2, #28]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	3318      	adds	r3, #24
 800357a:	429a      	cmp	r2, r3
 800357c:	d103      	bne.n	8003586 <xTaskIncrementTick+0x11e>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6a1a      	ldr	r2, [r3, #32]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2200      	movs	r2, #0
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	2201      	movs	r2, #1
 800359c:	409a      	lsls	r2, r3
 800359e:	4b38      	ldr	r3, [pc, #224]	; (8003680 <xTaskIncrementTick+0x218>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a36      	ldr	r2, [pc, #216]	; (8003680 <xTaskIncrementTick+0x218>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4935      	ldr	r1, [pc, #212]	; (8003684 <xTaskIncrementTick+0x21c>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	3204      	adds	r2, #4
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1d1a      	adds	r2, r3, #4
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <xTaskIncrementTick+0x21c>)
 80035ec:	441a      	add	r2, r3
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	615a      	str	r2, [r3, #20]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4923      	ldr	r1, [pc, #140]	; (8003684 <xTaskIncrementTick+0x21c>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1c59      	adds	r1, r3, #1
 8003606:	481f      	ldr	r0, [pc, #124]	; (8003684 <xTaskIncrementTick+0x21c>)
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4403      	add	r3, r0
 8003612:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <xTaskIncrementTick+0x220>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	429a      	cmp	r2, r3
 8003620:	f4ff af5d 	bcc.w	80034de <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	e759      	b.n	80034de <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800362a:	4b17      	ldr	r3, [pc, #92]	; (8003688 <xTaskIncrementTick+0x220>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4914      	ldr	r1, [pc, #80]	; (8003684 <xTaskIncrementTick+0x21c>)
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d901      	bls.n	8003646 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <xTaskIncrementTick+0x224>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	e004      	b.n	800365e <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <xTaskIncrementTick+0x228>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <xTaskIncrementTick+0x228>)
 800365c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000200 	.word	0x20000200
 800366c:	200001dc 	.word	0x200001dc
 8003670:	20000190 	.word	0x20000190
 8003674:	20000194 	.word	0x20000194
 8003678:	200001f0 	.word	0x200001f0
 800367c:	200001f8 	.word	0x200001f8
 8003680:	200001e0 	.word	0x200001e0
 8003684:	20000104 	.word	0x20000104
 8003688:	20000100 	.word	0x20000100
 800368c:	200001ec 	.word	0x200001ec
 8003690:	200001e8 	.word	0x200001e8

08003694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <vTaskSwitchContext+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <vTaskSwitchContext+0xa8>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80036a8:	e03f      	b.n	800372a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <vTaskSwitchContext+0xa8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <vTaskSwitchContext+0xac>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	f1c3 031f 	rsb	r3, r3, #31
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	491f      	ldr	r1, [pc, #124]	; (8003744 <vTaskSwitchContext+0xb0>)
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
    }
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <vTaskSwitchContext+0x5a>
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <vTaskSwitchContext+0xb0>)
 80036fc:	4413      	add	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3308      	adds	r3, #8
 8003712:	429a      	cmp	r2, r3
 8003714:	d104      	bne.n	8003720 <vTaskSwitchContext+0x8c>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <vTaskSwitchContext+0xb4>)
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000200 	.word	0x20000200
 800373c:	200001ec 	.word	0x200001ec
 8003740:	200001e0 	.word	0x200001e0
 8003744:	20000104 	.word	0x20000104
 8003748:	20000100 	.word	0x20000100

0800374c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	60fb      	str	r3, [r7, #12]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <vTaskPlaceOnEventList+0x44>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3318      	adds	r3, #24
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff f803 	bl	8002786 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003780:	2101      	movs	r1, #1
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f000 fa7a 	bl	8003c7c <prvAddCurrentTaskToDelayedList>
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000100 	.word	0x20000100

08003794 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	613b      	str	r3, [r7, #16]
    }
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <vTaskPlaceOnEventListRestricted+0x88>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	61da      	str	r2, [r3, #28]
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <vTaskPlaceOnEventListRestricted+0x88>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6892      	ldr	r2, [r2, #8]
 80037d2:	621a      	str	r2, [r3, #32]
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <vTaskPlaceOnEventListRestricted+0x88>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	3218      	adds	r2, #24
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <vTaskPlaceOnEventListRestricted+0x88>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f103 0218 	add.w	r2, r3, #24
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <vTaskPlaceOnEventListRestricted+0x88>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f000 fa35 	bl	8003c7c <prvAddCurrentTaskToDelayedList>
    }
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000100 	.word	0x20000100

08003820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003820:	b480      	push	{r7}
 8003822:	b08b      	sub	sp, #44	; 0x2c
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60fb      	str	r3, [r7, #12]
    }
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	6a12      	ldr	r2, [r2, #32]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	69d2      	ldr	r2, [r2, #28]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	3318      	adds	r3, #24
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <xTaskRemoveFromEventList+0x5a>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	6a1a      	ldr	r2, [r3, #32]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2200      	movs	r2, #0
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <xTaskRemoveFromEventList+0x194>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d15e      	bne.n	8003950 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	6a3a      	ldr	r2, [r7, #32]
 800389e:	68d2      	ldr	r2, [r2, #12]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	6a3a      	ldr	r2, [r7, #32]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	3304      	adds	r3, #4
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d103      	bne.n	80038c0 <xTaskRemoveFromEventList+0xa0>
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	2201      	movs	r2, #1
 80038d6:	409a      	lsls	r2, r3
 80038d8:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <xTaskRemoveFromEventList+0x198>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	4a36      	ldr	r2, [pc, #216]	; (80039b8 <xTaskRemoveFromEventList+0x198>)
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e6:	4935      	ldr	r1, [pc, #212]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3304      	adds	r3, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	3204      	adds	r2, #4
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4a25      	ldr	r2, [pc, #148]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 8003926:	441a      	add	r2, r3
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	615a      	str	r2, [r3, #20]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4922      	ldr	r1, [pc, #136]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	481e      	ldr	r0, [pc, #120]	; (80039bc <xTaskRemoveFromEventList+0x19c>)
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4403      	add	r3, r0
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	e01b      	b.n	8003988 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	61da      	str	r2, [r3, #28]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	621a      	str	r2, [r3, #32]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	3218      	adds	r2, #24
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f103 0218 	add.w	r2, r3, #24
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <xTaskRemoveFromEventList+0x1a0>)
 8003986:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <xTaskRemoveFromEventList+0x1a4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	429a      	cmp	r2, r3
 8003994:	d905      	bls.n	80039a2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <xTaskRemoveFromEventList+0x1a8>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e001      	b.n	80039a6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	372c      	adds	r7, #44	; 0x2c
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	20000200 	.word	0x20000200
 80039b8:	200001e0 	.word	0x200001e0
 80039bc:	20000104 	.word	0x20000104
 80039c0:	20000198 	.word	0x20000198
 80039c4:	20000100 	.word	0x20000100
 80039c8:	200001ec 	.word	0x200001ec

080039cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <vTaskInternalSetTimeOutState+0x24>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <vTaskInternalSetTimeOutState+0x28>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	605a      	str	r2, [r3, #4]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	200001f0 	.word	0x200001f0
 80039f4:	200001dc 	.word	0x200001dc

080039f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	613b      	str	r3, [r7, #16]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60fb      	str	r3, [r7, #12]
    }
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a3a:	f000 fd55 	bl	80044e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <xTaskCheckForTimeOut+0xc4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d102      	bne.n	8003a5e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e026      	b.n	8003aac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <xTaskCheckForTimeOut+0xc8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d00a      	beq.n	8003a80 <xTaskCheckForTimeOut+0x88>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d305      	bcc.n	8003a80 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e015      	b.n	8003aac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20b      	bcs.n	8003aa2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff98 	bl	80039cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e004      	b.n	8003aac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003aac:	f000 fd4c 	bl	8004548 <vPortExitCritical>

    return xReturn;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200001dc 	.word	0x200001dc
 8003ac0:	200001f0 	.word	0x200001f0

08003ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <vTaskMissedYield+0x14>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	200001ec 	.word	0x200001ec

08003adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ae4:	f000 f852 	bl	8003b8c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prvIdleTask+0x28>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d9f9      	bls.n	8003ae4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <prvIdleTask+0x2c>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b00:	e7f0      	b.n	8003ae4 <prvIdleTask+0x8>
 8003b02:	bf00      	nop
 8003b04:	20000104 	.word	0x20000104
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	e00c      	b.n	8003b32 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <prvInitialiseTaskLists+0x60>)
 8003b24:	4413      	add	r3, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fe00 	bl	800272c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d9ef      	bls.n	8003b18 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <prvInitialiseTaskLists+0x64>)
 8003b3a:	f7fe fdf7 	bl	800272c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b3e:	480d      	ldr	r0, [pc, #52]	; (8003b74 <prvInitialiseTaskLists+0x68>)
 8003b40:	f7fe fdf4 	bl	800272c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <prvInitialiseTaskLists+0x6c>)
 8003b46:	f7fe fdf1 	bl	800272c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b4a:	480c      	ldr	r0, [pc, #48]	; (8003b7c <prvInitialiseTaskLists+0x70>)
 8003b4c:	f7fe fdee 	bl	800272c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <prvInitialiseTaskLists+0x74>)
 8003b52:	f7fe fdeb 	bl	800272c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <prvInitialiseTaskLists+0x78>)
 8003b58:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <prvInitialiseTaskLists+0x64>)
 8003b5a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <prvInitialiseTaskLists+0x7c>)
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <prvInitialiseTaskLists+0x68>)
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000104 	.word	0x20000104
 8003b70:	20000168 	.word	0x20000168
 8003b74:	2000017c 	.word	0x2000017c
 8003b78:	20000198 	.word	0x20000198
 8003b7c:	200001ac 	.word	0x200001ac
 8003b80:	200001c4 	.word	0x200001c4
 8003b84:	20000190 	.word	0x20000190
 8003b88:	20000194 	.word	0x20000194

08003b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b92:	e019      	b.n	8003bc8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b94:	f000 fca8 	bl	80044e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b98:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <prvCheckTasksWaitingTermination+0x50>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fe27 	bl	80027f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <prvCheckTasksWaitingTermination+0x54>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <prvCheckTasksWaitingTermination+0x54>)
 8003bb2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <prvCheckTasksWaitingTermination+0x58>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <prvCheckTasksWaitingTermination+0x58>)
 8003bbc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003bbe:	f000 fcc3 	bl	8004548 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f810 	bl	8003be8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <prvCheckTasksWaitingTermination+0x58>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e1      	bne.n	8003b94 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200001ac 	.word	0x200001ac
 8003be0:	200001d8 	.word	0x200001d8
 8003be4:	200001c0 	.word	0x200001c0

08003be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fe39 	bl	800486c <vPortFree>
                vPortFree( pxTCB );
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fe36 	bl	800486c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvResetNextTaskUnblockTime+0x30>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <prvResetNextTaskUnblockTime+0x34>)
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c1e:	e005      	b.n	8003c2c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <prvResetNextTaskUnblockTime+0x30>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <prvResetNextTaskUnblockTime+0x34>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000190 	.word	0x20000190
 8003c3c:	200001f8 	.word	0x200001f8

08003c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <xTaskGetSchedulerState+0x34>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e008      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <xTaskGetSchedulerState+0x38>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	e001      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c66:	687b      	ldr	r3, [r7, #4]
    }
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	200001e4 	.word	0x200001e4
 8003c78:	20000200 	.word	0x20000200

08003c7c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fdb0 	bl	80027f8 <uxListRemove>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c9e:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cb4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d124      	bne.n	8003d08 <prvAddCurrentTaskToDelayedList+0x8c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d021      	beq.n	8003d08 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	6892      	ldr	r2, [r2, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	3204      	adds	r2, #4
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1d1a      	adds	r2, r3, #4
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cf8:	615a      	str	r2, [r3, #20]
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d06:	e026      	b.n	8003d56 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d209      	bcs.n	8003d34 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fd2a 	bl	8002786 <vListInsert>
}
 8003d32:	e010      	b.n	8003d56 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fd20 	bl	8002786 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d202      	bcs.n	8003d56 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d50:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200001dc 	.word	0x200001dc
 8003d64:	20000100 	.word	0x20000100
 8003d68:	200001e0 	.word	0x200001e0
 8003d6c:	200001c4 	.word	0x200001c4
 8003d70:	20000194 	.word	0x20000194
 8003d74:	20000190 	.word	0x20000190
 8003d78:	200001f8 	.word	0x200001f8

08003d7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d86:	f000 fa47 	bl	8004218 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <xTimerCreateTimerTask+0x54>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <xTimerCreateTimerTask+0x58>)
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	2302      	movs	r3, #2
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003da0:	490d      	ldr	r1, [pc, #52]	; (8003dd8 <xTimerCreateTimerTask+0x5c>)
 8003da2:	480e      	ldr	r0, [pc, #56]	; (8003ddc <xTimerCreateTimerTask+0x60>)
 8003da4:	f7ff f844 	bl	8002e30 <xTaskCreate>
 8003da8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	603b      	str	r3, [r7, #0]
    }
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003dc6:	687b      	ldr	r3, [r7, #4]
    }
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000234 	.word	0x20000234
 8003dd4:	20000238 	.word	0x20000238
 8003dd8:	08004b4c 	.word	0x08004b4c
 8003ddc:	08003e85 	.word	0x08003e85

08003de0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003dec:	e008      	b.n	8003e00 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	18d1      	adds	r1, r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f8dd 	bl	8003fcc <prvInsertTimerInActiveList>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ea      	bne.n	8003dee <prvReloadTimer+0xe>
        }
    }
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <prvProcessExpiredTimer+0x5c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fcdb 	bl	80027f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ffc3 	bl	8003de0 <prvReloadTimer>
 8003e5a:	e008      	b.n	8003e6e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	4798      	blx	r3
    }
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000022c 	.word	0x2000022c

08003e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f857 	bl	8003f44 <prvGetNextExpireTime>
 8003e96:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f803 	bl	8003ea8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ea2:	f000 f8d5 	bl	8004050 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ea6:	e7f1      	b.n	8003e8c <prvTimerTask+0x8>

08003ea8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003eb2:	f7ff f9bf 	bl	8003234 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f866 	bl	8003f8c <prvSampleTimeNow>
 8003ec0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d130      	bne.n	8003f2a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <prvProcessTimerOrBlockTask+0x3c>
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d806      	bhi.n	8003ee4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003ed6:	f7ff f9bb 	bl	8003250 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ffa1 	bl	8003e24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ee2:	e024      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <prvProcessTimerOrBlockTask+0x90>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <prvProcessTimerOrBlockTask+0x50>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <prvProcessTimerOrBlockTask+0x52>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <prvProcessTimerOrBlockTask+0x94>)
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fe ff5d 	bl	8002dc8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f0e:	f7ff f99f 	bl	8003250 <xTaskResumeAll>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <prvProcessTimerOrBlockTask+0x98>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
    }
 8003f28:	e001      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f2a:	f7ff f991 	bl	8003250 <xTaskResumeAll>
    }
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000230 	.word	0x20000230
 8003f3c:	20000234 	.word	0x20000234
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <prvGetNextExpireTime+0x44>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <prvGetNextExpireTime+0x16>
 8003f56:	2201      	movs	r2, #1
 8003f58:	e000      	b.n	8003f5c <prvGetNextExpireTime+0x18>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <prvGetNextExpireTime+0x44>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e001      	b.n	8003f78 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f78:	68fb      	ldr	r3, [r7, #12]
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	2000022c 	.word	0x2000022c

08003f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f94:	f7ff fa58 	bl	8003448 <xTaskGetTickCount>
 8003f98:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <prvSampleTimeNow+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d205      	bcs.n	8003fb0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fa4:	f000 f912 	bl	80041cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <prvSampleTimeNow+0x3c>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    }
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000023c 	.word	0x2000023c

08003fcc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d812      	bhi.n	8004018 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e01b      	b.n	800403e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <prvInsertTimerInActiveList+0x7c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3304      	adds	r3, #4
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7fe fbb8 	bl	8002786 <vListInsert>
 8004016:	e012      	b.n	800403e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d206      	bcs.n	800402e <prvInsertTimerInActiveList+0x62>
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e007      	b.n	800403e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <prvInsertTimerInActiveList+0x80>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fe fba4 	bl	8002786 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800403e:	697b      	ldr	r3, [r7, #20]
    }
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000230 	.word	0x20000230
 800404c:	2000022c 	.word	0x2000022c

08004050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004056:	e0a6      	b.n	80041a6 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f2c0 80a2 	blt.w	80041a4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fbc1 	bl	80027f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff87 	bl	8003f8c <prvSampleTimeNow>
 800407e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	2b08      	cmp	r3, #8
 8004086:	f200 808e 	bhi.w	80041a6 <prvProcessReceivedCommands+0x156>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <prvProcessReceivedCommands+0x40>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040b5 	.word	0x080040b5
 8004098:	0800411d 	.word	0x0800411d
 800409c:	08004131 	.word	0x08004131
 80040a0:	0800417b 	.word	0x0800417b
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040b5 	.word	0x080040b5
 80040ac:	0800411d 	.word	0x0800411d
 80040b0:	08004131 	.word	0x08004131
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	18d1      	adds	r1, r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	69f8      	ldr	r0, [r7, #28]
 80040d4:	f7ff ff7a 	bl	8003fcc <prvInsertTimerInActiveList>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4619      	mov	r1, r3
 80040f8:	69f8      	ldr	r0, [r7, #28]
 80040fa:	f7ff fe71 	bl	8003de0 <prvReloadTimer>
 80040fe:	e008      	b.n	8004112 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	69f8      	ldr	r0, [r7, #28]
 8004118:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800411a:	e044      	b.n	80041a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	b2da      	uxtb	r2, r3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800412e:	e03a      	b.n	80041a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	617b      	str	r3, [r7, #20]
    }
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	18d1      	adds	r1, r2, r3
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	69f8      	ldr	r0, [r7, #28]
 8004174:	f7ff ff2a 	bl	8003fcc <prvInsertTimerInActiveList>
                        break;
 8004178:	e015      	b.n	80041a6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004188:	69f8      	ldr	r0, [r7, #28]
 800418a:	f000 fb6f 	bl	800486c <vPortFree>
 800418e:	e00a      	b.n	80041a6 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041a2:	e000      	b.n	80041a6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80041a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <prvProcessReceivedCommands+0x178>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f107 0108 	add.w	r1, r7, #8
 80041ae:	2200      	movs	r2, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fc4d 	bl	8002a50 <xQueueReceive>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f af4d 	bne.w	8004058 <prvProcessReceivedCommands+0x8>
        }
    }
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000234 	.word	0x20000234

080041cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041d2:	e009      	b.n	80041e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <prvSwitchTimerLists+0x44>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80041de:	f04f 31ff 	mov.w	r1, #4294967295
 80041e2:	6838      	ldr	r0, [r7, #0]
 80041e4:	f7ff fe1e 	bl	8003e24 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <prvSwitchTimerLists+0x44>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <prvSwitchTimerLists+0x44>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <prvSwitchTimerLists+0x48>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <prvSwitchTimerLists+0x44>)
 80041fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <prvSwitchTimerLists+0x48>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
    }
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000022c 	.word	0x2000022c
 8004214:	20000230 	.word	0x20000230

08004218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800421c:	f000 f964 	bl	80044e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <prvCheckForValidListAndQueue+0x54>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11d      	bne.n	8004264 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004228:	4811      	ldr	r0, [pc, #68]	; (8004270 <prvCheckForValidListAndQueue+0x58>)
 800422a:	f7fe fa7f 	bl	800272c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800422e:	4811      	ldr	r0, [pc, #68]	; (8004274 <prvCheckForValidListAndQueue+0x5c>)
 8004230:	f7fe fa7c 	bl	800272c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <prvCheckForValidListAndQueue+0x60>)
 8004236:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <prvCheckForValidListAndQueue+0x58>)
 8004238:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <prvCheckForValidListAndQueue+0x64>)
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <prvCheckForValidListAndQueue+0x5c>)
 800423e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004240:	2200      	movs	r2, #0
 8004242:	210c      	movs	r1, #12
 8004244:	200a      	movs	r0, #10
 8004246:	f7fe fb91 	bl	800296c <xQueueGenericCreate>
 800424a:	4603      	mov	r3, r0
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <prvCheckForValidListAndQueue+0x54>)
 800424e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <prvCheckForValidListAndQueue+0x54>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <prvCheckForValidListAndQueue+0x54>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4908      	ldr	r1, [pc, #32]	; (8004280 <prvCheckForValidListAndQueue+0x68>)
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fd64 	bl	8002d2c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004264:	f000 f970 	bl	8004548 <vPortExitCritical>
    }
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000234 	.word	0x20000234
 8004270:	20000204 	.word	0x20000204
 8004274:	20000218 	.word	0x20000218
 8004278:	2000022c 	.word	0x2000022c
 800427c:	20000230 	.word	0x20000230
 8004280:	08004b54 	.word	0x08004b54

08004284 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3b04      	subs	r3, #4
 8004294:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800429c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b04      	subs	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <pxPortInitialiseStack+0x64>)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3b14      	subs	r3, #20
 80042be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f06f 0202 	mvn.w	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b20      	subs	r3, #32
 80042d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	080042ed 	.word	0x080042ed

080042ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <prvTaskExitError+0x54>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d00a      	beq.n	8004316 <prvTaskExitError+0x2a>
        __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
    }
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <prvTaskExitError+0x28>
        __asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60bb      	str	r3, [r7, #8]
    }
 8004328:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800432a:	bf00      	nop
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0fc      	beq.n	800432c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	20000010 	.word	0x20000010
	...

08004350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <pxCurrentTCBConst2>)
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	f380 8809 	msr	PSP, r0
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8811 	msr	BASEPRI, r0
 800436a:	4770      	bx	lr
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst2>:
 8004370:	20000100 	.word	0x20000100
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004378:	4808      	ldr	r0, [pc, #32]	; (800439c <prvPortStartFirstTask+0x24>)
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	6800      	ldr	r0, [r0, #0]
 800437e:	f380 8808 	msr	MSP, r0
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8814 	msr	CONTROL, r0
 800438a:	b662      	cpsie	i
 800438c:	b661      	cpsie	f
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	df00      	svc	0
 8004398:	bf00      	nop
 800439a:	0000      	.short	0x0000
 800439c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop

080043a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <xPortStartScheduler+0x120>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <xPortStartScheduler+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10a      	bne.n	80043ca <xPortStartScheduler+0x26>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
    }
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <xPortStartScheduler+0x120>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3f      	ldr	r2, [pc, #252]	; (80044cc <xPortStartScheduler+0x128>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10a      	bne.n	80043ea <xPortStartScheduler+0x46>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <xPortStartScheduler+0x12c>)
 80043ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <xPortStartScheduler+0x130>)
 8004410:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <xPortStartScheduler+0x134>)
 8004414:	2207      	movs	r2, #7
 8004416:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004418:	e009      	b.n	800442e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <xPortStartScheduler+0x134>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3b01      	subs	r3, #1
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <xPortStartScheduler+0x134>)
 8004422:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d0ef      	beq.n	800441a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <xPortStartScheduler+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00a      	beq.n	800445c <xPortStartScheduler+0xb8>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60bb      	str	r3, [r7, #8]
    }
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <xPortStartScheduler+0x134>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <xPortStartScheduler+0x134>)
 8004464:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004466:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <xPortStartScheduler+0x134>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <xPortStartScheduler+0x134>)
 8004470:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <xPortStartScheduler+0x138>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <xPortStartScheduler+0x138>)
 8004480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004484:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <xPortStartScheduler+0x138>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <xPortStartScheduler+0x138>)
 800448c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004492:	f000 f8db 	bl	800464c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <xPortStartScheduler+0x13c>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800449c:	f000 f8fa 	bl	8004694 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <xPortStartScheduler+0x140>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <xPortStartScheduler+0x140>)
 80044a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044ac:	f7ff ff64 	bl	8004378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044b0:	f7ff f8f0 	bl	8003694 <vTaskSwitchContext>
    prvTaskExitError();
 80044b4:	f7ff ff1a 	bl	80042ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00
 80044c8:	410fc271 	.word	0x410fc271
 80044cc:	410fc270 	.word	0x410fc270
 80044d0:	e000e400 	.word	0xe000e400
 80044d4:	20000240 	.word	0x20000240
 80044d8:	20000244 	.word	0x20000244
 80044dc:	e000ed20 	.word	0xe000ed20
 80044e0:	20000010 	.word	0x20000010
 80044e4:	e000ef34 	.word	0xe000ef34

080044e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
        __asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
    }
 8004500:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <vPortEnterCritical+0x58>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <vPortEnterCritical+0x58>)
 800450a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <vPortEnterCritical+0x58>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d10f      	bne.n	8004534 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <vPortEnterCritical+0x5c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <vPortEnterCritical+0x4c>
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	603b      	str	r3, [r7, #0]
    }
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vPortEnterCritical+0x4a>
    }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000010 	.word	0x20000010
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <vPortExitCritical+0x50>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <vPortExitCritical+0x24>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	607b      	str	r3, [r7, #4]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <vPortExitCritical+0x50>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3b01      	subs	r3, #1
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <vPortExitCritical+0x50>)
 8004574:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <vPortExitCritical+0x50>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <vPortExitCritical+0x42>
 800457e:	2300      	movs	r3, #0
 8004580:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004588:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010
 800459c:	00000000 	.word	0x00000000

080045a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045a0:	f3ef 8009 	mrs	r0, PSP
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <pxCurrentTCBConst>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	f01e 0f10 	tst.w	lr, #16
 80045b0:	bf08      	it	eq
 80045b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045c4:	f380 8811 	msr	BASEPRI, r0
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f7ff f860 	bl	8003694 <vTaskSwitchContext>
 80045d4:	f04f 0000 	mov.w	r0, #0
 80045d8:	f380 8811 	msr	BASEPRI, r0
 80045dc:	bc09      	pop	{r0, r3}
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	6808      	ldr	r0, [r1, #0]
 80045e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e6:	f01e 0f10 	tst.w	lr, #16
 80045ea:	bf08      	it	eq
 80045ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045f0:	f380 8809 	msr	PSP, r0
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	f3af 8000 	nop.w

08004600 <pxCurrentTCBConst>:
 8004600:	20000100 	.word	0x20000100
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
        __asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	607b      	str	r3, [r7, #4]
    }
 8004620:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004622:	f7fe ff21 	bl	8003468 <xTaskIncrementTick>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <SysTick_Handler+0x40>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f383 8811 	msr	BASEPRI, r3
    }
 800463e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <vPortSetupTimerInterrupt+0x34>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <vPortSetupTimerInterrupt+0x38>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <vPortSetupTimerInterrupt+0x3c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <vPortSetupTimerInterrupt+0x40>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	4a09      	ldr	r2, [pc, #36]	; (8004690 <vPortSetupTimerInterrupt+0x44>)
 800466a:	3b01      	subs	r3, #1
 800466c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <vPortSetupTimerInterrupt+0x34>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000e010 	.word	0xe000e010
 8004684:	e000e018 	.word	0xe000e018
 8004688:	20000000 	.word	0x20000000
 800468c:	10624dd3 	.word	0x10624dd3
 8004690:	e000e014 	.word	0xe000e014

08004694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046a4 <vPortEnableVFP+0x10>
 8004698:	6801      	ldr	r1, [r0, #0]
 800469a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800469e:	6001      	str	r1, [r0, #0]
 80046a0:	4770      	bx	lr
 80046a2:	0000      	.short	0x0000
 80046a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop

080046ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80046b8:	f7fe fdbc 	bl	8003234 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046bc:	4b65      	ldr	r3, [pc, #404]	; (8004854 <pvPortMalloc+0x1a8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80046c4:	f000 f934 	bl	8004930 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046c8:	4b63      	ldr	r3, [pc, #396]	; (8004858 <pvPortMalloc+0x1ac>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 80a7 	bne.w	8004824 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02d      	beq.n	8004738 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80046dc:	2208      	movs	r2, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d227      	bcs.n	8004738 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80046e8:	2208      	movs	r2, #8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d021      	beq.n	800473e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f023 0307 	bic.w	r3, r3, #7
 8004700:	3308      	adds	r3, #8
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d214      	bcs.n	8004732 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	3308      	adds	r3, #8
 8004710:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	2b00      	cmp	r3, #0
 800471a:	d010      	beq.n	800473e <pvPortMalloc+0x92>
        __asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	617b      	str	r3, [r7, #20]
    }
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004736:	e002      	b.n	800473e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	e000      	b.n	8004740 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800473e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d06e      	beq.n	8004824 <pvPortMalloc+0x178>
 8004746:	4b45      	ldr	r3, [pc, #276]	; (800485c <pvPortMalloc+0x1b0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d869      	bhi.n	8004824 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004750:	4b43      	ldr	r3, [pc, #268]	; (8004860 <pvPortMalloc+0x1b4>)
 8004752:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004754:	4b42      	ldr	r3, [pc, #264]	; (8004860 <pvPortMalloc+0x1b4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800475a:	e004      	b.n	8004766 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d903      	bls.n	8004778 <pvPortMalloc+0xcc>
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f1      	bne.n	800475c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <pvPortMalloc+0x1a8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477e:	429a      	cmp	r2, r3
 8004780:	d050      	beq.n	8004824 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2208      	movs	r2, #8
 8004788:	4413      	add	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	2308      	movs	r3, #8
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d91f      	bls.n	80047e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <pvPortMalloc+0x120>
        __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	613b      	str	r3, [r7, #16]
    }
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047de:	69b8      	ldr	r0, [r7, #24]
 80047e0:	f000 f908 	bl	80049f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <pvPortMalloc+0x1b0>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <pvPortMalloc+0x1b0>)
 80047f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <pvPortMalloc+0x1b0>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <pvPortMalloc+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d203      	bcs.n	8004806 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <pvPortMalloc+0x1b0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a18      	ldr	r2, [pc, #96]	; (8004864 <pvPortMalloc+0x1b8>)
 8004804:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <pvPortMalloc+0x1ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	431a      	orrs	r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <pvPortMalloc+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a11      	ldr	r2, [pc, #68]	; (8004868 <pvPortMalloc+0x1bc>)
 8004822:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004824:	f7fe fd14 	bl	8003250 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <pvPortMalloc+0x19c>
        __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60fb      	str	r3, [r7, #12]
    }
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <pvPortMalloc+0x19a>
    return pvReturn;
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3728      	adds	r7, #40	; 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20012e50 	.word	0x20012e50
 8004858:	20012e64 	.word	0x20012e64
 800485c:	20012e54 	.word	0x20012e54
 8004860:	20012e48 	.word	0x20012e48
 8004864:	20012e58 	.word	0x20012e58
 8004868:	20012e5c 	.word	0x20012e5c

0800486c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d04d      	beq.n	800491a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800487e:	2308      	movs	r3, #8
 8004880:	425b      	negs	r3, r3
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4413      	add	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4b24      	ldr	r3, [pc, #144]	; (8004924 <vPortFree+0xb8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <vPortFree+0x44>
        __asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60fb      	str	r3, [r7, #12]
    }
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <vPortFree+0x62>
        __asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60bb      	str	r3, [r7, #8]
    }
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <vPortFree+0xb8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01e      	beq.n	800491a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11a      	bne.n	800491a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <vPortFree+0xb8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048f4:	f7fe fc9e 	bl	8003234 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <vPortFree+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4413      	add	r3, r2
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <vPortFree+0xbc>)
 8004904:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f000 f874 	bl	80049f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <vPortFree+0xc0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a06      	ldr	r2, [pc, #24]	; (800492c <vPortFree+0xc0>)
 8004914:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004916:	f7fe fc9b 	bl	8003250 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20012e64 	.word	0x20012e64
 8004928:	20012e54 	.word	0x20012e54
 800492c:	20012e60 	.word	0x20012e60

08004930 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004936:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800493a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <prvHeapInit+0xac>)
 800493e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3307      	adds	r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <prvHeapInit+0xac>)
 8004960:	4413      	add	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <prvHeapInit+0xb0>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <prvHeapInit+0xb0>)
 8004970:	2200      	movs	r2, #0
 8004972:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4413      	add	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800497c:	2208      	movs	r2, #8
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <prvHeapInit+0xb4>)
 8004990:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004992:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <prvHeapInit+0xb4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <prvHeapInit+0xb4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <prvHeapInit+0xb4>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <prvHeapInit+0xb8>)
 80049be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a09      	ldr	r2, [pc, #36]	; (80049ec <prvHeapInit+0xbc>)
 80049c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <prvHeapInit+0xc0>)
 80049ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	20000248 	.word	0x20000248
 80049e0:	20012e48 	.word	0x20012e48
 80049e4:	20012e50 	.word	0x20012e50
 80049e8:	20012e58 	.word	0x20012e58
 80049ec:	20012e54 	.word	0x20012e54
 80049f0:	20012e64 	.word	0x20012e64

080049f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049fc:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <prvInsertBlockIntoFreeList+0xac>)
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e002      	b.n	8004a08 <prvInsertBlockIntoFreeList+0x14>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d8f7      	bhi.n	8004a02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d108      	bne.n	8004a36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d118      	bne.n	8004a7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d00d      	beq.n	8004a72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e008      	b.n	8004a84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e003      	b.n	8004a84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d002      	beq.n	8004a92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20012e48 	.word	0x20012e48
 8004aa4:	20012e50 	.word	0x20012e50

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ae0 <__libc_init_array+0x38>)
 8004aac:	4c0d      	ldr	r4, [pc, #52]	; (8004ae4 <__libc_init_array+0x3c>)
 8004aae:	1b64      	subs	r4, r4, r5
 8004ab0:	10a4      	asrs	r4, r4, #2
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	4d0b      	ldr	r5, [pc, #44]	; (8004ae8 <__libc_init_array+0x40>)
 8004aba:	4c0c      	ldr	r4, [pc, #48]	; (8004aec <__libc_init_array+0x44>)
 8004abc:	f000 f82e 	bl	8004b1c <_init>
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	42a6      	cmp	r6, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad0:	4798      	blx	r3
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ada:	4798      	blx	r3
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	08004b7c 	.word	0x08004b7c
 8004ae4:	08004b7c 	.word	0x08004b7c
 8004ae8:	08004b7c 	.word	0x08004b7c
 8004aec:	08004b80 	.word	0x08004b80

08004af0 <memcpy>:
 8004af0:	440a      	add	r2, r1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004af8:	d100      	bne.n	8004afc <memcpy+0xc>
 8004afa:	4770      	bx	lr
 8004afc:	b510      	push	{r4, lr}
 8004afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b06:	4291      	cmp	r1, r2
 8004b08:	d1f9      	bne.n	8004afe <memcpy+0xe>
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <memset>:
 8004b0c:	4402      	add	r2, r0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d100      	bne.n	8004b16 <memset+0xa>
 8004b14:	4770      	bx	lr
 8004b16:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1a:	e7f9      	b.n	8004b10 <memset+0x4>

08004b1c <_init>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr

08004b28 <_fini>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr
