
food_dispenser_STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac4  08004ac4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac4  08004ac4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac4  08004ac4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c30  20000014  08004ae0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009c44  08004ae0  00029c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ee3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c37  00000000  00000000  00030f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a3  00000000  00000000  000358a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d11  00000000  00000000  0004d24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d58  00000000  00000000  0005ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  000f5d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a7c 	.word	0x08004a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004a7c 	.word	0x08004a7c

080001e0 <heartBeatInit>:

/*
* Function to initialize the heart beat low level settings.
*/
static void heartBeatInit(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]

    /* Heart beat: GPIO settings  */
    GPIO_InitStruct.Pin = HEART_BEAT_LED_PIN;
 80001f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(HEART_BEAT_LED_PORT, &GPIO_InitStruct);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <heartBeatInit+0x38>)
 800020c:	f000 fce8 	bl	8000be0 <HAL_GPIO_Init>
}
 8000210:	bf00      	nop
 8000212:	3718      	adds	r7, #24
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40020800 	.word	0x40020800

0800021c <HAL_TIM_PeriodElapsedCallback>:

/*
* Callback to increment the timer for the STM HAL layer.
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    if (timerHandler->Instance == TIM9)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d101      	bne.n	8000232 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 800022e:	f000 fbb1 	bl	8000994 <HAL_IncTick>
    }
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40014000 	.word	0x40014000

08000240 <errorHandler>:

/*
* General handler for all the errors. TODO: Handle individual errors.
*/
void errorHandler(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000244:	b672      	cpsid	i
}
 8000246:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_WritePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4802      	ldr	r0, [pc, #8]	; (8000258 <errorHandler+0x18>)
 8000250:	f000 fe4a 	bl	8000ee8 <HAL_GPIO_WritePin>
 8000254:	e7f8      	b.n	8000248 <errorHandler+0x8>
 8000256:	bf00      	nop
 8000258:	40020800 	.word	0x40020800

0800025c <vTaskHeartBeat>:

/*
* Task to indicate the freeRTOS app is alive.
*/
void vTaskHeartBeat(void *params)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    while (1)
    {
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <vTaskHeartBeat+0x20>)
 800026a:	f000 fe56 	bl	8000f1a <HAL_GPIO_TogglePin>
//        vTaskDelay(pdMS_TO_TICKS(HEART_BEAT_BLINK_DELAY));
        buzzerBeep(100, 100, 2);
 800026e:	2202      	movs	r2, #2
 8000270:	2164      	movs	r1, #100	; 0x64
 8000272:	2064      	movs	r0, #100	; 0x64
 8000274:	f000 f8f8 	bl	8000468 <buzzerBeep>
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 8000278:	e7f4      	b.n	8000264 <vTaskHeartBeat+0x8>
 800027a:	bf00      	nop
 800027c:	40020800 	.word	0x40020800

08000280 <pushButtonsInit>:
    }
}

void pushButtonsInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef pushButtonsGpioInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]

    /* Push buttons common settings */
    pushButtonsGpioInit.Mode = GPIO_MODE_IT_FALLING;
 8000294:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000298:	60bb      	str	r3, [r7, #8]
    pushButtonsGpioInit.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
    pushButtonsGpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
    /* Push button UP: GPIO settings */
    pushButtonsGpioInit.Pin = BUTTON_UP_GPIO_PIN;
 80002a2:	2302      	movs	r3, #2
 80002a4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(BUTTON_UP_GPIO_PORT, &pushButtonsGpioInit);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4816      	ldr	r0, [pc, #88]	; (8000304 <pushButtonsInit+0x84>)
 80002ac:	f000 fc98 	bl	8000be0 <HAL_GPIO_Init>
    /* Push button DOWN: GPIO settings */
    pushButtonsGpioInit.Pin = BUTTON_DOWN_GPIO_PIN;
 80002b0:	2304      	movs	r3, #4
 80002b2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(BUTTON_DOWN_GPIO_PORT, &pushButtonsGpioInit);
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4812      	ldr	r0, [pc, #72]	; (8000304 <pushButtonsInit+0x84>)
 80002ba:	f000 fc91 	bl	8000be0 <HAL_GPIO_Init>
    /* Push button ENTER: GPIO settings */
    pushButtonsGpioInit.Pin = BUTTON_ENTER_GPIO_PIN;
 80002be:	2301      	movs	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(BUTTON_ENTER_GPIO_PORT, &pushButtonsGpioInit);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	4810      	ldr	r0, [pc, #64]	; (8000308 <pushButtonsInit+0x88>)
 80002c8:	f000 fc8a 	bl	8000be0 <HAL_GPIO_Init>

    /* ENVIC settings */
     HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002cc:	2006      	movs	r0, #6
 80002ce:	f000 fc79 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002d2:	2007      	movs	r0, #7
 80002d4:	f000 fc76 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002d8:	2008      	movs	r0, #8
 80002da:	f000 fc73 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	210f      	movs	r1, #15
 80002e2:	2006      	movs	r0, #6
 80002e4:	f000 fc52 	bl	8000b8c <HAL_NVIC_SetPriority>
     HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	210f      	movs	r1, #15
 80002ec:	2007      	movs	r0, #7
 80002ee:	f000 fc4d 	bl	8000b8c <HAL_NVIC_SetPriority>
     HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	210f      	movs	r1, #15
 80002f6:	2008      	movs	r0, #8
 80002f8:	f000 fc48 	bl	8000b8c <HAL_NVIC_SetPriority>
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40020800 	.word	0x40020800
 8000308:	40020400 	.word	0x40020400

0800030c <main>:

int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af02      	add	r7, sp, #8
    BaseType_t retVal;
    HAL_StatusTypeDef halStatus;
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000312:	f000 fb1d 	bl	8000950 <HAL_Init>
    /* Configure the system clock */
    // clkInit(); // system CLK = 16 MHz
    /* Initialize push buttons */
    pushButtonsInit();
 8000316:	f7ff ffb3 	bl	8000280 <pushButtonsInit>
    /* Initialize heart beat led */
    heartBeatInit();
 800031a:	f7ff ff61 	bl	80001e0 <heartBeatInit>
    /* Initialize debug console*/
    // consoleInit();
    /* Initialize display */
//    displayInit();
    /* Initialize servomotor */
    halStatus = servoMotorInit();
 800031e:	f000 fa23 	bl	8000768 <servoMotorInit>
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <main+0x24>
    {
        errorHandler();
 800032c:	f7ff ff88 	bl	8000240 <errorHandler>
    }
    /* Initialize the buzzer */
    halStatus = buzzerInit();
 8000330:	f000 f85a 	bl	80003e8 <buzzerInit>
 8000334:	4603      	mov	r3, r0
 8000336:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <main+0x36>
    {
        errorHandler();
 800033e:	f7ff ff7f 	bl	8000240 <errorHandler>
    }

    /* Heart beat task */
    retVal = xTaskCreate(vTaskHeartBeat, "task-heart-beat", configMINIMAL_STACK_SIZE, NULL, HEART_BEAT_PRIORITY_TASK, &xTaskHeartBeatHandler);
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <main+0x8c>)
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	2282      	movs	r2, #130	; 0x82
 800034e:	4913      	ldr	r1, [pc, #76]	; (800039c <main+0x90>)
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <main+0x94>)
 8000352:	f002 fb25 	bl	80029a0 <xTaskCreate>
 8000356:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d102      	bne.n	8000364 <main+0x58>
//    if (retVal != pdPASS)
//    {
//        goto main_out;
//    }

    vTaskStartScheduler();
 800035e:	f002 fd2f 	bl	8002dc0 <vTaskStartScheduler>
 8000362:	e000      	b.n	8000366 <main+0x5a>
        goto main_out;
 8000364:	bf00      	nop

main_out:
    if (xTaskHeartBeatHandler != NULL)
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <main+0x8c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d004      	beq.n	8000378 <main+0x6c>
    {
        vTaskDelete(xTaskHeartBeatHandler);
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <main+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fc90 	bl	8002c98 <vTaskDelete>
    }
    if (xTaskDisplayHandler != NULL)
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <main+0x98>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d004      	beq.n	800038a <main+0x7e>
    {
        vTaskDelete(xTaskDisplayHandler);
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <main+0x98>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fc87 	bl	8002c98 <vTaskDelete>
    }
    errorHandler();
 800038a:	f7ff ff59 	bl	8000240 <errorHandler>
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000034 	.word	0x20000034
 800039c:	08004a94 	.word	0x08004a94
 80003a0:	0800025d 	.word	0x0800025d
 80003a4:	20000030 	.word	0x20000030

080003a8 <buzzerStart>:

/*
 * Description: Start the buzzer by starting the hardware timer.
 */
HAL_StatusTypeDef buzzerStart(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Start_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 80003ae:	2100      	movs	r1, #0
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <buzzerStart+0x1c>)
 80003b2:	f000 ff43 	bl	800123c <HAL_TIM_OC_Start_IT>
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000038 	.word	0x20000038

080003c8 <buzzerStop>:

/*
 * Description: Stop the buzzer by stopping the hardware timer.
 */
HAL_StatusTypeDef buzzerStop(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Stop_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 80003ce:	2100      	movs	r1, #0
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <buzzerStop+0x1c>)
 80003d2:	f001 f831 	bl	8001438 <HAL_TIM_OC_Stop_IT>
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 80003da:	79fb      	ldrb	r3, [r7, #7]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000038 	.word	0x20000038

080003e8 <buzzerInit>:

/*
 * Description: Initialize TIMER : Output compare mode to produce a square wave.
 */
HAL_StatusTypeDef buzzerInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef timerOCInit = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus = HAL_OK;
 8000400:	2300      	movs	r3, #0
 8000402:	77fb      	strb	r3, [r7, #31]

    /* Timer: Base unit settings */
    buzzerTimHandler.Instance = BUZZER_TIM_INSTANCE;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <buzzerInit+0x7c>)
 8000406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040a:	601a      	str	r2, [r3, #0]
    buzzerTimHandler.Init.Period = BUZZER_TIM_PERIOD;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <buzzerInit+0x7c>)
 800040e:	f04f 32ff 	mov.w	r2, #4294967295
 8000412:	60da      	str	r2, [r3, #12]
    buzzerTimHandler.Init.Prescaler = BUZZER_TIM_PRESCALER;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <buzzerInit+0x7c>)
 8000416:	220f      	movs	r2, #15
 8000418:	605a      	str	r2, [r3, #4]
    buzzerTimHandler.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <buzzerInit+0x7c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
    buzzerTimHandler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <buzzerInit+0x7c>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
    halStatus = HAL_TIM_OC_Init(&buzzerTimHandler);
 8000426:	480f      	ldr	r0, [pc, #60]	; (8000464 <buzzerInit+0x7c>)
 8000428:	f000 feb8 	bl	800119c <HAL_TIM_OC_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Timer: Channel settings */
    timerOCInit.OCMode = TIM_OCMODE_TOGGLE;
 8000430:	2330      	movs	r3, #48	; 0x30
 8000432:	603b      	str	r3, [r7, #0]
    timerOCInit.OCPolarity = TIM_OCNPOLARITY_HIGH;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
    timerOCInit.Pulse = BUZZER_TIM_PULSE_VALUE;
 8000438:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800043c:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_OC_ConfigChannel(&buzzerTimHandler, &timerOCInit, BUZZER_TIM_CHANNEL);
 800043e:	463b      	mov	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	4619      	mov	r1, r3
 8000444:	4807      	ldr	r0, [pc, #28]	; (8000464 <buzzerInit+0x7c>)
 8000446:	f001 fb15 	bl	8001a74 <HAL_TIM_OC_ConfigChannel>
 800044a:	4603      	mov	r3, r0
 800044c:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Clear interrupt to not jump to the interrupt handler */
    __HAL_TIM_CLEAR_IT(&buzzerTimHandler, TIM_IT_UPDATE);
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <buzzerInit+0x7c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f06f 0201 	mvn.w	r2, #1
 8000456:	611a      	str	r2, [r3, #16]

    return halStatus;
 8000458:	7ffb      	ldrb	r3, [r7, #31]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000038 	.word	0x20000038

08000468 <buzzerBeep>:

/*
 * Description: Play a tone multiple times. Time in ms.
 */
void buzzerBeep(uint32_t timeOn, uint32_t timeOff, uint32_t times)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
    int i;

    /* Protect against 0 */
    if (times <= 0 || timeOn <= 0)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d01a      	beq.n	80004b0 <buzzerBeep+0x48>
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d017      	beq.n	80004b0 <buzzerBeep+0x48>
    {
        return;
    }
    for ( i = 0; i < times; i++)
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e00f      	b.n	80004a6 <buzzerBeep+0x3e>
    {

        buzzerStart();
 8000486:	f7ff ff8f 	bl	80003a8 <buzzerStart>
        HAL_Delay(timeOn);
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f000 faa2 	bl	80009d4 <HAL_Delay>
        buzzerStop();
 8000490:	f7ff ff9a 	bl	80003c8 <buzzerStop>
        if (times > 1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d902      	bls.n	80004a0 <buzzerBeep+0x38>
        {
            HAL_Delay(timeOff);
 800049a:	68b8      	ldr	r0, [r7, #8]
 800049c:	f000 fa9a 	bl	80009d4 <HAL_Delay>
    for ( i = 0; i < times; i++)
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	3301      	adds	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d8eb      	bhi.n	8000486 <buzzerBeep+0x1e>
 80004ae:	e000      	b.n	80004b2 <buzzerBeep+0x4a>
        return;
 80004b0:	bf00      	nop
        }
    }
}
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <TIM2_IRQHandler>:

/*
* Interrupt handler for the buzzer timer.
*/
void TIM2_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&buzzerTimHandler);
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <TIM2_IRQHandler+0x10>)
 80004be:	f001 f9d1 	bl	8001864 <HAL_TIM_IRQHandler>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000038 	.word	0x20000038

080004cc <HAL_TIM_OC_DelayElapsedCallback>:

/*
 *  Callback to handle update events and capture compare mode
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    static uint32_t ccr1Reg;

    if (timerHandler->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	7f1b      	ldrb	r3, [r3, #28]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10d      	bne.n	80004f8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    {
        ccr1Reg = HAL_TIM_ReadCapturedValue(timerHandler, BUZZER_TIM_CHANNEL);
 80004dc:	2100      	movs	r1, #0
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f001 fbe6 	bl	8001cb0 <HAL_TIM_ReadCapturedValue>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80004e8:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(timerHandler, BUZZER_TIM_CHANNEL, (ccr1Reg + BUZZER_TIM_PULSE_VALUE));
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000080 	.word	0x20000080

08000504 <EXTI0_IRQHandler>:

/*
 * Interrupt handler for push button ENTER.
 */
void EXTI0_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_ENTER_GPIO_PIN);
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fd21 	bl	8000f50 <HAL_GPIO_EXTI_IRQHandler>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}

08000512 <EXTI1_IRQHandler>:

/*
 * Interrupt handler for push button UP.
 */
void EXTI1_IRQHandler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_GPIO_PIN);
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fd1a 	bl	8000f50 <HAL_GPIO_EXTI_IRQHandler>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <EXTI2_IRQHandler>:

/*
 * Interrupt handler for push button DOWN.
 */
void EXTI2_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_GPIO_PIN);
 8000524:	2004      	movs	r0, #4
 8000526:	f000 fd13 	bl	8000f50 <HAL_GPIO_EXTI_IRQHandler>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback to handle push button requests.
 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
    BaseType_t  pxHigherPriorityTaskWoken = pdFALSE;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]

    if (pin == BUTTON_ENTER_GPIO_PIN)
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10b      	bne.n	800055c <HAL_GPIO_EXTI_Callback+0x2c>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_ENTER, eSetBits, &pxHigherPriorityTaskWoken);
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2300      	movs	r3, #0
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2301      	movs	r3, #1
 8000554:	2204      	movs	r2, #4
 8000556:	2101      	movs	r1, #1
 8000558:	f003 f9a8 	bl	80038ac <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_UP_GPIO_PIN)
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d10b      	bne.n	800057a <HAL_GPIO_EXTI_Callback+0x4a>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_UP, eSetBits, &pxHigherPriorityTaskWoken);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2300      	movs	r3, #0
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	2201      	movs	r2, #1
 8000574:	2101      	movs	r1, #1
 8000576:	f003 f999 	bl	80038ac <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_DOWN_GPIO_PIN)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d10b      	bne.n	8000598 <HAL_GPIO_EXTI_Callback+0x68>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_DOWN, eSetBits, &pxHigherPriorityTaskWoken);
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2300      	movs	r3, #0
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2202      	movs	r2, #2
 8000592:	2101      	movs	r1, #1
 8000594:	f003 f98a 	bl	80038ac <xTaskGenericNotifyFromISR>
    }
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000030 	.word	0x20000030

080005a4 <TIM1_BRK_TIM9_IRQHandler>:

/*
 *  Interrupt handler for the HAL time base.
 */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim9);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80005aa:	f001 f95b 	bl	8001864 <HAL_TIM_IRQHandler>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000cc 	.word	0x200000cc

080005b8 <HAL_MspInit>:

/*
 *   Enable clocks and set NVIC settings.
 */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
    /* Enable clocks for some system settings */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <HAL_MspInit+0x104>)
 80005c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c6:	4a3d      	ldr	r2, [pc, #244]	; (80006bc <HAL_MspInit+0x104>)
 80005c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005cc:	6453      	str	r3, [r2, #68]	; 0x44
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <HAL_MspInit+0x104>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <HAL_MspInit+0x104>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a36      	ldr	r2, [pc, #216]	; (80006bc <HAL_MspInit+0x104>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b34      	ldr	r3, [pc, #208]	; (80006bc <HAL_MspInit+0x104>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]
    /* Enable clock for GPIOs being used */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b30      	ldr	r3, [pc, #192]	; (80006bc <HAL_MspInit+0x104>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <HAL_MspInit+0x104>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <HAL_MspInit+0x104>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <HAL_MspInit+0x104>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <HAL_MspInit+0x104>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <HAL_MspInit+0x104>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <HAL_MspInit+0x104>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <HAL_MspInit+0x104>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <HAL_MspInit+0x104>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /*Enable clock for TIMERS being used */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_MspInit+0x104>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <HAL_MspInit+0x104>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_MspInit+0x104>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_MspInit+0x104>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <HAL_MspInit+0x104>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_MspInit+0x104>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_MspInit+0x104>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_MspInit+0x104>)
 800068c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x104>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
    /* Set NVIC priority configuration */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 fa69 	bl	8000b76 <HAL_NVIC_SetPriorityGrouping>
    /* Enable interrupt for buzzer timer  */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	210f      	movs	r1, #15
 80006a8:	201c      	movs	r0, #28
 80006aa:	f000 fa6f 	bl	8000b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006ae:	201c      	movs	r0, #28
 80006b0:	f000 fa88 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800

080006c0 <HAL_TIM_OC_MspInit>:

/*
 *   GPIO settings: Buzzer.
 */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *timerHandler)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef buzzerGpioInit = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

    /* BUZZER: GPIO settings */
    buzzerGpioInit.Pin = BUZZER_GPIO_PIN;
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
    buzzerGpioInit.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
    buzzerGpioInit.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
    buzzerGpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
    buzzerGpioInit.Alternate = BUZZER_GPIO_ALTERNATE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_INSTANCE, &buzzerGpioInit);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <HAL_TIM_OC_MspInit+0x40>)
 80006f4:	f000 fa74 	bl	8000be0 <HAL_GPIO_Init>
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020000 	.word	0x40020000

08000704 <HAL_TIM_PWM_MspInit>:

/*
 *   GPIO settings: Servo motor.
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *timerHandler)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef servoMotorGpioInit = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

    /* GPIO settings: ServoMotor */
    servoMotorGpioInit.Pin = SERVO_MOTOR_GPIO_PIN;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	60fb      	str	r3, [r7, #12]
    servoMotorGpioInit.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
    servoMotorGpioInit.Alternate = SERVO_MOTOR_GPIO_ALTERNATE;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_INSTANCE, &servoMotorGpioInit);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <HAL_TIM_PWM_MspInit+0x38>)
 8000730:	f000 fa56 	bl	8000be0 <HAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020800 	.word	0x40020800

08000740 <servoMotorStart>:
static void servoMotorStart(void);
static void servoMotorStop(void);
void servoMotorRotate(ServoPosition position);

static void servoMotorStart(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	4802      	ldr	r0, [pc, #8]	; (8000750 <servoMotorStart+0x10>)
 8000748:	f000 ff78 	bl	800163c <HAL_TIM_PWM_Start>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000084 	.word	0x20000084

08000754 <servoMotorStop>:

static void servoMotorStop(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <servoMotorStop+0x10>)
 800075c:	f001 f81e 	bl	800179c <HAL_TIM_PWM_Stop>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084

08000768 <servoMotorInit>:

HAL_StatusTypeDef servoMotorInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef servoMotorChannelConfing = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus;

    /* TIMER base unit settings: Servo motor */
    servoMotorTimHandler.Instance = SERVO_MOTOR_TIM_INSTANCE;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <servoMotorInit+0x78>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <servoMotorInit+0x7c>)
 8000784:	601a      	str	r2, [r3, #0]
    servoMotorTimHandler.Init.Prescaler = SERVO_MOTOR_TIM_BASE_PRESCALER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <servoMotorInit+0x78>)
 8000788:	220f      	movs	r2, #15
 800078a:	605a      	str	r2, [r3, #4]
    servoMotorTimHandler.Init.Period = SERVO_MOTOR_TIM_BASE_PERIOD;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <servoMotorInit+0x78>)
 800078e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000792:	60da      	str	r2, [r3, #12]
    halStatus = HAL_TIM_PWM_Init(&servoMotorTimHandler);
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <servoMotorInit+0x78>)
 8000796:	f000 ff01 	bl	800159c <HAL_TIM_PWM_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <servoMotorInit+0x40>
    {
        errorHandler();
 80007a4:	f7ff fd4c 	bl	8000240 <errorHandler>
    }

    /* TIMER channel settings: Servo motor */
    servoMotorChannelConfing.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	; 0x60
 80007aa:	603b      	str	r3, [r7, #0]
    servoMotorChannelConfing.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
    servoMotorChannelConfing.Pulse = SERVO_MOTOR_2MS_SIGNAL;
 80007b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007b4:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_PWM_ConfigChannel(&servoMotorTimHandler, &servoMotorChannelConfing, SERVO_MOTOR_TIM_CHANNEL);
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <servoMotorInit+0x78>)
 80007be:	f001 f9b5 	bl	8001b2c <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 80007c6:	7ffb      	ldrb	r3, [r7, #31]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <servoMotorInit+0x68>
    {
        errorHandler();
 80007cc:	f7ff fd38 	bl	8000240 <errorHandler>
    }

    /* Go to the default state */
    servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f809 	bl	80007e8 <servoMotorRotate>

    return halStatus;
 80007d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000084 	.word	0x20000084
 80007e4:	40000400 	.word	0x40000400

080007e8 <servoMotorRotate>:

void servoMotorRotate(ServoPosition position)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    switch (position)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d012      	beq.n	800081e <servoMotorRotate+0x36>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	dc16      	bgt.n	800082a <servoMotorRotate+0x42>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <servoMotorRotate+0x1e>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d006      	beq.n	8000812 <servoMotorRotate+0x2a>
                                                           SERVO_MOTOR_1_5MS_SIGNAL);
                                    break;
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
                                                            SERVO_MOTOR_1MS_SIGNAL);
                                    break;
        default : break;
 8000804:	e011      	b.n	800082a <servoMotorRotate+0x42>
        case SERVO_MOTOR_DEGREES_0: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <servoMotorRotate+0x5c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000810:	e00c      	b.n	800082c <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_90: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <servoMotorRotate+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 800081c:	e006      	b.n	800082c <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <servoMotorRotate+0x5c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000828:	e000      	b.n	800082c <servoMotorRotate+0x44>
        default : break;
 800082a:	bf00      	nop
    }
    servoMotorStart();
 800082c:	f7ff ff88 	bl	8000740 <servoMotorStart>
    HAL_Delay(SERVO_MOTOR_DELAY);
 8000830:	20fa      	movs	r0, #250	; 0xfa
 8000832:	f000 f8cf 	bl	80009d4 <HAL_Delay>
    servoMotorStop();
 8000836:	f7ff ff8d 	bl	8000754 <servoMotorStop>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084

08000848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <HAL_InitTick+0xd0>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <HAL_InitTick+0xd0>)
 8000886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088a:	6453      	str	r3, [r2, #68]	; 0x44
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_InitTick+0xd0>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000898:	f107 020c 	add.w	r2, r7, #12
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fb8c 	bl	8000fc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008a8:	f000 fb76 	bl	8000f98 <HAL_RCC_GetPCLK2Freq>
 80008ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b0:	4a23      	ldr	r2, [pc, #140]	; (8000940 <HAL_InitTick+0xd4>)
 80008b2:	fba2 2303 	umull	r2, r3, r2, r3
 80008b6:	0c9b      	lsrs	r3, r3, #18
 80008b8:	3b01      	subs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HAL_InitTick+0xd8>)
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <HAL_InitTick+0xdc>)
 80008c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <HAL_InitTick+0xd8>)
 80008c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <HAL_InitTick+0xd8>)
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_InitTick+0xd8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_InitTick+0xd8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_InitTick+0xd8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <HAL_InitTick+0xd8>)
 80008e4:	f000 fb9e 	bl	8001024 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d11b      	bne.n	800092e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <HAL_InitTick+0xd8>)
 80008f8:	f000 fbee 	bl	80010d8 <HAL_TIM_Base_Start_IT>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000906:	2b00      	cmp	r3, #0
 8000908:	d111      	bne.n	800092e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800090a:	2018      	movs	r0, #24
 800090c:	f000 f95a 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b0f      	cmp	r3, #15
 8000914:	d808      	bhi.n	8000928 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000916:	2200      	movs	r2, #0
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	2018      	movs	r0, #24
 800091c:	f000 f936 	bl	8000b8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_InitTick+0xe0>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
 8000926:	e002      	b.n	800092e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000932:	4618      	mov	r0, r3
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	200000cc 	.word	0x200000cc
 8000948:	40014000 	.word	0x40014000
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f8fc 	bl	8000b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff74 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe18 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000114 	.word	0x20000114

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000114 	.word	0x20000114

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff4c 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9e:	f7ff ff61 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ffb1 	bl	8000b10 <NVIC_EncodePriority>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff80 	bl	8000abc <__NVIC_SetPriority>
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff54 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e159      	b.n	8000eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8148 	bne.w	8000eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80a2 	beq.w	8000eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a56      	ldr	r2, [pc, #344]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a49      	ldr	r2, [pc, #292]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d019      	beq.n	8000de2 <HAL_GPIO_Init+0x202>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_GPIO_Init+0x2f4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x1fe>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a47      	ldr	r2, [pc, #284]	; (8000ed8 <HAL_GPIO_Init+0x2f8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x1fa>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_GPIO_Init+0x2fc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x1f6>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a45      	ldr	r2, [pc, #276]	; (8000ee0 <HAL_GPIO_Init+0x300>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x1f2>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e008      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x204>
 8000de2:	2300      	movs	r3, #0
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e50:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f67f aea2 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40013c00 	.word	0x40013c00

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fade 	bl	8000530 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000000 	.word	0x20000000

08000f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f9c:	f7ff fff0 	bl	8000f80 <HAL_RCC_GetHCLKFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	0b5b      	lsrs	r3, r3, #13
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	08004abc 	.word	0x08004abc

08000fc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	220f      	movs	r2, #15
 8000fce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_RCC_GetClockConfig+0x5c>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_RCC_GetClockConfig+0x5c>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_RCC_GetClockConfig+0x5c>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_RCC_GetClockConfig+0x5c>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_RCC_GetClockConfig+0x60>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0207 	and.w	r2, r3, #7
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e041      	b.n	80010ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f839 	bl	80010c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3304      	adds	r3, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f000 fe86 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d001      	beq.n	80010f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e044      	b.n	800117a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_TIM_Base_Start_IT+0xb0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d018      	beq.n	8001144 <HAL_TIM_Base_Start_IT+0x6c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111a:	d013      	beq.n	8001144 <HAL_TIM_Base_Start_IT+0x6c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_TIM_Base_Start_IT+0xb4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00e      	beq.n	8001144 <HAL_TIM_Base_Start_IT+0x6c>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_TIM_Base_Start_IT+0xb8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d009      	beq.n	8001144 <HAL_TIM_Base_Start_IT+0x6c>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_TIM_Base_Start_IT+0xbc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_TIM_Base_Start_IT+0x6c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_TIM_Base_Start_IT+0xc0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d111      	bne.n	8001168 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b06      	cmp	r3, #6
 8001154:	d010      	beq.n	8001178 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001166:	e007      	b.n	8001178 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000
 800118c:	40000400 	.word	0x40000400
 8001190:	40000800 	.word	0x40000800
 8001194:	40000c00 	.word	0x40000c00
 8001198:	40014000 	.word	0x40014000

0800119c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e041      	b.n	8001232 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fa7c 	bl	80006c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3304      	adds	r3, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f000 fdca 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <HAL_TIM_OC_Start_IT+0x28>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e022      	b.n	80012aa <HAL_TIM_OC_Start_IT+0x6e>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d109      	bne.n	800127e <HAL_TIM_OC_Start_IT+0x42>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	e015      	b.n	80012aa <HAL_TIM_OC_Start_IT+0x6e>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d109      	bne.n	8001298 <HAL_TIM_OC_Start_IT+0x5c>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	e008      	b.n	80012aa <HAL_TIM_OC_Start_IT+0x6e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0b3      	b.n	800141a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d104      	bne.n	80012c2 <HAL_TIM_OC_Start_IT+0x86>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012c0:	e013      	b.n	80012ea <HAL_TIM_OC_Start_IT+0xae>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d104      	bne.n	80012d2 <HAL_TIM_OC_Start_IT+0x96>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012d0:	e00b      	b.n	80012ea <HAL_TIM_OC_Start_IT+0xae>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d104      	bne.n	80012e2 <HAL_TIM_OC_Start_IT+0xa6>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012e0:	e003      	b.n	80012ea <HAL_TIM_OC_Start_IT+0xae>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b0c      	cmp	r3, #12
 80012ee:	d841      	bhi.n	8001374 <HAL_TIM_OC_Start_IT+0x138>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_TIM_OC_Start_IT+0xbc>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	08001375 	.word	0x08001375
 8001300:	08001375 	.word	0x08001375
 8001304:	08001375 	.word	0x08001375
 8001308:	0800133f 	.word	0x0800133f
 800130c:	08001375 	.word	0x08001375
 8001310:	08001375 	.word	0x08001375
 8001314:	08001375 	.word	0x08001375
 8001318:	08001351 	.word	0x08001351
 800131c:	08001375 	.word	0x08001375
 8001320:	08001375 	.word	0x08001375
 8001324:	08001375 	.word	0x08001375
 8001328:	08001363 	.word	0x08001363
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0202 	orr.w	r2, r2, #2
 800133a:	60da      	str	r2, [r3, #12]
      break;
 800133c:	e01d      	b.n	800137a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	60da      	str	r2, [r3, #12]
      break;
 800134e:	e014      	b.n	800137a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0208 	orr.w	r2, r2, #8
 800135e:	60da      	str	r2, [r3, #12]
      break;
 8001360:	e00b      	b.n	800137a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0210 	orr.w	r2, r2, #16
 8001370:	60da      	str	r2, [r3, #12]
      break;
 8001372:	e002      	b.n	800137a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
      break;
 8001378:	bf00      	nop
  }

  if (status == HAL_OK)
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d14b      	bne.n	8001418 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 feff 	bl	800218c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d107      	bne.n	80013a8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_TIM_OC_Start_IT+0x1e8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d018      	beq.n	80013e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ba:	d013      	beq.n	80013e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_TIM_OC_Start_IT+0x1ec>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00e      	beq.n	80013e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_TIM_OC_Start_IT+0x1f0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d009      	beq.n	80013e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_TIM_OC_Start_IT+0x1f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d004      	beq.n	80013e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_TIM_OC_Start_IT+0x1f8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d111      	bne.n	8001408 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d010      	beq.n	8001418 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001406:	e007      	b.n	8001418 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40000400 	.word	0x40000400
 800142c:	40000800 	.word	0x40000800
 8001430:	40000c00 	.word	0x40000c00
 8001434:	40014000 	.word	0x40014000

08001438 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d841      	bhi.n	80014d0 <HAL_TIM_OC_Stop_IT+0x98>
 800144c:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <HAL_TIM_OC_Stop_IT+0x1c>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001489 	.word	0x08001489
 8001458:	080014d1 	.word	0x080014d1
 800145c:	080014d1 	.word	0x080014d1
 8001460:	080014d1 	.word	0x080014d1
 8001464:	0800149b 	.word	0x0800149b
 8001468:	080014d1 	.word	0x080014d1
 800146c:	080014d1 	.word	0x080014d1
 8001470:	080014d1 	.word	0x080014d1
 8001474:	080014ad 	.word	0x080014ad
 8001478:	080014d1 	.word	0x080014d1
 800147c:	080014d1 	.word	0x080014d1
 8001480:	080014d1 	.word	0x080014d1
 8001484:	080014bf 	.word	0x080014bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0202 	bic.w	r2, r2, #2
 8001496:	60da      	str	r2, [r3, #12]
      break;
 8001498:	e01d      	b.n	80014d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	60da      	str	r2, [r3, #12]
      break;
 80014aa:	e014      	b.n	80014d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0208 	bic.w	r2, r2, #8
 80014ba:	60da      	str	r2, [r3, #12]
      break;
 80014bc:	e00b      	b.n	80014d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0210 	bic.w	r2, r2, #16
 80014cc:	60da      	str	r2, [r3, #12]
      break;
 80014ce:	e002      	b.n	80014d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      break;
 80014d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d157      	bne.n	800158c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe51 	bl	800218c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <HAL_TIM_OC_Stop_IT+0x160>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d117      	bne.n	8001524 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10f      	bne.n	8001524 <HAL_TIM_OC_Stop_IT+0xec>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	f240 4344 	movw	r3, #1092	; 0x444
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d107      	bne.n	8001524 <HAL_TIM_OC_Stop_IT+0xec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	f241 1311 	movw	r3, #4369	; 0x1111
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_TIM_OC_Stop_IT+0x11c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	f240 4344 	movw	r3, #1092	; 0x444
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_TIM_OC_Stop_IT+0x11c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <HAL_TIM_OC_Stop_IT+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001562:	e013      	b.n	800158c <HAL_TIM_OC_Stop_IT+0x154>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d104      	bne.n	8001574 <HAL_TIM_OC_Stop_IT+0x13c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001572:	e00b      	b.n	800158c <HAL_TIM_OC_Stop_IT+0x154>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b08      	cmp	r3, #8
 8001578:	d104      	bne.n	8001584 <HAL_TIM_OC_Stop_IT+0x14c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001582:	e003      	b.n	800158c <HAL_TIM_OC_Stop_IT+0x154>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e041      	b.n	8001632 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff f89e 	bl	8000704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3304      	adds	r3, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f000 fbca 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_TIM_PWM_Start+0x24>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	e022      	b.n	80016a6 <HAL_TIM_PWM_Start+0x6a>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d109      	bne.n	800167a <HAL_TIM_PWM_Start+0x3e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	e015      	b.n	80016a6 <HAL_TIM_PWM_Start+0x6a>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d109      	bne.n	8001694 <HAL_TIM_PWM_Start+0x58>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	e008      	b.n	80016a6 <HAL_TIM_PWM_Start+0x6a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e068      	b.n	8001780 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <HAL_TIM_PWM_Start+0x82>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016bc:	e013      	b.n	80016e6 <HAL_TIM_PWM_Start+0xaa>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d104      	bne.n	80016ce <HAL_TIM_PWM_Start+0x92>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016cc:	e00b      	b.n	80016e6 <HAL_TIM_PWM_Start+0xaa>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d104      	bne.n	80016de <HAL_TIM_PWM_Start+0xa2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016dc:	e003      	b.n	80016e6 <HAL_TIM_PWM_Start+0xaa>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd4c 	bl	800218c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_TIM_PWM_Start+0x14c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d107      	bne.n	800170e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_TIM_PWM_Start+0x14c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d018      	beq.n	800174a <HAL_TIM_PWM_Start+0x10e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d013      	beq.n	800174a <HAL_TIM_PWM_Start+0x10e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_TIM_PWM_Start+0x150>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00e      	beq.n	800174a <HAL_TIM_PWM_Start+0x10e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_TIM_PWM_Start+0x154>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d009      	beq.n	800174a <HAL_TIM_PWM_Start+0x10e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_TIM_PWM_Start+0x158>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d004      	beq.n	800174a <HAL_TIM_PWM_Start+0x10e>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_TIM_PWM_Start+0x15c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b06      	cmp	r3, #6
 800175a:	d010      	beq.n	800177e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800176c:	e007      	b.n	800177e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40000400 	.word	0x40000400
 8001790:	40000800 	.word	0x40000800
 8001794:	40000c00 	.word	0x40000c00
 8001798:	40014000 	.word	0x40014000

0800179c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fcec 	bl	800218c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_TIM_PWM_Stop+0xc4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d117      	bne.n	80017ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_TIM_PWM_Stop+0x52>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	f240 4344 	movw	r3, #1092	; 0x444
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d107      	bne.n	80017ee <HAL_TIM_PWM_Stop+0x52>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_TIM_PWM_Stop+0x82>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	f240 4344 	movw	r3, #1092	; 0x444
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_TIM_PWM_Stop+0x82>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <HAL_TIM_PWM_Stop+0x92>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800182c:	e013      	b.n	8001856 <HAL_TIM_PWM_Stop+0xba>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d104      	bne.n	800183e <HAL_TIM_PWM_Stop+0xa2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800183c:	e00b      	b.n	8001856 <HAL_TIM_PWM_Stop+0xba>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d104      	bne.n	800184e <HAL_TIM_PWM_Stop+0xb2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800184c:	e003      	b.n	8001856 <HAL_TIM_PWM_Stop+0xba>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b02      	cmp	r3, #2
 8001878:	d122      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b02      	cmp	r3, #2
 8001886:	d11b      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0202 	mvn.w	r2, #2
 8001890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa46 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 80018ac:	e005      	b.n	80018ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fe0c 	bl	80004cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fa49 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d122      	bne.n	8001914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d11b      	bne.n	8001914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0204 	mvn.w	r2, #4
 80018e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa1c 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001900:	e005      	b.n	800190e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fde2 	bl	80004cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fa1f 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b08      	cmp	r3, #8
 8001920:	d122      	bne.n	8001968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b08      	cmp	r3, #8
 800192e:	d11b      	bne.n	8001968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0208 	mvn.w	r2, #8
 8001938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f9f2 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7fe fdb8 	bl	80004cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f9f5 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b10      	cmp	r3, #16
 8001974:	d122      	bne.n	80019bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b10      	cmp	r3, #16
 8001982:	d11b      	bne.n	80019bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0210 	mvn.w	r2, #16
 800198c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2208      	movs	r2, #8
 8001992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f9c8 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 80019a8:	e005      	b.n	80019b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe fd8e 	bl	80004cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f9cb 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0201 	mvn.w	r2, #1
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fc1a 	bl	800021c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b80      	cmp	r3, #128	; 0x80
 80019f4:	d10e      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d107      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fbeb 	bl	80021ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d10e      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d107      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f990 	bl	8001d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d10e      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d107      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0220 	mvn.w	r2, #32
 8001a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fbb5 	bl	80021d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e048      	b.n	8001b24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d839      	bhi.n	8001b14 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001add 	.word	0x08001add
 8001aac:	08001b15 	.word	0x08001b15
 8001ab0:	08001b15 	.word	0x08001b15
 8001ab4:	08001b15 	.word	0x08001b15
 8001ab8:	08001aeb 	.word	0x08001aeb
 8001abc:	08001b15 	.word	0x08001b15
 8001ac0:	08001b15 	.word	0x08001b15
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001af9 	.word	0x08001af9
 8001acc:	08001b15 	.word	0x08001b15
 8001ad0:	08001b15 	.word	0x08001b15
 8001ad4:	08001b15 	.word	0x08001b15
 8001ad8:	08001b07 	.word	0x08001b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f9c6 	bl	8001e74 <TIM_OC1_SetConfig>
      break;
 8001ae8:	e017      	b.n	8001b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fa25 	bl	8001f40 <TIM_OC2_SetConfig>
      break;
 8001af6:	e010      	b.n	8001b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fa8a 	bl	8002018 <TIM_OC3_SetConfig>
      break;
 8001b04:	e009      	b.n	8001b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 faed 	bl	80020ec <TIM_OC4_SetConfig>
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	75fb      	strb	r3, [r7, #23]
      break;
 8001b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0ae      	b.n	8001ca8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	f200 809f 	bhi.w	8001c98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b5a:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b60:	08001b95 	.word	0x08001b95
 8001b64:	08001c99 	.word	0x08001c99
 8001b68:	08001c99 	.word	0x08001c99
 8001b6c:	08001c99 	.word	0x08001c99
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001c99 	.word	0x08001c99
 8001b78:	08001c99 	.word	0x08001c99
 8001b7c:	08001c99 	.word	0x08001c99
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c99 	.word	0x08001c99
 8001b88:	08001c99 	.word	0x08001c99
 8001b8c:	08001c99 	.word	0x08001c99
 8001b90:	08001c57 	.word	0x08001c57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f96a 	bl	8001e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0208 	orr.w	r2, r2, #8
 8001bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6999      	ldr	r1, [r3, #24]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	619a      	str	r2, [r3, #24]
      break;
 8001bd2:	e064      	b.n	8001c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f9b0 	bl	8001f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6999      	ldr	r1, [r3, #24]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	021a      	lsls	r2, r3, #8
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	619a      	str	r2, [r3, #24]
      break;
 8001c14:	e043      	b.n	8001c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f9fb 	bl	8002018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0208 	orr.w	r2, r2, #8
 8001c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0204 	bic.w	r2, r2, #4
 8001c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69d9      	ldr	r1, [r3, #28]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	61da      	str	r2, [r3, #28]
      break;
 8001c54:	e023      	b.n	8001c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fa45 	bl	80020ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69d9      	ldr	r1, [r3, #28]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	021a      	lsls	r2, r3, #8
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	61da      	str	r2, [r3, #28]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d831      	bhi.n	8001d28 <HAL_TIM_ReadCapturedValue+0x78>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_TIM_ReadCapturedValue+0x1c>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d29 	.word	0x08001d29
 8001cd4:	08001d29 	.word	0x08001d29
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d0b 	.word	0x08001d0b
 8001ce0:	08001d29 	.word	0x08001d29
 8001ce4:	08001d29 	.word	0x08001d29
 8001ce8:	08001d29 	.word	0x08001d29
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	08001d29 	.word	0x08001d29
 8001cf4:	08001d29 	.word	0x08001d29
 8001cf8:	08001d29 	.word	0x08001d29
 8001cfc:	08001d1f 	.word	0x08001d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	60fb      	str	r3, [r7, #12]

      break;
 8001d08:	e00f      	b.n	8001d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	60fb      	str	r3, [r7, #12]

      break;
 8001d12:	e00a      	b.n	8001d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	60fb      	str	r3, [r7, #12]

      break;
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	60fb      	str	r3, [r7, #12]

      break;
 8001d26:	e000      	b.n	8001d2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001d28:	bf00      	nop
  }

  return tmpreg;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <TIM_Base_SetConfig+0xe4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00f      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d92:	d00b      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <TIM_Base_SetConfig+0xe8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <TIM_Base_SetConfig+0xec>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d003      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a2f      	ldr	r2, [pc, #188]	; (8001e64 <TIM_Base_SetConfig+0xf0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d108      	bne.n	8001dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <TIM_Base_SetConfig+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01b      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d017      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <TIM_Base_SetConfig+0xe8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <TIM_Base_SetConfig+0xec>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00f      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <TIM_Base_SetConfig+0xf0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <TIM_Base_SetConfig+0xf4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <TIM_Base_SetConfig+0xf8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <TIM_Base_SetConfig+0xfc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <TIM_Base_SetConfig+0xe4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d103      	bne.n	8001e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	615a      	str	r2, [r3, #20]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40014000 	.word	0x40014000
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	40014800 	.word	0x40014800

08001e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	f023 0201 	bic.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f023 0302 	bic.w	r3, r3, #2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <TIM_OC1_SetConfig+0xc8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10c      	bne.n	8001eea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <TIM_OC1_SetConfig+0xc8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d111      	bne.n	8001f16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	621a      	str	r2, [r3, #32]
}
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40010000 	.word	0x40010000

08001f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f023 0210 	bic.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f023 0320 	bic.w	r3, r3, #32
 8001f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <TIM_OC2_SetConfig+0xd4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10d      	bne.n	8001fbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <TIM_OC2_SetConfig+0xd4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d113      	bne.n	8001fec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000

08002018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <TIM_OC3_SetConfig+0xd0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10d      	bne.n	8002092 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <TIM_OC3_SetConfig+0xd0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	621a      	str	r2, [r3, #32]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40010000 	.word	0x40010000

080020ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <TIM_OC4_SetConfig+0x9c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d109      	bne.n	8002160 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	621a      	str	r2, [r3, #32]
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000

0800218c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2201      	movs	r2, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222a:	f7fe fb0d 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f002 fbeb 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7fe f86b 	bl	800030c <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002244:	08004acc 	.word	0x08004acc
  ldr r2, =_sbss
 8002248:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800224c:	20009c44 	.word	0x20009c44

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>

08002252 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 0208 	add.w	r2, r3, #8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 32ff 	mov.w	r2, #4294967295
 800226a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0208 	add.w	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0208 	add.w	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d103      	bne.n	8002314 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e00c      	b.n	800232e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3308      	adds	r3, #8
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e002      	b.n	8002322 <vListInsert+0x2e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d2f6      	bcs.n	800231c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6852      	ldr	r2, [r2, #4]
 8002386:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	d103      	bne.n	800239a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023c6:	2301      	movs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05d      	beq.n	80024ac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d059      	beq.n	80024ac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	2100      	movs	r1, #0
 8002402:	fba3 2302 	umull	r2, r3, r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <xQueueGenericReset+0x50>
 800240a:	2101      	movs	r1, #1
 800240c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d14c      	bne.n	80024ac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002412:	f001 ffd9 	bl	80043c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	6939      	ldr	r1, [r7, #16]
 8002420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	441a      	add	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2200      	movs	r2, #0
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	3b01      	subs	r3, #1
 8002444:	6939      	ldr	r1, [r7, #16]
 8002446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	441a      	add	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d114      	bne.n	8002492 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01a      	beq.n	80024a6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	3310      	adds	r3, #16
 8002474:	4618      	mov	r0, r3
 8002476:	f000 ffeb 	bl	8003450 <xTaskRemoveFromEventList>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <xQueueGenericReset+0x11c>)
 8002482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	e009      	b.n	80024a6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	3310      	adds	r3, #16
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fedb 	bl	8002252 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	3324      	adds	r3, #36	; 0x24
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fed6 	bl	8002252 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024a6:	f001 ffbf 	bl	8004428 <vPortExitCritical>
 80024aa:	e001      	b.n	80024b0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <xQueueGenericReset+0x110>
        __asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	60bb      	str	r3, [r7, #8]
    }
 80024c8:	bf00      	nop
 80024ca:	e7fe      	b.n	80024ca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02e      	beq.n	8002552 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024f4:	2100      	movs	r1, #0
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	fba3 2302 	umull	r2, r3, r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d000      	beq.n	8002504 <xQueueGenericCreate+0x28>
 8002502:	2101      	movs	r1, #1
 8002504:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d123      	bne.n	8002552 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002512:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002516:	d81c      	bhi.n	8002552 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	3350      	adds	r3, #80	; 0x50
 8002526:	4618      	mov	r0, r3
 8002528:	f002 f870 	bl	800460c <pvPortMalloc>
 800252c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01c      	beq.n	800256e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3350      	adds	r3, #80	; 0x50
 800253c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800253e:	79fa      	ldrb	r2, [r7, #7]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f814 	bl	8002578 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002550:	e00d      	b.n	800256e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericCreate+0x92>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	613b      	str	r3, [r7, #16]
    }
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800256e:	69fb      	ldr	r3, [r7, #28]
    }
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e002      	b.n	800259a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025a6:	2101      	movs	r1, #1
 80025a8:	69b8      	ldr	r0, [r7, #24]
 80025aa:	f7ff ff07 	bl	80023bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <xQueueReceive+0x30>
        __asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	623b      	str	r3, [r7, #32]
    }
 80025ec:	bf00      	nop
 80025ee:	e7fe      	b.n	80025ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <xQueueReceive+0x3e>
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <xQueueReceive+0x42>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <xQueueReceive+0x44>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueReceive+0x5e>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	61fb      	str	r3, [r7, #28]
    }
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261e:	f001 f927 	bl	8003870 <xTaskGetSchedulerState>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <xQueueReceive+0x6e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <xQueueReceive+0x72>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xQueueReceive+0x74>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <xQueueReceive+0x8e>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	61bb      	str	r3, [r7, #24]
    }
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800264e:	f001 febb 	bl	80043c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01f      	beq.n	800269e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002662:	f000 f88d 	bl	8002780 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00f      	beq.n	8002696 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	3310      	adds	r3, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fee8 	bl	8003450 <xTaskRemoveFromEventList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <xQueueReceive+0x1bc>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002696:	f001 fec7 	bl	8004428 <vPortExitCritical>
                return pdPASS;
 800269a:	2301      	movs	r3, #1
 800269c:	e069      	b.n	8002772 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a4:	f001 fec0 	bl	8004428 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e062      	b.n	8002772 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ffa0 	bl	80035fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c0:	f001 feb2 	bl	8004428 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c4:	f000 fbce 	bl	8002e64 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c8:	f001 fe7e 	bl	80043c8 <vPortEnterCritical>
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d103      	bne.n	80026e2 <xQueueReceive+0x122>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d103      	bne.n	80026f8 <xQueueReceive+0x138>
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f8:	f001 fe96 	bl	8004428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026fc:	1d3a      	adds	r2, r7, #4
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 ff8f 	bl	8003628 <xTaskCheckForTimeOut>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d123      	bne.n	8002758 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002712:	f000 f8ad 	bl	8002870 <prvIsQueueEmpty>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3324      	adds	r3, #36	; 0x24
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fe29 	bl	800337c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800272a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272c:	f000 f84e 	bl	80027cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002730:	f000 fba6 	bl	8002e80 <xTaskResumeAll>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d189      	bne.n	800264e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <xQueueReceive+0x1bc>)
 800273c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	e780      	b.n	800264e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800274c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800274e:	f000 f83d 	bl	80027cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002752:	f000 fb95 	bl	8002e80 <xTaskResumeAll>
 8002756:	e77a      	b.n	800264e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275a:	f000 f837 	bl	80027cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800275e:	f000 fb8f 	bl	8002e80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002764:	f000 f884 	bl	8002870 <prvIsQueueEmpty>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f43f af6f 	beq.w	800264e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002770:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002772:	4618      	mov	r0, r3
 8002774:	3730      	adds	r7, #48	; 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d018      	beq.n	80027c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d303      	bcc.n	80027b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	461a      	mov	r2, r3
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f002 f946 	bl	8004a50 <memcpy>
    }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027d4:	f001 fdf8 	bl	80043c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027e0:	e011      	b.n	8002806 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3324      	adds	r3, #36	; 0x24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe2e 	bl	8003450 <xTaskRemoveFromEventList>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80027fa:	f000 ff7b 	bl	80036f4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	dce9      	bgt.n	80027e2 <prvUnlockQueue+0x16>
 800280e:	e000      	b.n	8002812 <prvUnlockQueue+0x46>
                        break;
 8002810:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800281a:	f001 fe05 	bl	8004428 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800281e:	f001 fdd3 	bl	80043c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002828:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800282a:	e011      	b.n	8002850 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3310      	adds	r3, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fe09 	bl	8003450 <xTaskRemoveFromEventList>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002844:	f000 ff56 	bl	80036f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	3b01      	subs	r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dce9      	bgt.n	800282c <prvUnlockQueue+0x60>
 8002858:	e000      	b.n	800285c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800285a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	22ff      	movs	r2, #255	; 0xff
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002864:	f001 fde0 	bl	8004428 <vPortExitCritical>
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002878:	f001 fda6 	bl	80043c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e001      	b.n	800288e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800288e:	f001 fdcb 	bl	8004428 <vPortExitCritical>

    return xReturn;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <vQueueAddToRegistry+0x26>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
    }
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d024      	beq.n	8002916 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e01e      	b.n	8002910 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <vQueueAddToRegistry+0x98>)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d105      	bne.n	80028ee <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <vQueueAddToRegistry+0x98>)
 80028e8:	4413      	add	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
                    break;
 80028ec:	e013      	b.n	8002916 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <vQueueAddToRegistry+0x6e>
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <vQueueAddToRegistry+0x98>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <vQueueAddToRegistry+0x98>)
 8002906:	4413      	add	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b07      	cmp	r3, #7
 8002914:	d9dd      	bls.n	80028d2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000118 	.word	0x20000118

08002938 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002948:	f001 fd3e 	bl	80043c8 <vPortEnterCritical>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002952:	b25b      	sxtb	r3, r3
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <vQueueWaitForMessageRestricted+0x2a>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002968:	b25b      	sxtb	r3, r3
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d103      	bne.n	8002978 <vQueueWaitForMessageRestricted+0x40>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002978:	f001 fd56 	bl	8004428 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3324      	adds	r3, #36	; 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fd19 	bl	80033c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff1a 	bl	80027cc <prvUnlockQueue>
    }
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fe29 	bl	800460c <pvPortMalloc>
 80029ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029c2:	205c      	movs	r0, #92	; 0x5c
 80029c4:	f001 fe22 	bl	800460c <pvPortMalloc>
 80029c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
 80029d6:	e005      	b.n	80029e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f001 fef7 	bl	80047cc <vPortFree>
 80029de:	e001      	b.n	80029e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d013      	beq.n	8002a12 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9303      	str	r3, [sp, #12]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f80e 	bl	8002a22 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a06:	69f8      	ldr	r0, [r7, #28]
 8002a08:	f000 f8b0 	bl	8002b6c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e002      	b.n	8002a18 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a18:	69bb      	ldr	r3, [r7, #24]
    }
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	21a5      	movs	r1, #165	; 0xa5
 8002a3c:	f002 f816 	bl	8004a6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	617b      	str	r3, [r7, #20]
    }
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01f      	beq.n	8002ac0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	e012      	b.n	8002aac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	7819      	ldrb	r1, [r3, #0]
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	3334      	adds	r3, #52	; 0x34
 8002a96:	460a      	mov	r2, r1
 8002a98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d9e9      	bls.n	8002a86 <prvInitialiseNewTask+0x64>
 8002ab2:	e000      	b.n	8002ab6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002ab4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002abe:	e003      	b.n	8002ac8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d90a      	bls.n	8002ae4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	613b      	str	r3, [r7, #16]
    }
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d901      	bls.n	8002aee <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aea:	2304      	movs	r3, #4
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3304      	adds	r3, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fbc4 	bl	8002292 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fbbf 	bl	8002292 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b18:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	f1c3 0205 	rsb	r2, r3, #5
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	2208      	movs	r2, #8
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 ff9a 	bl	8004a6c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	3358      	adds	r3, #88	; 0x58
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 ff93 	bl	8004a6c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	69b8      	ldr	r0, [r7, #24]
 8002b4c:	f001 fb0e 	bl	800416c <pxPortInitialiseStack>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b74:	f001 fc28 	bl	80043c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <prvAddNewTaskToReadyList+0x110>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <prvAddNewTaskToReadyList+0x110>)
 8002b80:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <prvAddNewTaskToReadyList+0x114>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <prvAddNewTaskToReadyList+0x114>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <prvAddNewTaskToReadyList+0x110>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d110      	bne.n	8002bba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b98:	f000 fdd0 	bl	800373c <prvInitialiseTaskLists>
 8002b9c:	e00d      	b.n	8002bba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <prvAddNewTaskToReadyList+0x118>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <prvAddNewTaskToReadyList+0x114>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d802      	bhi.n	8002bba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bb4:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <prvAddNewTaskToReadyList+0x114>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <prvAddNewTaskToReadyList+0x11c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4a31      	ldr	r2, [pc, #196]	; (8002c88 <prvAddNewTaskToReadyList+0x11c>)
 8002bc2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <prvAddNewTaskToReadyList+0x11c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <prvAddNewTaskToReadyList+0x120>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <prvAddNewTaskToReadyList+0x120>)
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be2:	492b      	ldr	r1, [pc, #172]	; (8002c90 <prvAddNewTaskToReadyList+0x124>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	3204      	adds	r2, #4
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <prvAddNewTaskToReadyList+0x124>)
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2c:	4918      	ldr	r1, [pc, #96]	; (8002c90 <prvAddNewTaskToReadyList+0x124>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <prvAddNewTaskToReadyList+0x124>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4403      	add	r3, r0
 8002c48:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c4a:	f001 fbed 	bl	8004428 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <prvAddNewTaskToReadyList+0x118>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <prvAddNewTaskToReadyList+0x114>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <prvAddNewTaskToReadyList+0x128>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000230 	.word	0x20000230
 8002c80:	20000158 	.word	0x20000158
 8002c84:	2000023c 	.word	0x2000023c
 8002c88:	2000024c 	.word	0x2000024c
 8002c8c:	20000238 	.word	0x20000238
 8002c90:	2000015c 	.word	0x2000015c
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ca0:	f001 fb92 	bl	80043c8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <vTaskDelete+0x18>
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <vTaskDelete+0x100>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e000      	b.n	8002cb2 <vTaskDelete+0x1a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb54 	bl	8002366 <uxListRemove>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d115      	bne.n	8002cf0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4934      	ldr	r1, [pc, #208]	; (8002d9c <vTaskDelete+0x104>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <vTaskDelete+0x58>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <vTaskDelete+0x108>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <vTaskDelete+0x108>)
 8002cee:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fb32 	bl	8002366 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <vTaskDelete+0x10c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <vTaskDelete+0x10c>)
 8002d0a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002d0c:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <vTaskDelete+0x100>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10b      	bne.n	8002d2e <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4822      	ldr	r0, [pc, #136]	; (8002da8 <vTaskDelete+0x110>)
 8002d1e:	f7ff fac5 	bl	80022ac <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <vTaskDelete+0x114>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a20      	ldr	r2, [pc, #128]	; (8002dac <vTaskDelete+0x114>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e006      	b.n	8002d3c <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <vTaskDelete+0x118>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <vTaskDelete+0x118>)
 8002d36:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002d38:	f000 fd7e 	bl	8003838 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002d3c:	f001 fb74 	bl	8004428 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <vTaskDelete+0x100>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d002      	beq.n	8002d50 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fd64 	bl	8003818 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <vTaskDelete+0x11c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <vTaskDelete+0x100>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d116      	bne.n	8002d90 <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <vTaskDelete+0x120>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <vTaskDelete+0xe8>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	60bb      	str	r3, [r7, #8]
    }
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <vTaskDelete+0x124>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000158 	.word	0x20000158
 8002d9c:	2000015c 	.word	0x2000015c
 8002da0:	20000238 	.word	0x20000238
 8002da4:	2000024c 	.word	0x2000024c
 8002da8:	20000204 	.word	0x20000204
 8002dac:	20000218 	.word	0x20000218
 8002db0:	20000230 	.word	0x20000230
 8002db4:	2000023c 	.word	0x2000023c
 8002db8:	20000258 	.word	0x20000258
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <vTaskStartScheduler+0x88>)
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2282      	movs	r2, #130	; 0x82
 8002dd2:	491e      	ldr	r1, [pc, #120]	; (8002e4c <vTaskStartScheduler+0x8c>)
 8002dd4:	481e      	ldr	r0, [pc, #120]	; (8002e50 <vTaskStartScheduler+0x90>)
 8002dd6:	f7ff fde3 	bl	80029a0 <xTaskCreate>
 8002dda:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002de2:	f000 ff3f 	bl	8003c64 <xTimerCreateTimerTask>
 8002de6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d116      	bne.n	8002e1c <vTaskStartScheduler+0x5c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60bb      	str	r3, [r7, #8]
    }
 8002e00:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <vTaskStartScheduler+0x94>)
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <vTaskStartScheduler+0x98>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <vTaskStartScheduler+0x9c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002e16:	f001 fa35 	bl	8004284 <xPortStartScheduler>
 8002e1a:	e00e      	b.n	8002e3a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d10a      	bne.n	8002e3a <vTaskStartScheduler+0x7a>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	607b      	str	r3, [r7, #4]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <vTaskStartScheduler+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000254 	.word	0x20000254
 8002e4c:	08004aa4 	.word	0x08004aa4
 8002e50:	0800370d 	.word	0x0800370d
 8002e54:	20000250 	.word	0x20000250
 8002e58:	2000023c 	.word	0x2000023c
 8002e5c:	20000234 	.word	0x20000234
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e70:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	20000258 	.word	0x20000258

08002e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e8e:	4b71      	ldr	r3, [pc, #452]	; (8003054 <xTaskResumeAll+0x1d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <xTaskResumeAll+0x2c>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	607b      	str	r3, [r7, #4]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002eac:	f001 fa8c 	bl	80043c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <xTaskResumeAll+0x1d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a67      	ldr	r2, [pc, #412]	; (8003054 <xTaskResumeAll+0x1d4>)
 8002eb8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	4b66      	ldr	r3, [pc, #408]	; (8003054 <xTaskResumeAll+0x1d4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80c0 	bne.w	8003044 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ec4:	4b64      	ldr	r3, [pc, #400]	; (8003058 <xTaskResumeAll+0x1d8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80bb 	beq.w	8003044 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ece:	e08a      	b.n	8002fe6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed0:	4b62      	ldr	r3, [pc, #392]	; (800305c <xTaskResumeAll+0x1dc>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	6a12      	ldr	r2, [r2, #32]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	69d2      	ldr	r2, [r2, #28]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3318      	adds	r3, #24
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d103      	bne.n	8002f06 <xTaskResumeAll+0x86>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	68d2      	ldr	r2, [r2, #12]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3304      	adds	r3, #4
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d103      	bne.n	8002f44 <xTaskResumeAll+0xc4>
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <xTaskResumeAll+0x1e0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	4a3f      	ldr	r2, [pc, #252]	; (8003060 <xTaskResumeAll+0x1e0>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	493e      	ldr	r1, [pc, #248]	; (8003064 <xTaskResumeAll+0x1e4>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	3204      	adds	r2, #4
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1d1a      	adds	r2, r3, #4
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	; (8003064 <xTaskResumeAll+0x1e4>)
 8002faa:	441a      	add	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	615a      	str	r2, [r3, #20]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	492b      	ldr	r1, [pc, #172]	; (8003064 <xTaskResumeAll+0x1e4>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	4827      	ldr	r0, [pc, #156]	; (8003064 <xTaskResumeAll+0x1e4>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4403      	add	r3, r0
 8002fd0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <xTaskResumeAll+0x1e8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d302      	bcc.n	8002fe6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <xTaskResumeAll+0x1ec>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <xTaskResumeAll+0x1dc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f47f af70 	bne.w	8002ed0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ff6:	f000 fc1f 	bl	8003838 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <xTaskResumeAll+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003006:	f000 f847 	bl	8003098 <xTaskIncrementTick>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <xTaskResumeAll+0x1ec>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3b01      	subs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f1      	bne.n	8003006 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <xTaskResumeAll+0x1f0>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <xTaskResumeAll+0x1ec>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <xTaskResumeAll+0x1f4>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003044:	f001 f9f0 	bl	8004428 <vPortExitCritical>

    return xAlreadyYielded;
 8003048:	69bb      	ldr	r3, [r7, #24]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000258 	.word	0x20000258
 8003058:	20000230 	.word	0x20000230
 800305c:	200001f0 	.word	0x200001f0
 8003060:	20000238 	.word	0x20000238
 8003064:	2000015c 	.word	0x2000015c
 8003068:	20000158 	.word	0x20000158
 800306c:	20000244 	.word	0x20000244
 8003070:	20000240 	.word	0x20000240
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <xTaskGetTickCount+0x1c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000234 	.word	0x20000234

08003098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <xTaskIncrementTick+0x200>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80ec 	bne.w	8003284 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <xTaskIncrementTick+0x204>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <xTaskIncrementTick+0x204>)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d120      	bne.n	8003102 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030c0:	4b77      	ldr	r3, [pc, #476]	; (80032a0 <xTaskIncrementTick+0x208>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	607b      	str	r3, [r7, #4]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <xTaskIncrementTick+0x46>
 80030e0:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <xTaskIncrementTick+0x208>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <xTaskIncrementTick+0x20c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6d      	ldr	r2, [pc, #436]	; (80032a0 <xTaskIncrementTick+0x208>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4a6d      	ldr	r2, [pc, #436]	; (80032a4 <xTaskIncrementTick+0x20c>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <xTaskIncrementTick+0x210>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <xTaskIncrementTick+0x210>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	f000 fb9b 	bl	8003838 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <xTaskIncrementTick+0x214>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	f0c0 80a6 	bcc.w	800325a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800310e:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <xTaskIncrementTick+0x208>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <xTaskIncrementTick+0x214>)
 800311a:	f04f 32ff 	mov.w	r2, #4294967295
 800311e:	601a      	str	r2, [r3, #0]
                    break;
 8003120:	e09b      	b.n	800325a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <xTaskIncrementTick+0x208>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	429a      	cmp	r2, r3
 8003138:	d203      	bcs.n	8003142 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800313a:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <xTaskIncrementTick+0x214>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003140:	e08b      	b.n	800325a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	68d2      	ldr	r2, [r2, #12]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	3304      	adds	r3, #4
 8003164:	429a      	cmp	r2, r3
 8003166:	d103      	bne.n	8003170 <xTaskIncrementTick+0xd8>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1e5a      	subs	r2, r3, #1
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01e      	beq.n	80031c6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	6a12      	ldr	r2, [r2, #32]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	69d2      	ldr	r2, [r2, #28]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	3318      	adds	r3, #24
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d103      	bne.n	80031b6 <xTaskIncrementTick+0x11e>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	2201      	movs	r2, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <xTaskIncrementTick+0x218>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	4a36      	ldr	r2, [pc, #216]	; (80032b0 <xTaskIncrementTick+0x218>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4935      	ldr	r1, [pc, #212]	; (80032b4 <xTaskIncrementTick+0x21c>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3304      	adds	r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	3204      	adds	r2, #4
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <xTaskIncrementTick+0x21c>)
 800321c:	441a      	add	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	4923      	ldr	r1, [pc, #140]	; (80032b4 <xTaskIncrementTick+0x21c>)
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c59      	adds	r1, r3, #1
 8003236:	481f      	ldr	r0, [pc, #124]	; (80032b4 <xTaskIncrementTick+0x21c>)
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4403      	add	r3, r0
 8003242:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <xTaskIncrementTick+0x220>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	429a      	cmp	r2, r3
 8003250:	f4ff af5d 	bcc.w	800310e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003254:	2301      	movs	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003258:	e759      	b.n	800310e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <xTaskIncrementTick+0x220>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4914      	ldr	r1, [pc, #80]	; (80032b4 <xTaskIncrementTick+0x21c>)
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d901      	bls.n	8003276 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <xTaskIncrementTick+0x224>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800327e:	2301      	movs	r3, #1
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	e004      	b.n	800328e <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <xTaskIncrementTick+0x228>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <xTaskIncrementTick+0x228>)
 800328c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003290:	4618      	mov	r0, r3
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000258 	.word	0x20000258
 800329c:	20000234 	.word	0x20000234
 80032a0:	200001e8 	.word	0x200001e8
 80032a4:	200001ec 	.word	0x200001ec
 80032a8:	20000248 	.word	0x20000248
 80032ac:	20000250 	.word	0x20000250
 80032b0:	20000238 	.word	0x20000238
 80032b4:	2000015c 	.word	0x2000015c
 80032b8:	20000158 	.word	0x20000158
 80032bc:	20000244 	.word	0x20000244
 80032c0:	20000240 	.word	0x20000240

080032c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <vTaskSwitchContext+0xa4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <vTaskSwitchContext+0xa8>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032d8:	e03f      	b.n	800335a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <vTaskSwitchContext+0xa8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <vTaskSwitchContext+0xac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	f1c3 031f 	rsb	r3, r3, #31
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	491f      	ldr	r1, [pc, #124]	; (8003374 <vTaskSwitchContext+0xb0>)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <vTaskSwitchContext+0x5c>
        __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	607b      	str	r3, [r7, #4]
    }
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <vTaskSwitchContext+0x5a>
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <vTaskSwitchContext+0xb0>)
 800332c:	4413      	add	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	3308      	adds	r3, #8
 8003342:	429a      	cmp	r2, r3
 8003344:	d104      	bne.n	8003350 <vTaskSwitchContext+0x8c>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <vTaskSwitchContext+0xb4>)
 8003358:	6013      	str	r3, [r2, #0]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000258 	.word	0x20000258
 800336c:	20000244 	.word	0x20000244
 8003370:	20000238 	.word	0x20000238
 8003374:	2000015c 	.word	0x2000015c
 8003378:	20000158 	.word	0x20000158

0800337c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	60fb      	str	r3, [r7, #12]
    }
 800339e:	bf00      	nop
 80033a0:	e7fe      	b.n	80033a0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <vTaskPlaceOnEventList+0x44>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3318      	adds	r3, #24
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe ffa2 	bl	80022f4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033b0:	2101      	movs	r1, #1
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f000 fbd6 	bl	8003b64 <prvAddCurrentTaskToDelayedList>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000158 	.word	0x20000158

080033c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	613b      	str	r3, [r7, #16]
    }
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <vTaskPlaceOnEventListRestricted+0x88>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <vTaskPlaceOnEventListRestricted+0x88>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <vTaskPlaceOnEventListRestricted+0x88>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	3218      	adds	r2, #24
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <vTaskPlaceOnEventListRestricted+0x88>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f103 0218 	add.w	r2, r3, #24
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <vTaskPlaceOnEventListRestricted+0x88>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
 8003438:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68b8      	ldr	r0, [r7, #8]
 800343e:	f000 fb91 	bl	8003b64 <prvAddCurrentTaskToDelayedList>
    }
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000158 	.word	0x20000158

08003450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003450:	b480      	push	{r7}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60fb      	str	r3, [r7, #12]
    }
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6a12      	ldr	r2, [r2, #32]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	69d2      	ldr	r2, [r2, #28]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	3318      	adds	r3, #24
 800349e:	429a      	cmp	r2, r3
 80034a0:	d103      	bne.n	80034aa <xTaskRemoveFromEventList+0x5a>
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2200      	movs	r2, #0
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ba:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <xTaskRemoveFromEventList+0x194>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15e      	bne.n	8003580 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	68d2      	ldr	r2, [r2, #12]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	3304      	adds	r3, #4
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d103      	bne.n	80034f0 <xTaskRemoveFromEventList+0xa0>
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	2201      	movs	r2, #1
 8003506:	409a      	lsls	r2, r3
 8003508:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <xTaskRemoveFromEventList+0x198>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	4a36      	ldr	r2, [pc, #216]	; (80035e8 <xTaskRemoveFromEventList+0x198>)
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4935      	ldr	r1, [pc, #212]	; (80035ec <xTaskRemoveFromEventList+0x19c>)
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3304      	adds	r3, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	3204      	adds	r2, #4
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <xTaskRemoveFromEventList+0x19c>)
 8003556:	441a      	add	r2, r3
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	615a      	str	r2, [r3, #20]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	4922      	ldr	r1, [pc, #136]	; (80035ec <xTaskRemoveFromEventList+0x19c>)
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	481e      	ldr	r0, [pc, #120]	; (80035ec <xTaskRemoveFromEventList+0x19c>)
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	6019      	str	r1, [r3, #0]
 800357e:	e01b      	b.n	80035b8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <xTaskRemoveFromEventList+0x1a0>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	61da      	str	r2, [r3, #28]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	621a      	str	r2, [r3, #32]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	3218      	adds	r2, #24
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f103 0218 	add.w	r2, r3, #24
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <xTaskRemoveFromEventList+0x1a0>)
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <xTaskRemoveFromEventList+0x1a0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <xTaskRemoveFromEventList+0x1a0>)
 80035b6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <xTaskRemoveFromEventList+0x1a4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d905      	bls.n	80035d2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <xTaskRemoveFromEventList+0x1a8>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e001      	b.n	80035d6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035d8:	4618      	mov	r0, r3
 80035da:	372c      	adds	r7, #44	; 0x2c
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20000258 	.word	0x20000258
 80035e8:	20000238 	.word	0x20000238
 80035ec:	2000015c 	.word	0x2000015c
 80035f0:	200001f0 	.word	0x200001f0
 80035f4:	20000158 	.word	0x20000158
 80035f8:	20000244 	.word	0x20000244

080035fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <vTaskInternalSetTimeOutState+0x24>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <vTaskInternalSetTimeOutState+0x28>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	20000248 	.word	0x20000248
 8003624:	20000234 	.word	0x20000234

08003628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	613b      	str	r3, [r7, #16]
    }
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
    }
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800366a:	f000 fead 	bl	80043c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800366e:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <xTaskCheckForTimeOut+0xc4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d102      	bne.n	800368e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e026      	b.n	80036dc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <xTaskCheckForTimeOut+0xc8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d00a      	beq.n	80036b0 <xTaskCheckForTimeOut+0x88>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d305      	bcc.n	80036b0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e015      	b.n	80036dc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20b      	bcs.n	80036d2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	1ad2      	subs	r2, r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff98 	bl	80035fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e004      	b.n	80036dc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036dc:	f000 fea4 	bl	8004428 <vPortExitCritical>

    return xReturn;
 80036e0:	69fb      	ldr	r3, [r7, #28]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000234 	.word	0x20000234
 80036f0:	20000248 	.word	0x20000248

080036f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <vTaskMissedYield+0x14>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20000244 	.word	0x20000244

0800370c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003714:	f000 f852 	bl	80037bc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <prvIdleTask+0x28>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d9f9      	bls.n	8003714 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <prvIdleTask+0x2c>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003730:	e7f0      	b.n	8003714 <prvIdleTask+0x8>
 8003732:	bf00      	nop
 8003734:	2000015c 	.word	0x2000015c
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	e00c      	b.n	8003762 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <prvInitialiseTaskLists+0x60>)
 8003754:	4413      	add	r3, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fd7b 	bl	8002252 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3301      	adds	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d9ef      	bls.n	8003748 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003768:	480d      	ldr	r0, [pc, #52]	; (80037a0 <prvInitialiseTaskLists+0x64>)
 800376a:	f7fe fd72 	bl	8002252 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800376e:	480d      	ldr	r0, [pc, #52]	; (80037a4 <prvInitialiseTaskLists+0x68>)
 8003770:	f7fe fd6f 	bl	8002252 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003774:	480c      	ldr	r0, [pc, #48]	; (80037a8 <prvInitialiseTaskLists+0x6c>)
 8003776:	f7fe fd6c 	bl	8002252 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800377a:	480c      	ldr	r0, [pc, #48]	; (80037ac <prvInitialiseTaskLists+0x70>)
 800377c:	f7fe fd69 	bl	8002252 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003780:	480b      	ldr	r0, [pc, #44]	; (80037b0 <prvInitialiseTaskLists+0x74>)
 8003782:	f7fe fd66 	bl	8002252 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <prvInitialiseTaskLists+0x78>)
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <prvInitialiseTaskLists+0x64>)
 800378a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <prvInitialiseTaskLists+0x7c>)
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <prvInitialiseTaskLists+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000015c 	.word	0x2000015c
 80037a0:	200001c0 	.word	0x200001c0
 80037a4:	200001d4 	.word	0x200001d4
 80037a8:	200001f0 	.word	0x200001f0
 80037ac:	20000204 	.word	0x20000204
 80037b0:	2000021c 	.word	0x2000021c
 80037b4:	200001e8 	.word	0x200001e8
 80037b8:	200001ec 	.word	0x200001ec

080037bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c2:	e019      	b.n	80037f8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037c4:	f000 fe00 	bl	80043c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <prvCheckTasksWaitingTermination+0x50>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fdc6 	bl	8002366 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <prvCheckTasksWaitingTermination+0x54>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3b01      	subs	r3, #1
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <prvCheckTasksWaitingTermination+0x54>)
 80037e2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037ec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037ee:	f000 fe1b 	bl	8004428 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f810 	bl	8003818 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e1      	bne.n	80037c4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000204 	.word	0x20000204
 8003810:	20000230 	.word	0x20000230
 8003814:	20000218 	.word	0x20000218

08003818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffd1 	bl	80047cc <vPortFree>
                vPortFree( pxTCB );
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 ffce 	bl	80047cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvResetNextTaskUnblockTime+0x30>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <prvResetNextTaskUnblockTime+0x34>)
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800384e:	e005      	b.n	800385c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <prvResetNextTaskUnblockTime+0x30>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <prvResetNextTaskUnblockTime+0x34>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	200001e8 	.word	0x200001e8
 800386c:	20000250 	.word	0x20000250

08003870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <xTaskGetSchedulerState+0x34>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800387e:	2301      	movs	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	e008      	b.n	8003896 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <xTaskGetSchedulerState+0x38>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800388c:	2302      	movs	r3, #2
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e001      	b.n	8003896 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003896:	687b      	ldr	r3, [r7, #4]
    }
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	2000023c 	.word	0x2000023c
 80038a8:	20000258 	.word	0x20000258

080038ac <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b092      	sub	sp, #72	; 0x48
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80038ba:	2301      	movs	r3, #1
 80038bc:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d90a      	bls.n	80038f6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038f6:	f000 fe49 	bl	800458c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80038fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	623a      	str	r2, [r7, #32]
 8003914:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003916:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	3214      	adds	r2, #20
 8003926:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800392c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800392e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4413      	add	r3, r2
 8003934:	3358      	adds	r3, #88	; 0x58
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	3358      	adds	r3, #88	; 0x58
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d83b      	bhi.n	80039c6 <xTaskGenericNotifyFromISR+0x11a>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <xTaskGenericNotifyFromISR+0xa8>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	080039e5 	.word	0x080039e5
 8003958:	08003969 	.word	0x08003969
 800395c:	08003985 	.word	0x08003985
 8003960:	0800399d 	.word	0x0800399d
 8003964:	080039ab 	.word	0x080039ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	3214      	adds	r2, #20
 800396e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	ea42 0103 	orr.w	r1, r2, r3
 8003978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	3214      	adds	r2, #20
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003982:	e032      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	3214      	adds	r2, #20
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	3214      	adds	r2, #20
 8003996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800399a:	e026      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	3214      	adds	r2, #20
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039a8:	e01f      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80039aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d006      	beq.n	80039c0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	3214      	adds	r2, #20
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80039be:	e014      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80039c4:	e011      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80039c6:	4b60      	ldr	r3, [pc, #384]	; (8003b48 <xTaskGenericNotifyFromISR+0x29c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	61bb      	str	r3, [r7, #24]
    }
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80039e8:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80039ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f040 809e 	bne.w	8003b30 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80039f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	617b      	str	r3, [r7, #20]
    }
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <xTaskGenericNotifyFromISR+0x2a0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15e      	bne.n	8003ad8 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a26:	68d2      	ldr	r2, [r2, #12]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d103      	bne.n	8003a48 <xTaskGenericNotifyFromISR+0x19c>
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <xTaskGenericNotifyFromISR+0x2a4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <xTaskGenericNotifyFromISR+0x2a4>)
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	4939      	ldr	r1, [pc, #228]	; (8003b54 <xTaskGenericNotifyFromISR+0x2a8>)
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a94:	3204      	adds	r2, #4
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <xTaskGenericNotifyFromISR+0x2a8>)
 8003aae:	441a      	add	r2, r3
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	4926      	ldr	r1, [pc, #152]	; (8003b54 <xTaskGenericNotifyFromISR+0x2a8>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1c59      	adds	r1, r3, #1
 8003ac8:	4822      	ldr	r0, [pc, #136]	; (8003b54 <xTaskGenericNotifyFromISR+0x2a8>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4403      	add	r3, r0
 8003ad4:	6019      	str	r1, [r3, #0]
 8003ad6:	e01b      	b.n	8003b10 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <xTaskGenericNotifyFromISR+0x2ac>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae2:	61da      	str	r2, [r3, #28]
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	621a      	str	r2, [r3, #32]
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003af2:	3218      	adds	r2, #24
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af8:	f103 0218 	add.w	r2, r3, #24
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <xTaskGenericNotifyFromISR+0x2ac>)
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <xTaskGenericNotifyFromISR+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <xTaskGenericNotifyFromISR+0x2ac>)
 8003b0e:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <xTaskGenericNotifyFromISR+0x2b0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d908      	bls.n	8003b30 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <xTaskGenericNotifyFromISR+0x2b4>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b3a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3748      	adds	r7, #72	; 0x48
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000234 	.word	0x20000234
 8003b4c:	20000258 	.word	0x20000258
 8003b50:	20000238 	.word	0x20000238
 8003b54:	2000015c 	.word	0x2000015c
 8003b58:	200001f0 	.word	0x200001f0
 8003b5c:	20000158 	.word	0x20000158
 8003b60:	20000244 	.word	0x20000244

08003b64 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fbf3 	bl	8002366 <uxListRemove>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43da      	mvns	r2, r3
 8003b94:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d124      	bne.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d021      	beq.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	3204      	adds	r2, #4
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bee:	e026      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d209      	bcs.n	8003c1c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fb6d 	bl	80022f4 <vListInsert>
}
 8003c1a:	e010      	b.n	8003c3e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7fe fb63 	bl	80022f4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d202      	bcs.n	8003c3e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000234 	.word	0x20000234
 8003c4c:	20000158 	.word	0x20000158
 8003c50:	20000238 	.word	0x20000238
 8003c54:	2000021c 	.word	0x2000021c
 8003c58:	200001ec 	.word	0x200001ec
 8003c5c:	200001e8 	.word	0x200001e8
 8003c60:	20000250 	.word	0x20000250

08003c64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c6e:	f000 fa47 	bl	8004100 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <xTimerCreateTimerTask+0x54>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <xTimerCreateTimerTask+0x58>)
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	2302      	movs	r3, #2
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c88:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <xTimerCreateTimerTask+0x5c>)
 8003c8a:	480e      	ldr	r0, [pc, #56]	; (8003cc4 <xTimerCreateTimerTask+0x60>)
 8003c8c:	f7fe fe88 	bl	80029a0 <xTaskCreate>
 8003c90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	603b      	str	r3, [r7, #0]
    }
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cae:	687b      	ldr	r3, [r7, #4]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000028c 	.word	0x2000028c
 8003cbc:	20000290 	.word	0x20000290
 8003cc0:	08004aac 	.word	0x08004aac
 8003cc4:	08003d6d 	.word	0x08003d6d

08003cc8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cd4:	e008      	b.n	8003ce8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	18d1      	adds	r1, r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f8dd 	bl	8003eb4 <prvInsertTimerInActiveList>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ea      	bne.n	8003cd6 <prvReloadTimer+0xe>
        }
    }
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <prvProcessExpiredTimer+0x5c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fb1e 	bl	8002366 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff ffc3 	bl	8003cc8 <prvReloadTimer>
 8003d42:	e008      	b.n	8003d56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	4798      	blx	r3
    }
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000284 	.word	0x20000284

08003d6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f857 	bl	8003e2c <prvGetNextExpireTime>
 8003d7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4619      	mov	r1, r3
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f803 	bl	8003d90 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d8a:	f000 f8d5 	bl	8003f38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d8e:	e7f1      	b.n	8003d74 <prvTimerTask+0x8>

08003d90 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d9a:	f7ff f863 	bl	8002e64 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f866 	bl	8003e74 <prvSampleTimeNow>
 8003da8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d130      	bne.n	8003e12 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <prvProcessTimerOrBlockTask+0x3c>
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d806      	bhi.n	8003dcc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dbe:	f7ff f85f 	bl	8002e80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffa1 	bl	8003d0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dca:	e024      	b.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <prvProcessTimerOrBlockTask+0x90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <prvProcessTimerOrBlockTask+0x50>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <prvProcessTimerOrBlockTask+0x52>
 8003de0:	2300      	movs	r3, #0
 8003de2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <prvProcessTimerOrBlockTask+0x94>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7fe fda1 	bl	8002938 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003df6:	f7ff f843 	bl	8002e80 <xTaskResumeAll>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <prvProcessTimerOrBlockTask+0x98>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
    }
 8003e10:	e001      	b.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e12:	f7ff f835 	bl	8002e80 <xTaskResumeAll>
    }
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000288 	.word	0x20000288
 8003e24:	2000028c 	.word	0x2000028c
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <prvGetNextExpireTime+0x44>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <prvGetNextExpireTime+0x16>
 8003e3e:	2201      	movs	r2, #1
 8003e40:	e000      	b.n	8003e44 <prvGetNextExpireTime+0x18>
 8003e42:	2200      	movs	r2, #0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <prvGetNextExpireTime+0x44>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e001      	b.n	8003e60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e60:	68fb      	ldr	r3, [r7, #12]
    }
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000284 	.word	0x20000284

08003e74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e7c:	f7ff f8fc 	bl	8003078 <xTaskGetTickCount>
 8003e80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <prvSampleTimeNow+0x3c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d205      	bcs.n	8003e98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e8c:	f000 f912 	bl	80040b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <prvSampleTimeNow+0x3c>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000294 	.word	0x20000294

08003eb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d812      	bhi.n	8003f00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e01b      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <prvInsertTimerInActiveList+0x7c>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe f9fb 	bl	80022f4 <vListInsert>
 8003efe:	e012      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d206      	bcs.n	8003f16 <prvInsertTimerInActiveList+0x62>
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e007      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <prvInsertTimerInActiveList+0x80>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7fe f9e7 	bl	80022f4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f26:	697b      	ldr	r3, [r7, #20]
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000288 	.word	0x20000288
 8003f34:	20000284 	.word	0x20000284

08003f38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f3e:	e0a6      	b.n	800408e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f2c0 80a2 	blt.w	800408c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fa04 	bl	8002366 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff87 	bl	8003e74 <prvSampleTimeNow>
 8003f66:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	f200 808e 	bhi.w	800408e <prvProcessReceivedCommands+0x156>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <prvProcessReceivedCommands+0x40>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003f9d 	.word	0x08003f9d
 8003f80:	08004005 	.word	0x08004005
 8003f84:	08004019 	.word	0x08004019
 8003f88:	08004063 	.word	0x08004063
 8003f8c:	08003f9d 	.word	0x08003f9d
 8003f90:	08003f9d 	.word	0x08003f9d
 8003f94:	08004005 	.word	0x08004005
 8003f98:	08004019 	.word	0x08004019
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	18d1      	adds	r1, r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	69f8      	ldr	r0, [r7, #28]
 8003fbc:	f7ff ff7a 	bl	8003eb4 <prvInsertTimerInActiveList>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	69f8      	ldr	r0, [r7, #28]
 8003fe2:	f7ff fe71 	bl	8003cc8 <prvReloadTimer>
 8003fe6:	e008      	b.n	8003ffa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	69f8      	ldr	r0, [r7, #28]
 8004000:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004002:	e044      	b.n	800408e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004016:	e03a      	b.n	800408e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	617b      	str	r3, [r7, #20]
    }
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	18d1      	adds	r1, r2, r3
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	69f8      	ldr	r0, [r7, #28]
 800405c:	f7ff ff2a 	bl	8003eb4 <prvInsertTimerInActiveList>
                        break;
 8004060:	e015      	b.n	800408e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004070:	69f8      	ldr	r0, [r7, #28]
 8004072:	f000 fbab 	bl	80047cc <vPortFree>
 8004076:	e00a      	b.n	800408e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800408a:	e000      	b.n	800408e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800408c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <prvProcessReceivedCommands+0x178>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f107 0108 	add.w	r1, r7, #8
 8004096:	2200      	movs	r2, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fa91 	bl	80025c0 <xQueueReceive>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f47f af4d 	bne.w	8003f40 <prvProcessReceivedCommands+0x8>
        }
    }
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	2000028c 	.word	0x2000028c

080040b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ba:	e009      	b.n	80040d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <prvSwitchTimerLists+0x44>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040c6:	f04f 31ff 	mov.w	r1, #4294967295
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	f7ff fe1e 	bl	8003d0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <prvSwitchTimerLists+0x44>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <prvSwitchTimerLists+0x44>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvSwitchTimerLists+0x48>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <prvSwitchTimerLists+0x44>)
 80040e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <prvSwitchTimerLists+0x48>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
    }
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000284 	.word	0x20000284
 80040fc:	20000288 	.word	0x20000288

08004100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004104:	f000 f960 	bl	80043c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <prvCheckForValidListAndQueue+0x54>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11d      	bne.n	800414c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004110:	4811      	ldr	r0, [pc, #68]	; (8004158 <prvCheckForValidListAndQueue+0x58>)
 8004112:	f7fe f89e 	bl	8002252 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004116:	4811      	ldr	r0, [pc, #68]	; (800415c <prvCheckForValidListAndQueue+0x5c>)
 8004118:	f7fe f89b 	bl	8002252 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <prvCheckForValidListAndQueue+0x60>)
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <prvCheckForValidListAndQueue+0x58>)
 8004120:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <prvCheckForValidListAndQueue+0x64>)
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <prvCheckForValidListAndQueue+0x5c>)
 8004126:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004128:	2200      	movs	r2, #0
 800412a:	210c      	movs	r1, #12
 800412c:	200a      	movs	r0, #10
 800412e:	f7fe f9d5 	bl	80024dc <xQueueGenericCreate>
 8004132:	4603      	mov	r3, r0
 8004134:	4a07      	ldr	r2, [pc, #28]	; (8004154 <prvCheckForValidListAndQueue+0x54>)
 8004136:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <prvCheckForValidListAndQueue+0x54>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <prvCheckForValidListAndQueue+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4908      	ldr	r1, [pc, #32]	; (8004168 <prvCheckForValidListAndQueue+0x68>)
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fba8 	bl	800289c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800414c:	f000 f96c 	bl	8004428 <vPortExitCritical>
    }
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000028c 	.word	0x2000028c
 8004158:	2000025c 	.word	0x2000025c
 800415c:	20000270 	.word	0x20000270
 8004160:	20000284 	.word	0x20000284
 8004164:	20000288 	.word	0x20000288
 8004168:	08004ab4 	.word	0x08004ab4

0800416c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b04      	subs	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004184:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b04      	subs	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <pxPortInitialiseStack+0x64>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b14      	subs	r3, #20
 80041a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f06f 0202 	mvn.w	r2, #2
 80041ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3b20      	subs	r3, #32
 80041c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	080041d5 	.word	0x080041d5

080041d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <prvTaskExitError+0x54>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d00a      	beq.n	80041fe <prvTaskExitError+0x2a>
        __asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
    }
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <prvTaskExitError+0x28>
        __asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60bb      	str	r3, [r7, #8]
    }
 8004210:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004212:	bf00      	nop
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0fc      	beq.n	8004214 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000010 	.word	0x20000010
 800422c:	00000000 	.word	0x00000000

08004230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <pxCurrentTCBConst2>)
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	6808      	ldr	r0, [r1, #0]
 8004236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	f380 8809 	msr	PSP, r0
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8811 	msr	BASEPRI, r0
 800424a:	4770      	bx	lr
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst2>:
 8004250:	20000158 	.word	0x20000158
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004258:	4808      	ldr	r0, [pc, #32]	; (800427c <prvPortStartFirstTask+0x24>)
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	6800      	ldr	r0, [r0, #0]
 800425e:	f380 8808 	msr	MSP, r0
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8814 	msr	CONTROL, r0
 800426a:	b662      	cpsie	i
 800426c:	b661      	cpsie	f
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	df00      	svc	0
 8004278:	bf00      	nop
 800427a:	0000      	.short	0x0000
 800427c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop

08004284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428a:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <xPortStartScheduler+0x120>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a46      	ldr	r2, [pc, #280]	; (80043a8 <xPortStartScheduler+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10a      	bne.n	80042aa <xPortStartScheduler+0x26>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <xPortStartScheduler+0x120>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <xPortStartScheduler+0x128>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10a      	bne.n	80042ca <xPortStartScheduler+0x46>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <xPortStartScheduler+0x12c>)
 80042cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <xPortStartScheduler+0x130>)
 80042f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f2:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <xPortStartScheduler+0x134>)
 80042f4:	2207      	movs	r2, #7
 80042f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f8:	e009      	b.n	800430e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <xPortStartScheduler+0x134>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <xPortStartScheduler+0x134>)
 8004302:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d0ef      	beq.n	80042fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <xPortStartScheduler+0x134>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00a      	beq.n	800433c <xPortStartScheduler+0xb8>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60bb      	str	r3, [r7, #8]
    }
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <xPortStartScheduler+0x134>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <xPortStartScheduler+0x134>)
 8004344:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <xPortStartScheduler+0x134>)
 8004350:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <xPortStartScheduler+0x138>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <xPortStartScheduler+0x138>)
 8004360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004364:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <xPortStartScheduler+0x138>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <xPortStartScheduler+0x138>)
 800436c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004372:	f000 f8db 	bl	800452c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <xPortStartScheduler+0x13c>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800437c:	f000 f8fa 	bl	8004574 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <xPortStartScheduler+0x140>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <xPortStartScheduler+0x140>)
 8004386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800438a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800438c:	f7ff ff64 	bl	8004258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004390:	f7fe ff98 	bl	80032c4 <vTaskSwitchContext>
    prvTaskExitError();
 8004394:	f7ff ff1e 	bl	80041d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	410fc271 	.word	0x410fc271
 80043ac:	410fc270 	.word	0x410fc270
 80043b0:	e000e400 	.word	0xe000e400
 80043b4:	20000298 	.word	0x20000298
 80043b8:	2000029c 	.word	0x2000029c
 80043bc:	e000ed20 	.word	0xe000ed20
 80043c0:	20000010 	.word	0x20000010
 80043c4:	e000ef34 	.word	0xe000ef34

080043c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
        __asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
    }
 80043e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <vPortEnterCritical+0x58>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3301      	adds	r3, #1
 80043e8:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <vPortEnterCritical+0x58>)
 80043ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <vPortEnterCritical+0x58>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10f      	bne.n	8004414 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <vPortEnterCritical+0x5c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <vPortEnterCritical+0x4c>
        __asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	603b      	str	r3, [r7, #0]
    }
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <vPortEnterCritical+0x4a>
    }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000010 	.word	0x20000010
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <vPortExitCritical+0x50>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <vPortExitCritical+0x24>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	607b      	str	r3, [r7, #4]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <vPortExitCritical+0x50>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <vPortExitCritical+0x50>)
 8004454:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <vPortExitCritical+0x50>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <vPortExitCritical+0x42>
 800445e:	2300      	movs	r3, #0
 8004460:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f383 8811 	msr	BASEPRI, r3
    }
 8004468:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000010 	.word	0x20000010
 800447c:	00000000 	.word	0x00000000

08004480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004480:	f3ef 8009 	mrs	r0, PSP
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <pxCurrentTCBConst>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f01e 0f10 	tst.w	lr, #16
 8004490:	bf08      	it	eq
 8004492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044a4:	f380 8811 	msr	BASEPRI, r0
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f7fe ff08 	bl	80032c4 <vTaskSwitchContext>
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f380 8811 	msr	BASEPRI, r0
 80044bc:	bc09      	pop	{r0, r3}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c6:	f01e 0f10 	tst.w	lr, #16
 80044ca:	bf08      	it	eq
 80044cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044d0:	f380 8809 	msr	PSP, r0
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst>:
 80044e0:	20000158 	.word	0x20000158
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
        __asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
    }
 8004500:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004502:	f7fe fdc9 	bl	8003098 <xTaskIncrementTick>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <SysTick_Handler+0x40>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f383 8811 	msr	BASEPRI, r3
    }
 800451e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <vPortSetupTimerInterrupt+0x34>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <vPortSetupTimerInterrupt+0x38>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vPortSetupTimerInterrupt+0x3c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x40>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <vPortSetupTimerInterrupt+0x44>)
 800454a:	3b01      	subs	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <vPortSetupTimerInterrupt+0x34>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e010 	.word	0xe000e010
 8004564:	e000e018 	.word	0xe000e018
 8004568:	20000000 	.word	0x20000000
 800456c:	10624dd3 	.word	0x10624dd3
 8004570:	e000e014 	.word	0xe000e014

08004574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004584 <vPortEnableVFP+0x10>
 8004578:	6801      	ldr	r1, [r0, #0]
 800457a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800457e:	6001      	str	r1, [r0, #0]
 8004580:	4770      	bx	lr
 8004582:	0000      	.short	0x0000
 8004584:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop

0800458c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d914      	bls.n	80045c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800459e:	4a17      	ldr	r2, [pc, #92]	; (80045fc <vPortValidateInterruptPriority+0x70>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <vPortValidateInterruptPriority+0x74>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	7afa      	ldrb	r2, [r7, #11]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20a      	bcs.n	80045c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
    }
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <vPortValidateInterruptPriority+0x78>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <vPortValidateInterruptPriority+0x7c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d90a      	bls.n	80045ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	603b      	str	r3, [r7, #0]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vPortValidateInterruptPriority+0x60>
    }
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000e3f0 	.word	0xe000e3f0
 8004600:	20000298 	.word	0x20000298
 8004604:	e000ed0c 	.word	0xe000ed0c
 8004608:	2000029c 	.word	0x2000029c

0800460c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004618:	f7fe fc24 	bl	8002e64 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800461c:	4b65      	ldr	r3, [pc, #404]	; (80047b4 <pvPortMalloc+0x1a8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004624:	f000 f934 	bl	8004890 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004628:	4b63      	ldr	r3, [pc, #396]	; (80047b8 <pvPortMalloc+0x1ac>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 80a7 	bne.w	8004784 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02d      	beq.n	8004698 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800463c:	2208      	movs	r2, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d227      	bcs.n	8004698 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004648:	2208      	movs	r2, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d021      	beq.n	800469e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d214      	bcs.n	8004692 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	3308      	adds	r3, #8
 8004670:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <pvPortMalloc+0x92>
        __asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	617b      	str	r3, [r7, #20]
    }
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004696:	e002      	b.n	800469e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e000      	b.n	80046a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800469e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d06e      	beq.n	8004784 <pvPortMalloc+0x178>
 80046a6:	4b45      	ldr	r3, [pc, #276]	; (80047bc <pvPortMalloc+0x1b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d869      	bhi.n	8004784 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <pvPortMalloc+0x1b4>)
 80046b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046b4:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <pvPortMalloc+0x1b4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ba:	e004      	b.n	80046c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <pvPortMalloc+0xcc>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f1      	bne.n	80046bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <pvPortMalloc+0x1a8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	429a      	cmp	r2, r3
 80046e0:	d050      	beq.n	8004784 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2208      	movs	r2, #8
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	2308      	movs	r3, #8
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	429a      	cmp	r2, r3
 8004702:	d91f      	bls.n	8004744 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <pvPortMalloc+0x120>
        __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	613b      	str	r3, [r7, #16]
    }
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f000 f908 	bl	8004954 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004744:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <pvPortMalloc+0x1b0>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <pvPortMalloc+0x1b0>)
 8004750:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <pvPortMalloc+0x1b0>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <pvPortMalloc+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d203      	bcs.n	8004766 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <pvPortMalloc+0x1b0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <pvPortMalloc+0x1b8>)
 8004764:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <pvPortMalloc+0x1ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	431a      	orrs	r2, r3
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <pvPortMalloc+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3301      	adds	r3, #1
 8004780:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <pvPortMalloc+0x1bc>)
 8004782:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004784:	f7fe fb7c 	bl	8002e80 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <pvPortMalloc+0x19c>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
    }
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047a8:	69fb      	ldr	r3, [r7, #28]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20009c2c 	.word	0x20009c2c
 80047b8:	20009c40 	.word	0x20009c40
 80047bc:	20009c30 	.word	0x20009c30
 80047c0:	20009c24 	.word	0x20009c24
 80047c4:	20009c34 	.word	0x20009c34
 80047c8:	20009c38 	.word	0x20009c38

080047cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04d      	beq.n	800487a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047de:	2308      	movs	r3, #8
 80047e0:	425b      	negs	r3, r3
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <vPortFree+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <vPortFree+0x44>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <vPortFree+0x62>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60bb      	str	r3, [r7, #8]
    }
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <vPortFree+0xb8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01e      	beq.n	800487a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11a      	bne.n	800487a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <vPortFree+0xb8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004854:	f7fe fb06 	bl	8002e64 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vPortFree+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4413      	add	r3, r2
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortFree+0xbc>)
 8004864:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004866:	6938      	ldr	r0, [r7, #16]
 8004868:	f000 f874 	bl	8004954 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <vPortFree+0xc0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	4a06      	ldr	r2, [pc, #24]	; (800488c <vPortFree+0xc0>)
 8004874:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004876:	f7fe fb03 	bl	8002e80 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800487a:	bf00      	nop
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20009c40 	.word	0x20009c40
 8004888:	20009c30 	.word	0x20009c30
 800488c:	20009c3c 	.word	0x20009c3c

08004890 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004896:	f649 1384 	movw	r3, #39300	; 0x9984
 800489a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <prvHeapInit+0xac>)
 800489e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3307      	adds	r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	4a1f      	ldr	r2, [pc, #124]	; (800493c <prvHeapInit+0xac>)
 80048c0:	4413      	add	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <prvHeapInit+0xb0>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <prvHeapInit+0xb0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048dc:	2208      	movs	r2, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <prvHeapInit+0xb4>)
 80048f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <prvHeapInit+0xb4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <prvHeapInit+0xb4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <prvHeapInit+0xb4>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <prvHeapInit+0xb8>)
 800491e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <prvHeapInit+0xbc>)
 8004926:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <prvHeapInit+0xc0>)
 800492a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	200002a0 	.word	0x200002a0
 8004940:	20009c24 	.word	0x20009c24
 8004944:	20009c2c 	.word	0x20009c2c
 8004948:	20009c34 	.word	0x20009c34
 800494c:	20009c30 	.word	0x20009c30
 8004950:	20009c40 	.word	0x20009c40

08004954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800495c:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <prvInsertBlockIntoFreeList+0xac>)
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e002      	b.n	8004968 <prvInsertBlockIntoFreeList+0x14>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d8f7      	bhi.n	8004962 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4413      	add	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d108      	bne.n	8004996 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d118      	bne.n	80049dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <prvInsertBlockIntoFreeList+0xb0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d00d      	beq.n	80049d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e008      	b.n	80049e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvInsertBlockIntoFreeList+0xb0>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e003      	b.n	80049e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d002      	beq.n	80049f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20009c24 	.word	0x20009c24
 8004a04:	20009c2c 	.word	0x20009c2c

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f000 f82e 	bl	8004a7c <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08004ac4 	.word	0x08004ac4
 8004a44:	08004ac4 	.word	0x08004ac4
 8004a48:	08004ac4 	.word	0x08004ac4
 8004a4c:	08004ac8 	.word	0x08004ac8

08004a50 <memcpy>:
 8004a50:	440a      	add	r2, r1
 8004a52:	4291      	cmp	r1, r2
 8004a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a58:	d100      	bne.n	8004a5c <memcpy+0xc>
 8004a5a:	4770      	bx	lr
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a66:	4291      	cmp	r1, r2
 8004a68:	d1f9      	bne.n	8004a5e <memcpy+0xe>
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <memset>:
 8004a6c:	4402      	add	r2, r0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memset+0xa>
 8004a74:	4770      	bx	lr
 8004a76:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7a:	e7f9      	b.n	8004a70 <memset+0x4>

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
