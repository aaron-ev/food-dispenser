
foodDispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000144c  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800766c  0800766c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800766c  0800766c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800766c  0800766c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ca0  20000080  080076f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009d20  080076f4  00029d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e10  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032dc  00000000  00000000  00033ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000371a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019203  00000000  00000000  00039440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001512c  00000000  00000000  00052643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098bbe  00000000  00000000  0006776f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010032d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  00100380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006208 	.word	0x08006208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006208 	.word	0x08006208

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <displayShowIniScreen>:
} screenSettingsOptions;

TaskHandle_t xTaskDisplayHandler;

void displayShowIniScreen(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af04      	add	r7, sp, #16
    uint8_t rectFeedX = 30;
 8000286:	231e      	movs	r3, #30
 8000288:	71fb      	strb	r3, [r7, #7]
    uint8_t rectFeedY = TFT_ILI9341_HEIGHT / 2 - 60;
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	71bb      	strb	r3, [r7, #6]
    uint8_t rectFeedW = TFT_ILI9341_WIDTH - (2 * rectFeedX);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000294:	b2db      	uxtb	r3, r3
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	717b      	strb	r3, [r7, #5]
    uint8_t rectFeedH = 60;
 800029a:	233c      	movs	r3, #60	; 0x3c
 800029c:	713b      	strb	r3, [r7, #4]
    uint8_t rectSettingsX = TFT_ILI9341_WIDTH / 2 - 20;
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	70fb      	strb	r3, [r7, #3]
    uint8_t rectSettingsY = TFT_ILI9341_HEIGHT - 70;
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	70bb      	strb	r3, [r7, #2]
    uint8_t rectSettingsW = TFT_ILI9341_WIDTH / 2 + 20;
 80002a6:	238c      	movs	r3, #140	; 0x8c
 80002a8:	707b      	strb	r3, [r7, #1]
    uint8_t rectSettingsH = 40;
 80002aa:	2328      	movs	r3, #40	; 0x28
 80002ac:	703b      	strb	r3, [r7, #0]

    tft_ili9341_fill_screen(BLACK);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f002 fd7c 	bl	8002dac <tft_ili9341_fill_screen>
    /* Option to feed */
    tft_ili9341_fill_rectangle(rectFeedX, rectFeedY, rectFeedW, rectFeedH, ORANGE);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	b298      	uxth	r0, r3
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	b299      	uxth	r1, r3
 80002bc:	797b      	ldrb	r3, [r7, #5]
 80002be:	b29a      	uxth	r2, r3
 80002c0:	793b      	ldrb	r3, [r7, #4]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	f64f 34e4 	movw	r4, #64484	; 0xfbe4
 80002c8:	9400      	str	r4, [sp, #0]
 80002ca:	f002 fcff 	bl	8002ccc <tft_ili9341_fill_rectangle>
    tft_ili9341_send_str(rectFeedX + 50, rectFeedY + 20, "FEED", Font_16x26, WHITE, ORANGE);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	3332      	adds	r3, #50	; 0x32
 80002d4:	b298      	uxth	r0, r3
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3314      	adds	r3, #20
 80002dc:	b299      	uxth	r1, r3
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <displayShowIniScreen+0xdc>)
 80002e0:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 80002e4:	9202      	str	r2, [sp, #8]
 80002e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ea:	9201      	str	r2, [sp, #4]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <displayShowIniScreen+0xe0>)
 80002f4:	f002 fde1 	bl	8002eba <tft_ili9341_send_str>
    /* Option to change the settings */
    tft_ili9341_fill_rectangle(rectSettingsX, rectSettingsY, rectSettingsW, rectSettingsH, BLUE);
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	b298      	uxth	r0, r3
 80002fc:	78bb      	ldrb	r3, [r7, #2]
 80002fe:	b299      	uxth	r1, r3
 8000300:	787b      	ldrb	r3, [r7, #1]
 8000302:	b29a      	uxth	r2, r3
 8000304:	783b      	ldrb	r3, [r7, #0]
 8000306:	b29b      	uxth	r3, r3
 8000308:	241f      	movs	r4, #31
 800030a:	9400      	str	r4, [sp, #0]
 800030c:	f002 fcde 	bl	8002ccc <tft_ili9341_fill_rectangle>
    tft_ili9341_send_str(rectSettingsX + 10, rectSettingsY + 10, "Settings", Font_16x26, WHITE, BLUE);
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	b29b      	uxth	r3, r3
 8000314:	330a      	adds	r3, #10
 8000316:	b298      	uxth	r0, r3
 8000318:	78bb      	ldrb	r3, [r7, #2]
 800031a:	b29b      	uxth	r3, r3
 800031c:	330a      	adds	r3, #10
 800031e:	b299      	uxth	r1, r3
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <displayShowIniScreen+0xdc>)
 8000322:	221f      	movs	r2, #31
 8000324:	9202      	str	r2, [sp, #8]
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	9201      	str	r2, [sp, #4]
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <displayShowIniScreen+0xe4>)
 8000334:	f002 fdc1 	bl	8002eba <tft_ili9341_send_str>
    /* Show cursor in the first rectangle */
    tft_ili9341_fill_rectangle(rectSettingsX - 10, rectSettingsY, 10, 10, GREEN);
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	b29b      	uxth	r3, r3
 800033c:	3b0a      	subs	r3, #10
 800033e:	b298      	uxth	r0, r3
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	b299      	uxth	r1, r3
 8000344:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	230a      	movs	r3, #10
 800034c:	220a      	movs	r2, #10
 800034e:	f002 fcbd 	bl	8002ccc <tft_ili9341_fill_rectangle>
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bd90      	pop	{r4, r7, pc}
 800035a:	bf00      	nop
 800035c:	2000000c 	.word	0x2000000c
 8000360:	08006220 	.word	0x08006220
 8000364:	08006228 	.word	0x08006228

08000368 <feed>:
    tft_ili9341_fill_screen(WHITE);
    tft_ili9341_send_str(0, TFT_ILI9341_HEIGHT / 2, "Display: Ok", Font_16x26, BLUE, WHITE);
}

void feed(uint8_t portions)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
    int i;

    if ((portions == 0) || (portions > DISPENSER_MAX_PORTIONS))
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d002      	beq.n	800037e <feed+0x16>
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b05      	cmp	r3, #5
 800037c:	d905      	bls.n	800038a <feed+0x22>
    {
        dispenserBeep(100, 100, 3);
 800037e:	2203      	movs	r2, #3
 8000380:	2164      	movs	r1, #100	; 0x64
 8000382:	2064      	movs	r0, #100	; 0x64
 8000384:	f000 fa0e 	bl	80007a4 <dispenserBeep>
        return;
 8000388:	e013      	b.n	80003b2 <feed+0x4a>
    }

    for (i = 0; i < portions; i++)
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	e00c      	b.n	80003aa <feed+0x42>
    {
        servoMotorRotate(SERVO_MOTOR_DEGREES_180);
 8000390:	2002      	movs	r0, #2
 8000392:	f000 fced 	bl	8000d70 <servoMotorRotate>
        HAL_Delay(DISPLAY_FEED_DELAY);
 8000396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039a:	f000 fe15 	bl	8000fc8 <HAL_Delay>
        servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fce6 	bl	8000d70 <servoMotorRotate>
    for (i = 0; i < portions; i++)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dbee      	blt.n	8000390 <feed+0x28>
    }
}
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <getIndex>:

uint8_t getIndex(uint8_t option, uint8_t *arr)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	6039      	str	r1, [r7, #0]
 80003c2:	71fb      	strb	r3, [r7, #7]

    if (sizeof(arr) < 1)
    {
        return 0xFF;
    }
    for ( i = 0; i < sizeof(arr); i++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e00c      	b.n	80003e4 <getIndex+0x2c>
    {
        if (arr[i] == arr[option])
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	4413      	add	r3, r2
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	6839      	ldr	r1, [r7, #0]
 80003d6:	440b      	add	r3, r1
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d006      	beq.n	80003ec <getIndex+0x34>
    for ( i = 0; i < sizeof(arr); i++)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3301      	adds	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d9ef      	bls.n	80003ca <getIndex+0x12>
 80003ea:	e000      	b.n	80003ee <getIndex+0x36>
        {
            break;
 80003ec:	bf00      	nop
        }
    }

    return i;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	b2db      	uxtb	r3, r3
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <displayShowSettingsScreen>:

void displayShowSettingsScreen(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af04      	add	r7, sp, #16
    char portions[2];
    uint8_t rectFeedX = 30;
 8000406:	231e      	movs	r3, #30
 8000408:	73fb      	strb	r3, [r7, #15]
    uint8_t rectFeedY = TFT_ILI9341_HEIGHT / 2 - 60;
 800040a:	2364      	movs	r3, #100	; 0x64
 800040c:	73bb      	strb	r3, [r7, #14]
    uint8_t rectFeedW = TFT_ILI9341_WIDTH - (2 * rectFeedX);
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000414:	b2db      	uxtb	r3, r3
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	737b      	strb	r3, [r7, #13]
    uint8_t rectFeedH = 60;
 800041a:	233c      	movs	r3, #60	; 0x3c
 800041c:	733b      	strb	r3, [r7, #12]
    uint8_t rectSettingsX = TFT_ILI9341_WIDTH / 2 - 20;
 800041e:	2364      	movs	r3, #100	; 0x64
 8000420:	72fb      	strb	r3, [r7, #11]
    uint8_t rectSettingsY = TFT_ILI9341_HEIGHT - 70;
 8000422:	23fa      	movs	r3, #250	; 0xfa
 8000424:	72bb      	strb	r3, [r7, #10]
    uint8_t rectSettingsW = TFT_ILI9341_WIDTH / 2 + 20;
 8000426:	238c      	movs	r3, #140	; 0x8c
 8000428:	727b      	strb	r3, [r7, #9]
    uint8_t rectSettingsH = 40;
 800042a:	2328      	movs	r3, #40	; 0x28
 800042c:	723b      	strb	r3, [r7, #8]

    sprintf(portions, "%d", dispenserSettings.portions);
 800042e:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <displayShowSettingsScreen+0x120>)
 8000430:	785b      	ldrb	r3, [r3, #1]
 8000432:	461a      	mov	r2, r3
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	493b      	ldr	r1, [pc, #236]	; (8000524 <displayShowSettingsScreen+0x124>)
 8000438:	4618      	mov	r0, r3
 800043a:	f005 fa85 	bl	8005948 <siprintf>

    tft_ili9341_fill_screen(BLACK);
 800043e:	2000      	movs	r0, #0
 8000440:	f002 fcb4 	bl	8002dac <tft_ili9341_fill_screen>
    /* Show cursor in the first rectangle */
    tft_ili9341_fill_rectangle(rectSettingsX - 10, rectSettingsY, 10, 10, GREEN);
 8000444:	7afb      	ldrb	r3, [r7, #11]
 8000446:	b29b      	uxth	r3, r3
 8000448:	3b0a      	subs	r3, #10
 800044a:	b298      	uxth	r0, r3
 800044c:	7abb      	ldrb	r3, [r7, #10]
 800044e:	b299      	uxth	r1, r3
 8000450:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	230a      	movs	r3, #10
 8000458:	220a      	movs	r2, #10
 800045a:	f002 fc37 	bl	8002ccc <tft_ili9341_fill_rectangle>
    /* Portion option */
    tft_ili9341_fill_rectangle(rectFeedX, rectFeedY, rectFeedW, rectFeedH, ORANGE);
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	b298      	uxth	r0, r3
 8000462:	7bbb      	ldrb	r3, [r7, #14]
 8000464:	b299      	uxth	r1, r3
 8000466:	7b7b      	ldrb	r3, [r7, #13]
 8000468:	b29a      	uxth	r2, r3
 800046a:	7b3b      	ldrb	r3, [r7, #12]
 800046c:	b29b      	uxth	r3, r3
 800046e:	f64f 34e4 	movw	r4, #64484	; 0xfbe4
 8000472:	9400      	str	r4, [sp, #0]
 8000474:	f002 fc2a 	bl	8002ccc <tft_ili9341_fill_rectangle>
    tft_ili9341_send_str(rectFeedX + 50, rectFeedY + 20, portions, Font_16x26, WHITE, ORANGE);
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	b29b      	uxth	r3, r3
 800047c:	3332      	adds	r3, #50	; 0x32
 800047e:	b298      	uxth	r0, r3
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	b29b      	uxth	r3, r3
 8000484:	3314      	adds	r3, #20
 8000486:	b299      	uxth	r1, r3
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <displayShowSettingsScreen+0x128>)
 800048a:	1d3c      	adds	r4, r7, #4
 800048c:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8000490:	9202      	str	r2, [sp, #8]
 8000492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000496:	9201      	str	r2, [sp, #4]
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	9200      	str	r2, [sp, #0]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4622      	mov	r2, r4
 80004a0:	f002 fd0b 	bl	8002eba <tft_ili9341_send_str>
    /* Sound option */
    tft_ili9341_fill_rectangle(rectSettingsX, rectSettingsY, rectSettingsW, rectSettingsH, BLUE);
 80004a4:	7afb      	ldrb	r3, [r7, #11]
 80004a6:	b298      	uxth	r0, r3
 80004a8:	7abb      	ldrb	r3, [r7, #10]
 80004aa:	b299      	uxth	r1, r3
 80004ac:	7a7b      	ldrb	r3, [r7, #9]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	7a3b      	ldrb	r3, [r7, #8]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	241f      	movs	r4, #31
 80004b6:	9400      	str	r4, [sp, #0]
 80004b8:	f002 fc08 	bl	8002ccc <tft_ili9341_fill_rectangle>
    if (dispenserSettings.sound == DISPENSER_SOUND_ON)
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <displayShowSettingsScreen+0x120>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d114      	bne.n	80004ee <displayShowSettingsScreen+0xee>
    {
        tft_ili9341_send_str(rectSettingsX + 10, rectSettingsY + 10, "ON", Font_16x26, WHITE, BLUE);
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	330a      	adds	r3, #10
 80004ca:	b298      	uxth	r0, r3
 80004cc:	7abb      	ldrb	r3, [r7, #10]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	330a      	adds	r3, #10
 80004d2:	b299      	uxth	r1, r3
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <displayShowSettingsScreen+0x128>)
 80004d6:	221f      	movs	r2, #31
 80004d8:	9202      	str	r2, [sp, #8]
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	9201      	str	r2, [sp, #4]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <displayShowSettingsScreen+0x12c>)
 80004e8:	f002 fce7 	bl	8002eba <tft_ili9341_send_str>
    else
    {
        tft_ili9341_send_str(rectSettingsX + 10, rectSettingsY + 10, "OFF", Font_16x26, WHITE, BLUE);
    }
    //TODO: Show back rectangle
}
 80004ec:	e013      	b.n	8000516 <displayShowSettingsScreen+0x116>
        tft_ili9341_send_str(rectSettingsX + 10, rectSettingsY + 10, "OFF", Font_16x26, WHITE, BLUE);
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	330a      	adds	r3, #10
 80004f4:	b298      	uxth	r0, r3
 80004f6:	7abb      	ldrb	r3, [r7, #10]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	330a      	adds	r3, #10
 80004fc:	b299      	uxth	r1, r3
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <displayShowSettingsScreen+0x128>)
 8000500:	221f      	movs	r2, #31
 8000502:	9202      	str	r2, [sp, #8]
 8000504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000508:	9201      	str	r2, [sp, #4]
 800050a:	685a      	ldr	r2, [r3, #4]
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <displayShowSettingsScreen+0x130>)
 8000512:	f002 fcd2 	bl	8002eba <tft_ili9341_send_str>
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	bf00      	nop
 8000520:	200000a4 	.word	0x200000a4
 8000524:	08006290 	.word	0x08006290
 8000528:	2000000c 	.word	0x2000000c
 800052c:	08006294 	.word	0x08006294
 8000530:	08006298 	.word	0x08006298

08000534 <screenSettings>:

void screenSettings(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af02      	add	r7, sp, #8
    uint32_t buttonEvent;
    uint8_t minOption = OPTION_BACK;
 800053a:	2302      	movs	r3, #2
 800053c:	737b      	strb	r3, [r7, #13]
    uint8_t maxOption = OPTION_PORTIONS;
 800053e:	2300      	movs	r3, #0
 8000540:	733b      	strb	r3, [r7, #12]
    uint8_t options [] = {OPTION_PORTIONS, OPTION_SOUND, OPTION_BACK};
 8000542:	4a49      	ldr	r2, [pc, #292]	; (8000668 <screenSettings+0x134>)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	4611      	mov	r1, r2
 800054a:	8019      	strh	r1, [r3, #0]
 800054c:	3302      	adds	r3, #2
 800054e:	0c12      	lsrs	r2, r2, #16
 8000550:	701a      	strb	r2, [r3, #0]
    uint8_t optionIndex = getIndex(maxOption, options);
 8000552:	1d3a      	adds	r2, r7, #4
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff2d 	bl	80003b8 <getIndex>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
    uint8_t optionSelected = options[optionIndex];
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	3310      	adds	r3, #16
 8000566:	443b      	add	r3, r7
 8000568:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800056c:	73bb      	strb	r3, [r7, #14]

    displayShowSettingsScreen();
 800056e:	f7ff ff47 	bl	8000400 <displayShowSettingsScreen>
        /* Wait until a push button is pressed.
         * Notification settings: Index > 0, no clear on entry,
         *                       Clear all events on exit,
         *                       Block until there is an event.
         */
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &buttonEvent, portMAX_DELAY);
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
 8000580:	2100      	movs	r1, #0
 8000582:	2001      	movs	r0, #1
 8000584:	f004 f86e 	bl	8004664 <xTaskGenericNotifyWait>
        /* Handle button ENTER event */
        if ((buttonEvent & BUTTON_EVENT_ENTER) && (optionSelected == OPTION_PORTIONS))
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00f      	beq.n	80005b2 <screenSettings+0x7e>
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10c      	bne.n	80005b2 <screenSettings+0x7e>
        {
            dispenserSettings.portions++;
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <screenSettings+0x138>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <screenSettings+0x138>)
 80005a2:	705a      	strb	r2, [r3, #1]
            if (dispenserSettings.portions == DISPENSER_MAX_PORTIONS)
 80005a4:	4b31      	ldr	r3, [pc, #196]	; (800066c <screenSettings+0x138>)
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d102      	bne.n	80005b2 <screenSettings+0x7e>
            {
                dispenserSettings.portions = 1;
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <screenSettings+0x138>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	705a      	strb	r2, [r3, #1]
            }
            // TODO: update screen;
        }
        if ((buttonEvent & BUTTON_EVENT_ENTER) && (optionSelected == OPTION_SOUND))
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d009      	beq.n	80005d0 <screenSettings+0x9c>
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d106      	bne.n	80005d0 <screenSettings+0x9c>
        {
            /* Toggle the sound state*/
            dispenserSettings.sound ^= 1;
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <screenSettings+0x138>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <screenSettings+0x138>)
 80005ce:	701a      	strb	r2, [r3, #0]
            // TODO: update screen
        }
        if ((buttonEvent & BUTTON_EVENT_ENTER) && (optionSelected == OPTION_BACK))
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <screenSettings+0xac>
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d03e      	beq.n	800065e <screenSettings+0x12a>
        {
            break;
        }
        /* Handle button UP event */
        if (buttonEvent & BUTTON_EVENT_UP && (optionSelected != maxOption))
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00b      	beq.n	8000602 <screenSettings+0xce>
 80005ea:	7bba      	ldrb	r2, [r7, #14]
 80005ec:	7b3b      	ldrb	r3, [r7, #12]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d007      	beq.n	8000602 <screenSettings+0xce>
        {
            optionSelected = options[optionIndex++];
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	73fa      	strb	r2, [r7, #15]
 80005f8:	3310      	adds	r3, #16
 80005fa:	443b      	add	r3, r7
 80005fc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000600:	73bb      	strb	r3, [r7, #14]
        }
        if (buttonEvent & BUTTON_EVENT_UP && (optionSelected == maxOption))
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <screenSettings+0xea>
 800060c:	7bba      	ldrb	r2, [r7, #14]
 800060e:	7b3b      	ldrb	r3, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d104      	bne.n	800061e <screenSettings+0xea>
        {
            dispenserBeep(50, 50, 2);
 8000614:	2202      	movs	r2, #2
 8000616:	2132      	movs	r1, #50	; 0x32
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 f8c3 	bl	80007a4 <dispenserBeep>
        }
        /* Handle button DOWN event */
        if ((buttonEvent & BUTTON_EVENT_DOWN) && (optionSelected != minOption))
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f003 0302 	and.w	r3, r3, #2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00b      	beq.n	8000640 <screenSettings+0x10c>
 8000628:	7bba      	ldrb	r2, [r7, #14]
 800062a:	7b7b      	ldrb	r3, [r7, #13]
 800062c:	429a      	cmp	r2, r3
 800062e:	d007      	beq.n	8000640 <screenSettings+0x10c>
        {
            optionSelected = options[optionIndex--];
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	73fa      	strb	r2, [r7, #15]
 8000636:	3310      	adds	r3, #16
 8000638:	443b      	add	r3, r7
 800063a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800063e:	73bb      	strb	r3, [r7, #14]
        }
        if (buttonEvent & BUTTON_EVENT_DOWN && (optionSelected == minOption))
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d093      	beq.n	8000572 <screenSettings+0x3e>
 800064a:	7bba      	ldrb	r2, [r7, #14]
 800064c:	7b7b      	ldrb	r3, [r7, #13]
 800064e:	429a      	cmp	r2, r3
 8000650:	d18f      	bne.n	8000572 <screenSettings+0x3e>
        {
            dispenserBeep(50, 50, 2);
 8000652:	2202      	movs	r2, #2
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	2032      	movs	r0, #50	; 0x32
 8000658:	f000 f8a4 	bl	80007a4 <dispenserBeep>
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &buttonEvent, portMAX_DELAY);
 800065c:	e789      	b.n	8000572 <screenSettings+0x3e>
            break;
 800065e:	bf00      	nop
        }
    }
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	0800629c 	.word	0x0800629c
 800066c:	200000a4 	.word	0x200000a4

08000670 <vTaskDisplay>:

void vTaskDisplay(void *params)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af04      	add	r7, sp, #16
 8000676:	6078      	str	r0, [r7, #4]
    uint32_t buttonEvent;
    uint8_t cursorPosition = OPTION_FEED;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
        /* Wait until a push button is pressed.
         * Notification settings: Index > 0, no clear on entry,
         *                       Clear all events on exit,
         *                       Block until there is an event.
         */
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &buttonEvent, portMAX_DELAY);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	f04f 32ff 	mov.w	r2, #4294967295
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f003 ffe9 	bl	8004664 <xTaskGenericNotifyWait>
        if ((buttonEvent & BUTTON_EVENT_ENTER) && (cursorPosition == OPTION_FEED))
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01f      	beq.n	80006dc <vTaskDisplay+0x6c>
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d11c      	bne.n	80006dc <vTaskDisplay+0x6c>
        {
            dispenserBeep(100, 100, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	2064      	movs	r0, #100	; 0x64
 80006a8:	f000 f87c 	bl	80007a4 <dispenserBeep>
            /* Update screen with a feed message */
            tft_ili9341_fill_screen(BLACK);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f002 fb7d 	bl	8002dac <tft_ili9341_fill_screen>
            tft_ili9341_send_str(TFT_ILI9341_WIDTH / 4 - 20, TFT_ILI9341_HEIGHT / 2, "Feeding...", Font_16x26, WHITE, BLACK);
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <vTaskDisplay+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	9202      	str	r2, [sp, #8]
 80006b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <vTaskDisplay+0x90>)
 80006c6:	21a0      	movs	r1, #160	; 0xa0
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f002 fbf6 	bl	8002eba <tft_ili9341_send_str>
            feed(dispenserSettings.portions);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <vTaskDisplay+0x94>)
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe48 	bl	8000368 <feed>
            displayShowIniScreen();
 80006d8:	f7ff fdd2 	bl	8000280 <displayShowIniScreen>
        }
        if ((buttonEvent & BUTTON_EVENT_ENTER) && (cursorPosition == OPTION_SETTINGS))
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0ca      	beq.n	800067c <vTaskDisplay+0xc>
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d1c7      	bne.n	800067c <vTaskDisplay+0xc>
        {
            dispenserBeep(100, 100, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2164      	movs	r1, #100	; 0x64
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f000 f857 	bl	80007a4 <dispenserBeep>
            screenSettings();
 80006f6:	f7ff ff1d 	bl	8000534 <screenSettings>
        xTaskNotifyWaitIndexed(BUTTON_INDEX_NOTIFICATION, NO_CLEAR_ON_ENTRY, CLEAR_ALL_ON_EXIT, &buttonEvent, portMAX_DELAY);
 80006fa:	e7bf      	b.n	800067c <vTaskDisplay+0xc>
 80006fc:	2000000c 	.word	0x2000000c
 8000700:	080062a0 	.word	0x080062a0
 8000704:	200000a4 	.word	0x200000a4

08000708 <heartBeatInit>:

/*
* Function to initialize the heart beat low level settings.
*/
static void heartBeatInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

    /* Heart beat: GPIO settings  */
    GPIO_InitStruct.Pin = HEART_BEAT_LED_PIN;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(HEART_BEAT_LED_PORT, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <heartBeatInit+0x38>)
 8000734:	f000 fd4e 	bl	80011d4 <HAL_GPIO_Init>
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40020800 	.word	0x40020800

08000744 <HAL_TIM_PeriodElapsedCallback>:

/*
* Callback to increment the timer for the STM HAL layer.
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    if (timerHandler->Instance == TIM9)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8000756:	f000 fc17 	bl	8000f88 <HAL_IncTick>
    }
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40014000 	.word	0x40014000

08000768 <errorHandler>:

/*
* General handler for all the errors. TODO: Handle individual errors.
*/
void errorHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_WritePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <errorHandler+0x18>)
 8000778:	f000 feb0 	bl	80014dc <HAL_GPIO_WritePin>
 800077c:	e7f8      	b.n	8000770 <errorHandler+0x8>
 800077e:	bf00      	nop
 8000780:	40020800 	.word	0x40020800

08000784 <vTaskHeartBeat>:

/*
* Task to indicate the freeRTOS app is alive.
*/
void vTaskHeartBeat(void *params)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <vTaskHeartBeat+0x1c>)
 8000792:	f000 febc 	bl	800150e <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(HEART_BEAT_BLINK_DELAY));
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f003 f9b9 	bl	8003b10 <vTaskDelay>
        HAL_GPIO_TogglePin(HEART_BEAT_LED_PORT, HEART_BEAT_LED_PIN);
 800079e:	e7f5      	b.n	800078c <vTaskHeartBeat+0x8>
 80007a0:	40020800 	.word	0x40020800

080007a4 <dispenserBeep>:
     HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
     HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
}

void dispenserBeep(uint32_t timeOn, uint32_t timeOff, uint32_t times)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    int i;

    if (times <= 0 || timeOn <= 0 || dispenserSettings.sound == DISPENSER_SOUND_OFF)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01e      	beq.n	80007f4 <dispenserBeep+0x50>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d01b      	beq.n	80007f4 <dispenserBeep+0x50>
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <dispenserBeep+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d017      	beq.n	80007f4 <dispenserBeep+0x50>
    {
        return;
    }

    for ( i = 0; i < times; i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00f      	b.n	80007ea <dispenserBeep+0x46>
    {

        buzzerStart();
 80007ca:	f000 f8d3 	bl	8000974 <buzzerStart>
        HAL_Delay(timeOn);
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 fbfa 	bl	8000fc8 <HAL_Delay>
        buzzerStop();
 80007d4:	f000 f8de 	bl	8000994 <buzzerStop>
        if (times > 1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d902      	bls.n	80007e4 <dispenserBeep+0x40>
        {
            HAL_Delay(timeOff);
 80007de:	68b8      	ldr	r0, [r7, #8]
 80007e0:	f000 fbf2 	bl	8000fc8 <HAL_Delay>
    for ( i = 0; i < times; i++)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8eb      	bhi.n	80007ca <dispenserBeep+0x26>
 80007f2:	e000      	b.n	80007f6 <dispenserBeep+0x52>
        return;
 80007f4:	bf00      	nop
        }
    }
}
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000a4 	.word	0x200000a4

08000800 <testBspBuzzer>:

void testBspBuzzer(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	dispenserBeep(300, 300, 4);
 8000804:	2204      	movs	r2, #4
 8000806:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800080a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800080e:	f7ff ffc9 	bl	80007a4 <dispenserBeep>
	dispenserBeep(200, 200, 3);
 8000812:	2203      	movs	r2, #3
 8000814:	21c8      	movs	r1, #200	; 0xc8
 8000816:	20c8      	movs	r0, #200	; 0xc8
 8000818:	f7ff ffc4 	bl	80007a4 <dispenserBeep>
	dispenserBeep(100, 100, 2);
 800081c:	2202      	movs	r2, #2
 800081e:	2164      	movs	r1, #100	; 0x64
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f7ff ffbf 	bl	80007a4 <dispenserBeep>
    dispenserBeep(50, 0, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	2100      	movs	r1, #0
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f7ff ffba 	bl	80007a4 <dispenserBeep>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <testBspServoMotor>:

void testBspServoMotor(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 3; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e018      	b.n	8000872 <testBspServoMotor+0x3e>
    {
        servoMotorRotate(SERVO_MOTOR_DEGREES_180);
 8000840:	2002      	movs	r0, #2
 8000842:	f000 fa95 	bl	8000d70 <servoMotorRotate>
        dispenserBeep(100, 0, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	2100      	movs	r1, #0
 800084a:	2064      	movs	r0, #100	; 0x64
 800084c:	f7ff ffaa 	bl	80007a4 <dispenserBeep>
        HAL_Delay(250);
 8000850:	20fa      	movs	r0, #250	; 0xfa
 8000852:	f000 fbb9 	bl	8000fc8 <HAL_Delay>
        servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fa8a 	bl	8000d70 <servoMotorRotate>
        dispenserBeep(100, 0, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	2100      	movs	r1, #0
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f7ff ff9f 	bl	80007a4 <dispenserBeep>
        HAL_Delay(250);
 8000866:	20fa      	movs	r0, #250	; 0xfa
 8000868:	f000 fbae 	bl	8000fc8 <HAL_Delay>
    for (i = 0; i < 3; i++)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	dde3      	ble.n	8000840 <testBspServoMotor+0xc>
    }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <testBsp>:

void testBsp(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
    testBspBuzzer();
 8000886:	f7ff ffbb 	bl	8000800 <testBspBuzzer>
    testBspServoMotor();
 800088a:	f7ff ffd3 	bl	8000834 <testBspServoMotor>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <main>:

int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af02      	add	r7, sp, #8
    BaseType_t retVal;
    HAL_StatusTypeDef halStatus;
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800089a:	f000 fb53 	bl	8000f44 <HAL_Init>
    /* Configure the system clock */
    // clkInit(); // system CLK = 16 MHz
    /* Initialize push buttons */
//    pushButtonsInit();
    /* Initialize heart beat led */
    heartBeatInit();
 800089e:	f7ff ff33 	bl	8000708 <heartBeatInit>
    /* Initialize debug console*/
    // consoleInit();
    /* Initialize display */
//    displayInit();
    /* Initialize servomotor */
    halStatus = servoMotorInit();
 80008a2:	f000 fa25 	bl	8000cf0 <servoMotorInit>
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <main+0x20>
    {
        errorHandler();
 80008b0:	f7ff ff5a 	bl	8000768 <errorHandler>
    }
    /* Initialize the buzzer */
    halStatus = buzzerInit();
 80008b4:	f000 f87e 	bl	80009b4 <buzzerInit>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <main+0x32>
    {
        errorHandler();
 80008c2:	f7ff ff51 	bl	8000768 <errorHandler>
    }
    /* Initialize default dispenser settings */
    dispenserSettings.portions = 1;
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <main+0xc4>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	705a      	strb	r2, [r3, #1]
    dispenserSettings.sound = DISPENSER_SOUND_ON;
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <main+0xc4>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
    /* Double beep to indicate all the initializations have finished */
    dispenserBeep(100, 100, 2);
 80008d2:	2202      	movs	r2, #2
 80008d4:	2164      	movs	r1, #100	; 0x64
 80008d6:	2064      	movs	r0, #100	; 0x64
 80008d8:	f7ff ff64 	bl	80007a4 <dispenserBeep>

    /* Test BSP layer */
    #if (TEST_BSP == 1)
        testBsp();
 80008dc:	f7ff ffd1 	bl	8000882 <testBsp>
    #endif

    /* Heart beat task */
    retVal = xTaskCreate(vTaskHeartBeat, "task-heart-beat", configMINIMAL_STACK_SIZE, NULL, HEART_BEAT_PRIORITY_TASK, &xTaskHeartBeatHandler);
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <main+0xc8>)
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2301      	movs	r3, #1
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	2282      	movs	r2, #130	; 0x82
 80008ec:	491c      	ldr	r1, [pc, #112]	; (8000960 <main+0xcc>)
 80008ee:	481d      	ldr	r0, [pc, #116]	; (8000964 <main+0xd0>)
 80008f0:	f002 fefe 	bl	80036f0 <xTaskCreate>
 80008f4:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d110      	bne.n	800091e <main+0x8a>
    {
        goto main_out;
    }
    /* Display task */
    retVal = xTaskCreate(vTaskDisplay, "task-display", configMINIMAL_STACK_SIZE, NULL, DISPLAY_PRIORITY_TASK, &xTaskDisplayHandler);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <main+0xd4>)
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	2302      	movs	r3, #2
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2300      	movs	r3, #0
 8000906:	2282      	movs	r2, #130	; 0x82
 8000908:	4918      	ldr	r1, [pc, #96]	; (800096c <main+0xd8>)
 800090a:	4819      	ldr	r0, [pc, #100]	; (8000970 <main+0xdc>)
 800090c:	f002 fef0 	bl	80036f0 <xTaskCreate>
 8000910:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d104      	bne.n	8000922 <main+0x8e>
    {
        goto main_out;
    }

    vTaskStartScheduler();
 8000918:	f003 f92e 	bl	8003b78 <vTaskStartScheduler>
 800091c:	e002      	b.n	8000924 <main+0x90>
        goto main_out;
 800091e:	bf00      	nop
 8000920:	e000      	b.n	8000924 <main+0x90>
        goto main_out;
 8000922:	bf00      	nop

main_out:
    if (xTaskHeartBeatHandler != NULL)
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <main+0xc8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <main+0xa2>
    {
        vTaskDelete(xTaskHeartBeatHandler);
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <main+0xc8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f003 f859 	bl	80039e8 <vTaskDelete>
    }
    if (xTaskDisplayHandler != NULL)
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <main+0xd4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <main+0xb4>
    {
        vTaskDelete(xTaskDisplayHandler);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <main+0xd4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f850 	bl	80039e8 <vTaskDelete>
    }
    errorHandler();
 8000948:	f7ff ff0e 	bl	8000768 <errorHandler>
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000a4 	.word	0x200000a4
 800095c:	200000a0 	.word	0x200000a0
 8000960:	080062ac 	.word	0x080062ac
 8000964:	08000785 	.word	0x08000785
 8000968:	2000009c 	.word	0x2000009c
 800096c:	080062bc 	.word	0x080062bc
 8000970:	08000671 	.word	0x08000671

08000974 <buzzerStart>:

/*
 * Description: Start the buzzer by starting the hardware timer.
 */
HAL_StatusTypeDef buzzerStart(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Start_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 800097a:	2100      	movs	r1, #0
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <buzzerStart+0x1c>)
 800097e:	f001 f91b 	bl	8001bb8 <HAL_TIM_OC_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 8000986:	79fb      	ldrb	r3, [r7, #7]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000a8 	.word	0x200000a8

08000994 <buzzerStop>:

/*
 * Description: Stop the buzzer by stopping the hardware timer.
 */
HAL_StatusTypeDef buzzerStop(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus;

    halStatus = HAL_TIM_OC_Stop_IT(&buzzerTimHandler, BUZZER_TIM_CHANNEL);
 800099a:	2100      	movs	r1, #0
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <buzzerStop+0x1c>)
 800099e:	f001 fa09 	bl	8001db4 <HAL_TIM_OC_Stop_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    if (halStatus != HAL_OK)
    {
    }
    return halStatus;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000a8 	.word	0x200000a8

080009b4 <buzzerInit>:

/*
 * Description: Initialize TIMER : Output compare mode to produce a square wave.
 */
HAL_StatusTypeDef buzzerInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef timerOCInit = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	77fb      	strb	r3, [r7, #31]

    /* Timer: Base unit settings */
    buzzerTimHandler.Instance = BUZZER_TIM_INSTANCE;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <buzzerInit+0x7c>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
    buzzerTimHandler.Init.Period = BUZZER_TIM_PERIOD;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <buzzerInit+0x7c>)
 80009da:	f04f 32ff 	mov.w	r2, #4294967295
 80009de:	60da      	str	r2, [r3, #12]
    buzzerTimHandler.Init.Prescaler = BUZZER_TIM_PRESCALER;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <buzzerInit+0x7c>)
 80009e2:	220f      	movs	r2, #15
 80009e4:	605a      	str	r2, [r3, #4]
    buzzerTimHandler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <buzzerInit+0x7c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    buzzerTimHandler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <buzzerInit+0x7c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    halStatus = HAL_TIM_OC_Init(&buzzerTimHandler);
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <buzzerInit+0x7c>)
 80009f4:	f001 f890 	bl	8001b18 <HAL_TIM_OC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Timer: Channel settings */
    timerOCInit.OCMode = TIM_OCMODE_TOGGLE;
 80009fc:	2330      	movs	r3, #48	; 0x30
 80009fe:	603b      	str	r3, [r7, #0]
    timerOCInit.OCPolarity = TIM_OCNPOLARITY_HIGH;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
    timerOCInit.Pulse = BUZZER_TIM_PULSE_VALUE;
 8000a04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a08:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_OC_ConfigChannel(&buzzerTimHandler, &timerOCInit, BUZZER_TIM_CHANNEL);
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <buzzerInit+0x7c>)
 8000a12:	f001 fced 	bl	80023f0 <HAL_TIM_OC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
    {
    }

    /* Clear interrupt to not jump to the interrupt handler */
    __HAL_TIM_CLEAR_IT(&buzzerTimHandler, TIM_IT_UPDATE);
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <buzzerInit+0x7c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f06f 0201 	mvn.w	r2, #1
 8000a22:	611a      	str	r2, [r3, #16]

    return halStatus;
 8000a24:	7ffb      	ldrb	r3, [r7, #31]

}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000a8 	.word	0x200000a8

08000a34 <TIM2_IRQHandler>:

/*
* Interrupt handler for the buzzer timer.
*/
void TIM2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&buzzerTimHandler);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM2_IRQHandler+0x10>)
 8000a3a:	f001 fbd1 	bl	80021e0 <HAL_TIM_IRQHandler>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000a8 	.word	0x200000a8

08000a48 <HAL_TIM_OC_DelayElapsedCallback>:

/*
 *  Callback to handle update events and capture compare mode
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *timerHandler)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    static uint32_t ccr1Reg;

    if (timerHandler->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7f1b      	ldrb	r3, [r3, #28]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10d      	bne.n	8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    {
        ccr1Reg = HAL_TIM_ReadCapturedValue(timerHandler, BUZZER_TIM_CHANNEL);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f001 fde6 	bl	800262c <HAL_TIM_ReadCapturedValue>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000a64:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(timerHandler, BUZZER_TIM_CHANNEL, (ccr1Reg + BUZZER_TIM_PULSE_VALUE));
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000f0 	.word	0x200000f0

08000a80 <EXTI0_IRQHandler>:

/*
 * Interrupt handler for push button ENTER.
 */
void EXTI0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_ENTER_GPIO_PIN);
 8000a84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a88:	f000 fd5c 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <EXTI1_IRQHandler>:

/*
 * Interrupt handler for push button UP.
 */
void EXTI1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_GPIO_PIN);
 8000a94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a98:	f000 fd54 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <EXTI2_IRQHandler>:

/*
 * Interrupt handler for push button DOWN.
 */
void EXTI2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_GPIO_PIN);
 8000aa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000aa8:	f000 fd4c 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback to handle push button requests.
 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
    BaseType_t  pxHigherPriorityTaskWoken = pdFALSE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]

    if (pin == BUTTON_ENTER_GPIO_PIN)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac4:	d10b      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x2e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_ENTER, eSetBits, &pxHigherPriorityTaskWoken);
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	2101      	movs	r1, #1
 8000ada:	f003 fe43 	bl	8004764 <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_UP_GPIO_PIN)
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae4:	d10b      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x4e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_UP, eSetBits, &pxHigherPriorityTaskWoken);
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	2300      	movs	r3, #0
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2301      	movs	r3, #1
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	f003 fe33 	bl	8004764 <xTaskGenericNotifyFromISR>
    }
    if (pin == BUTTON_DOWN_GPIO_PIN)
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b04:	d10b      	bne.n	8000b1e <HAL_GPIO_EXTI_Callback+0x6e>
    {
        xTaskNotifyIndexedFromISR(xTaskDisplayHandler, BUTTON_INDEX_NOTIFICATION, BUTTON_EVENT_DOWN, eSetBits, &pxHigherPriorityTaskWoken);
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x78>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2301      	movs	r3, #1
 8000b16:	2202      	movs	r2, #2
 8000b18:	2101      	movs	r1, #1
 8000b1a:	f003 fe23 	bl	8004764 <xTaskGenericNotifyFromISR>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000009c 	.word	0x2000009c

08000b2c <TIM1_BRK_TIM9_IRQHandler>:

/*
 *  Interrupt handler for the HAL time base.
 */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim9);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000b32:	f001 fb55 	bl	80021e0 <HAL_TIM_IRQHandler>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000140 	.word	0x20000140

08000b40 <HAL_MspInit>:

/*
 *   Enable clocks and set NVIC settings.
 */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
    /* Enable clocks for some system settings */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_MspInit+0x104>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <HAL_MspInit+0x104>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <HAL_MspInit+0x104>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <HAL_MspInit+0x104>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <HAL_MspInit+0x104>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <HAL_MspInit+0x104>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
    /* Enable clock for GPIOs being used */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_MspInit+0x104>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <HAL_MspInit+0x104>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_MspInit+0x104>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <HAL_MspInit+0x104>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_MspInit+0x104>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_MspInit+0x104>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_MspInit+0x104>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_MspInit+0x104>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_MspInit+0x104>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /*Enable clock for TIMERS being used */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_MspInit+0x104>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_MspInit+0x104>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_MspInit+0x104>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_MspInit+0x104>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <HAL_MspInit+0x104>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_MspInit+0x104>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x104>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_MspInit+0x104>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x104>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
    /* Set NVIC priority configuration */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 fa9f 	bl	800116a <HAL_NVIC_SetPriorityGrouping>
    /* Enable interrupt for buzzer timer  */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210f      	movs	r1, #15
 8000c30:	201c      	movs	r0, #28
 8000c32:	f000 faa5 	bl	8001180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c36:	201c      	movs	r0, #28
 8000c38:	f000 fabe 	bl	80011b8 <HAL_NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_TIM_OC_MspInit>:

/*
 *   GPIO settings: Buzzer.
 */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *timerHandler)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef buzzerGpioInit = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

    /* BUZZER: GPIO settings */
    buzzerGpioInit.Pin = BUZZER_GPIO_PIN;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
    buzzerGpioInit.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
    buzzerGpioInit.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
    buzzerGpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
    buzzerGpioInit.Alternate = BUZZER_GPIO_ALTERNATE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_INSTANCE, &buzzerGpioInit);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <HAL_TIM_OC_MspInit+0x40>)
 8000c7c:	f000 faaa 	bl	80011d4 <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_TIM_PWM_MspInit>:

/*
 *   GPIO settings: Servo motor.
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *timerHandler)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef servoMotorGpioInit = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

    /* GPIO settings: ServoMotor */
    servoMotorGpioInit.Pin = SERVO_MOTOR_GPIO_PIN;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
    servoMotorGpioInit.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
    servoMotorGpioInit.Alternate = SERVO_MOTOR_GPIO_ALTERNATE;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_INSTANCE, &servoMotorGpioInit);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cb8:	f000 fa8c 	bl	80011d4 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <servoMotorStart>:
static void servoMotorStart(void);
static void servoMotorStop(void);
void servoMotorRotate(ServoPosition position);

static void servoMotorStart(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <servoMotorStart+0x10>)
 8000cd0:	f001 f972 	bl	8001fb8 <HAL_TIM_PWM_Start>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000f4 	.word	0x200000f4

08000cdc <servoMotorStop>:

static void servoMotorStop(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&servoMotorTimHandler, TIM_CHANNEL_1);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4802      	ldr	r0, [pc, #8]	; (8000cec <servoMotorStop+0x10>)
 8000ce4:	f001 fa18 	bl	8002118 <HAL_TIM_PWM_Stop>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000f4 	.word	0x200000f4

08000cf0 <servoMotorInit>:

HAL_StatusTypeDef servoMotorInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef servoMotorChannelConfing = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef halStatus;

    /* TIMER base unit settings: Servo motor */
    servoMotorTimHandler.Instance = SERVO_MOTOR_TIM_INSTANCE;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <servoMotorInit+0x78>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <servoMotorInit+0x7c>)
 8000d0c:	601a      	str	r2, [r3, #0]
    servoMotorTimHandler.Init.Prescaler = SERVO_MOTOR_TIM_BASE_PRESCALER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <servoMotorInit+0x78>)
 8000d10:	220f      	movs	r2, #15
 8000d12:	605a      	str	r2, [r3, #4]
    servoMotorTimHandler.Init.Period = SERVO_MOTOR_TIM_BASE_PERIOD;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <servoMotorInit+0x78>)
 8000d16:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d1a:	60da      	str	r2, [r3, #12]
    halStatus = HAL_TIM_PWM_Init(&servoMotorTimHandler);
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <servoMotorInit+0x78>)
 8000d1e:	f001 f8fb 	bl	8001f18 <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 8000d26:	7ffb      	ldrb	r3, [r7, #31]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <servoMotorInit+0x40>
    {
        errorHandler();
 8000d2c:	f7ff fd1c 	bl	8000768 <errorHandler>
    }

    /* TIMER channel settings: Servo motor */
    servoMotorChannelConfing.OCMode = TIM_OCMODE_PWM1;
 8000d30:	2360      	movs	r3, #96	; 0x60
 8000d32:	603b      	str	r3, [r7, #0]
    servoMotorChannelConfing.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
    servoMotorChannelConfing.Pulse = SERVO_MOTOR_2MS_SIGNAL;
 8000d38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d3c:	607b      	str	r3, [r7, #4]
    halStatus = HAL_TIM_PWM_ConfigChannel(&servoMotorTimHandler, &servoMotorChannelConfing, SERVO_MOTOR_TIM_CHANNEL);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <servoMotorInit+0x78>)
 8000d46:	f001 fbaf 	bl	80024a8 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	77fb      	strb	r3, [r7, #31]
    if (halStatus != HAL_OK)
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <servoMotorInit+0x68>
    {
        errorHandler();
 8000d54:	f7ff fd08 	bl	8000768 <errorHandler>
    }

    /* Go to the default state */
    servoMotorRotate(SERVO_MOTOR_DEGREES_0);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f809 	bl	8000d70 <servoMotorRotate>

    return halStatus;
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000f4 	.word	0x200000f4
 8000d6c:	40000c00 	.word	0x40000c00

08000d70 <servoMotorRotate>:

void servoMotorRotate(ServoPosition position)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
    switch (position)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d012      	beq.n	8000da6 <servoMotorRotate+0x36>
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc16      	bgt.n	8000db2 <servoMotorRotate+0x42>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <servoMotorRotate+0x1e>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d006      	beq.n	8000d9a <servoMotorRotate+0x2a>
                                                           SERVO_MOTOR_1_5MS_SIGNAL);
                                    break;
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
                                                            SERVO_MOTOR_1MS_SIGNAL);
                                    break;
        default : break;
 8000d8c:	e011      	b.n	8000db2 <servoMotorRotate+0x42>
        case SERVO_MOTOR_DEGREES_0: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <servoMotorRotate+0x5c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000d98:	e00c      	b.n	8000db4 <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_90: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <servoMotorRotate+0x5c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000da4:	e006      	b.n	8000db4 <servoMotorRotate+0x44>
        case SERVO_MOTOR_DEGREES_180: __HAL_TIM_SET_COMPARE(&servoMotorTimHandler, TIM_CHANNEL_1,
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <servoMotorRotate+0x5c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 8000db0:	e000      	b.n	8000db4 <servoMotorRotate+0x44>
        default : break;
 8000db2:	bf00      	nop
    }
    servoMotorStart();
 8000db4:	f7ff ff88 	bl	8000cc8 <servoMotorStart>
    HAL_Delay(SERVO_MOTOR_DELAY);
 8000db8:	20fa      	movs	r0, #250	; 0xfa
 8000dba:	f000 f905 	bl	8000fc8 <HAL_Delay>
    servoMotorStop();
 8000dbe:	f7ff ff8d 	bl	8000cdc <servoMotorStop>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000f4 	.word	0x200000f4

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f004 fd62 	bl	80058c8 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20010000 	.word	0x20010000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	2000013c 	.word	0x2000013c
 8000e38:	20009d20 	.word	0x20009d20

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_InitTick+0xd0>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8c:	f107 020c 	add.w	r2, r7, #12
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fb8c 	bl	80015b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e9c:	f000 fb76 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8000ea0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_InitTick+0xd4>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0c9b      	lsrs	r3, r3, #18
 8000eac:	3b01      	subs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_InitTick+0xdc>)
 8000eb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <HAL_InitTick+0xd8>)
 8000ed8:	f000 fd62 	bl	80019a0 <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11b      	bne.n	8000f22 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <HAL_InitTick+0xd8>)
 8000eec:	f000 fdb2 	bl	8001a54 <HAL_TIM_Base_Start_IT>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000efe:	2018      	movs	r0, #24
 8000f00:	f000 f95a 	bl	80011b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d808      	bhi.n	8000f1c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	2018      	movs	r0, #24
 8000f10:	f000 f936 	bl	8001180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_InitTick+0xe0>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e002      	b.n	8000f22 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3730      	adds	r7, #48	; 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	20000140 	.word	0x20000140
 8000f3c:	40014000 	.word	0x40014000
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8fc 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff74 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fde2 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000188 	.word	0x20000188

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000188 	.word	0x20000188

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e159      	b.n	80014a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8148 	bne.w	800149e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a2 	beq.w	800149e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b57      	ldr	r3, [pc, #348]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a56      	ldr	r2, [pc, #344]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <HAL_GPIO_Init+0x2e8>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x2ec>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_GPIO_Init+0x2f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x202>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_GPIO_Init+0x2f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1fe>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <HAL_GPIO_Init+0x2f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1f6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <HAL_GPIO_Init+0x300>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1f2>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x2ec>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x304>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f aea2 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	041a      	lsls	r2, r3, #16
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43d9      	mvns	r1, r3
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	400b      	ands	r3, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff faa4 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_RCC_GetHCLKFreq+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001590:	f7ff fff0 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0b5b      	lsrs	r3, r3, #13
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	080062e4 	.word	0x080062e4

080015b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	220f      	movs	r2, #15
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_RCC_GetClockConfig+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_SPI_Transmit+0x26>
 800163a:	2302      	movs	r3, #2
 800163c:	e125      	b.n	800188a <HAL_SPI_Transmit+0x272>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001646:	f7ff fcb3 	bl	8000fb0 <HAL_GetTick>
 800164a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d002      	beq.n	800165e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800165c:	e10c      	b.n	8001878 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_SPI_Transmit+0x52>
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800166e:	e103      	b.n	8001878 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016b6:	d107      	bne.n	80016c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d007      	beq.n	80016e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ee:	d147      	bne.n	8001780 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_SPI_Transmit+0xea>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d138      	bne.n	8001774 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3302      	adds	r3, #2
 8001710:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001720:	e028      	b.n	8001774 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b02      	cmp	r3, #2
 800172e:	d10f      	bne.n	8001750 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3302      	adds	r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	86da      	strh	r2, [r3, #54]	; 0x36
 800174e:	e011      	b.n	8001774 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_SPI_Transmit+0x156>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d00a      	beq.n	8001774 <HAL_SPI_Transmit+0x15c>
 800175e:	f7ff fc27 	bl	8000fb0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d802      	bhi.n	8001774 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001772:	e081      	b.n	8001878 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1d1      	bne.n	8001722 <HAL_SPI_Transmit+0x10a>
 800177e:	e048      	b.n	8001812 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_SPI_Transmit+0x17a>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d13a      	bne.n	8001808 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	330c      	adds	r3, #12
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80017b2:	e029      	b.n	8001808 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d110      	bne.n	80017e4 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	330c      	adds	r3, #12
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80017e2:	e011      	b.n	8001808 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_SPI_Transmit+0x1ea>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d00a      	beq.n	8001808 <HAL_SPI_Transmit+0x1f0>
 80017f2:	f7ff fbdd 	bl	8000fb0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d802      	bhi.n	8001808 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001806:	e037      	b.n	8001878 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1d0      	bne.n	80017b4 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	2102      	movs	r1, #2
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f838 	bl	8001892 <SPI_WaitFlagStateUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800182c:	e024      	b.n	8001878 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f896 	bl	8001964 <SPI_CheckFlag_BSY>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001848:	e016      	b.n	8001878 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	77fb      	strb	r3, [r7, #31]
 8001874:	e000      	b.n	8001878 <HAL_SPI_Transmit+0x260>
  }

error:
 8001876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001888:	7ffb      	ldrb	r3, [r7, #31]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80018a0:	e04d      	b.n	800193e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d049      	beq.n	800193e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80018b0:	f7ff fb7e 	bl	8000fb0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d83e      	bhi.n	800193e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80018ce:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018d8:	d111      	bne.n	80018fe <SPI_WaitFlagStateUntilTimeout+0x6c>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e2:	d004      	beq.n	80018ee <SPI_WaitFlagStateUntilTimeout+0x5c>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ec:	d107      	bne.n	80018fe <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001906:	d110      	bne.n	800192a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001916:	400b      	ands	r3, r1
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001928:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e00e      	b.n	800195c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4013      	ands	r3, r2
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	429a      	cmp	r2, r3
 800194c:	d101      	bne.n	8001952 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800194e:	2201      	movs	r2, #1
 8001950:	e000      	b.n	8001954 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001952:	2200      	movs	r2, #0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d1a3      	bne.n	80018a2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff ff89 	bl	8001892 <SPI_WaitFlagStateUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	f043 0220 	orr.w	r2, r3, #32
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e000      	b.n	8001998 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e041      	b.n	8001a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f839 	bl	8001a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fe86 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d001      	beq.n	8001a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e044      	b.n	8001af6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d018      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a96:	d013      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_TIM_Base_Start_IT+0xb8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_TIM_Base_Start_IT+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d010      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae2:	e007      	b.n	8001af4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40000800 	.word	0x40000800
 8001b10:	40000c00 	.word	0x40000c00
 8001b14:	40014000 	.word	0x40014000

08001b18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e041      	b.n	8001bae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff f882 	bl	8000c48 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 fdca 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_TIM_OC_Start_IT+0x28>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e022      	b.n	8001c26 <HAL_TIM_OC_Start_IT+0x6e>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d109      	bne.n	8001bfa <HAL_TIM_OC_Start_IT+0x42>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	e015      	b.n	8001c26 <HAL_TIM_OC_Start_IT+0x6e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d109      	bne.n	8001c14 <HAL_TIM_OC_Start_IT+0x5c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e008      	b.n	8001c26 <HAL_TIM_OC_Start_IT+0x6e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0b3      	b.n	8001d96 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <HAL_TIM_OC_Start_IT+0x86>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	e013      	b.n	8001c66 <HAL_TIM_OC_Start_IT+0xae>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d104      	bne.n	8001c4e <HAL_TIM_OC_Start_IT+0x96>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	e00b      	b.n	8001c66 <HAL_TIM_OC_Start_IT+0xae>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d104      	bne.n	8001c5e <HAL_TIM_OC_Start_IT+0xa6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	e003      	b.n	8001c66 <HAL_TIM_OC_Start_IT+0xae>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d841      	bhi.n	8001cf0 <HAL_TIM_OC_Start_IT+0x138>
 8001c6c:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_TIM_OC_Start_IT+0xbc>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001ca9 	.word	0x08001ca9
 8001c78:	08001cf1 	.word	0x08001cf1
 8001c7c:	08001cf1 	.word	0x08001cf1
 8001c80:	08001cf1 	.word	0x08001cf1
 8001c84:	08001cbb 	.word	0x08001cbb
 8001c88:	08001cf1 	.word	0x08001cf1
 8001c8c:	08001cf1 	.word	0x08001cf1
 8001c90:	08001cf1 	.word	0x08001cf1
 8001c94:	08001ccd 	.word	0x08001ccd
 8001c98:	08001cf1 	.word	0x08001cf1
 8001c9c:	08001cf1 	.word	0x08001cf1
 8001ca0:	08001cf1 	.word	0x08001cf1
 8001ca4:	08001cdf 	.word	0x08001cdf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0202 	orr.w	r2, r2, #2
 8001cb6:	60da      	str	r2, [r3, #12]
      break;
 8001cb8:	e01d      	b.n	8001cf6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0204 	orr.w	r2, r2, #4
 8001cc8:	60da      	str	r2, [r3, #12]
      break;
 8001cca:	e014      	b.n	8001cf6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	60da      	str	r2, [r3, #12]
      break;
 8001cdc:	e00b      	b.n	8001cf6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0210 	orr.w	r2, r2, #16
 8001cec:	60da      	str	r2, [r3, #12]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d14b      	bne.n	8001d94 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 feff 	bl	8002b08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d36:	d013      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <HAL_TIM_OC_Start_IT+0x1ec>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_TIM_OC_Start_IT+0x1f4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_TIM_OC_Start_IT+0x1a8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_TIM_OC_Start_IT+0x1f8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d010      	beq.n	8001d94 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40014000 	.word	0x40014000

08001db4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d841      	bhi.n	8001e4c <HAL_TIM_OC_Stop_IT+0x98>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <HAL_TIM_OC_Stop_IT+0x1c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	08001e4d 	.word	0x08001e4d
 8001dd8:	08001e4d 	.word	0x08001e4d
 8001ddc:	08001e4d 	.word	0x08001e4d
 8001de0:	08001e17 	.word	0x08001e17
 8001de4:	08001e4d 	.word	0x08001e4d
 8001de8:	08001e4d 	.word	0x08001e4d
 8001dec:	08001e4d 	.word	0x08001e4d
 8001df0:	08001e29 	.word	0x08001e29
 8001df4:	08001e4d 	.word	0x08001e4d
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e3b 	.word	0x08001e3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0202 	bic.w	r2, r2, #2
 8001e12:	60da      	str	r2, [r3, #12]
      break;
 8001e14:	e01d      	b.n	8001e52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0204 	bic.w	r2, r2, #4
 8001e24:	60da      	str	r2, [r3, #12]
      break;
 8001e26:	e014      	b.n	8001e52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0208 	bic.w	r2, r2, #8
 8001e36:	60da      	str	r2, [r3, #12]
      break;
 8001e38:	e00b      	b.n	8001e52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0210 	bic.w	r2, r2, #16
 8001e48:	60da      	str	r2, [r3, #12]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e50:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fe51 	bl	8002b08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2a      	ldr	r2, [pc, #168]	; (8001f14 <HAL_TIM_OC_Stop_IT+0x160>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d117      	bne.n	8001ea0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_TIM_OC_Stop_IT+0xec>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	f240 4344 	movw	r3, #1092	; 0x444
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_OC_Stop_IT+0xec>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <HAL_TIM_OC_Stop_IT+0x11c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_OC_Stop_IT+0x11c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_TIM_OC_Stop_IT+0x12c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ede:	e013      	b.n	8001f08 <HAL_TIM_OC_Stop_IT+0x154>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d104      	bne.n	8001ef0 <HAL_TIM_OC_Stop_IT+0x13c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eee:	e00b      	b.n	8001f08 <HAL_TIM_OC_Stop_IT+0x154>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d104      	bne.n	8001f00 <HAL_TIM_OC_Stop_IT+0x14c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001efe:	e003      	b.n	8001f08 <HAL_TIM_OC_Stop_IT+0x154>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000

08001f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e041      	b.n	8001fae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fea4 	bl	8000c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 fbca 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_TIM_PWM_Start+0x24>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e022      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d109      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0x3e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	e015      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d109      	bne.n	8002010 <HAL_TIM_PWM_Start+0x58>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e008      	b.n	8002022 <HAL_TIM_PWM_Start+0x6a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e068      	b.n	80020fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_TIM_PWM_Start+0x82>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002038:	e013      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0x92>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	e00b      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0xa2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002058:	e003      	b.n	8002062 <HAL_TIM_PWM_Start+0xaa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd4c 	bl	8002b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <HAL_TIM_PWM_Start+0x14c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d107      	bne.n	800208a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_TIM_PWM_Start+0x14c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x10e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d013      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x10e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_TIM_PWM_Start+0x150>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x10e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_TIM_PWM_Start+0x154>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x10e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_TIM_PWM_Start+0x158>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x10e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_TIM_PWM_Start+0x15c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d111      	bne.n	80020ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d010      	beq.n	80020fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e8:	e007      	b.n	80020fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40010000 	.word	0x40010000
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40014000 	.word	0x40014000

08002118 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fcec 	bl	8002b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_TIM_PWM_Stop+0xc4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d117      	bne.n	800216a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	f241 1311 	movw	r3, #4369	; 0x1111
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_TIM_PWM_Stop+0x52>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	f240 4344 	movw	r3, #1092	; 0x444
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_TIM_PWM_Stop+0x52>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	f241 1311 	movw	r3, #4369	; 0x1111
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10f      	bne.n	800219a <HAL_TIM_PWM_Stop+0x82>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	f240 4344 	movw	r3, #1092	; 0x444
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_TIM_PWM_Stop+0x82>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Stop+0x92>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	e013      	b.n	80021d2 <HAL_TIM_PWM_Stop+0xba>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Stop+0xa2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	e00b      	b.n	80021d2 <HAL_TIM_PWM_Stop+0xba>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d104      	bne.n	80021ca <HAL_TIM_PWM_Stop+0xb2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	e003      	b.n	80021d2 <HAL_TIM_PWM_Stop+0xba>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010000 	.word	0x40010000

080021e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d122      	bne.n	800223c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d11b      	bne.n	800223c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0202 	mvn.w	r2, #2
 800220c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa46 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002228:	e005      	b.n	8002236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fc0c 	bl	8000a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fa49 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b04      	cmp	r3, #4
 8002248:	d122      	bne.n	8002290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11b      	bne.n	8002290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0204 	mvn.w	r2, #4
 8002260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa1c 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fbe2 	bl	8000a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fa1f 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b08      	cmp	r3, #8
 800229c:	d122      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0208 	mvn.w	r2, #8
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f9f2 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fbb8 	bl	8000a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9f5 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0210 	mvn.w	r2, #16
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2208      	movs	r2, #8
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f9c8 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fb8e 	bl	8000a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f9cb 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0201 	mvn.w	r2, #1
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe f9f0 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b80      	cmp	r3, #128	; 0x80
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fbeb 	bl	8002b66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f990 	bl	80026dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d10e      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d107      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0220 	mvn.w	r2, #32
 80023e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fbb5 	bl	8002b52 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_TIM_OC_ConfigChannel+0x1e>
 800240a:	2302      	movs	r3, #2
 800240c:	e048      	b.n	80024a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d839      	bhi.n	8002490 <HAL_TIM_OC_ConfigChannel+0xa0>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_TIM_OC_ConfigChannel+0x34>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002459 	.word	0x08002459
 8002428:	08002491 	.word	0x08002491
 800242c:	08002491 	.word	0x08002491
 8002430:	08002491 	.word	0x08002491
 8002434:	08002467 	.word	0x08002467
 8002438:	08002491 	.word	0x08002491
 800243c:	08002491 	.word	0x08002491
 8002440:	08002491 	.word	0x08002491
 8002444:	08002475 	.word	0x08002475
 8002448:	08002491 	.word	0x08002491
 800244c:	08002491 	.word	0x08002491
 8002450:	08002491 	.word	0x08002491
 8002454:	08002483 	.word	0x08002483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9c6 	bl	80027f0 <TIM_OC1_SetConfig>
      break;
 8002464:	e017      	b.n	8002496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fa25 	bl	80028bc <TIM_OC2_SetConfig>
      break;
 8002472:	e010      	b.n	8002496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa8a 	bl	8002994 <TIM_OC3_SetConfig>
      break;
 8002480:	e009      	b.n	8002496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 faed 	bl	8002a68 <TIM_OC4_SetConfig>
      break;
 800248e:	e002      	b.n	8002496 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
      break;
 8002494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800249e:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0ae      	b.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	f200 809f 	bhi.w	8002614 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002511 	.word	0x08002511
 80024e0:	08002615 	.word	0x08002615
 80024e4:	08002615 	.word	0x08002615
 80024e8:	08002615 	.word	0x08002615
 80024ec:	08002551 	.word	0x08002551
 80024f0:	08002615 	.word	0x08002615
 80024f4:	08002615 	.word	0x08002615
 80024f8:	08002615 	.word	0x08002615
 80024fc:	08002593 	.word	0x08002593
 8002500:	08002615 	.word	0x08002615
 8002504:	08002615 	.word	0x08002615
 8002508:	08002615 	.word	0x08002615
 800250c:	080025d3 	.word	0x080025d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f96a 	bl	80027f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
      break;
 800254e:	e064      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f9b0 	bl	80028bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6999      	ldr	r1, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	619a      	str	r2, [r3, #24]
      break;
 8002590:	e043      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f9fb 	bl	8002994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0208 	orr.w	r2, r2, #8
 80025ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0204 	bic.w	r2, r2, #4
 80025bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
      break;
 80025d0:	e023      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fa45 	bl	8002a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69d9      	ldr	r1, [r3, #28]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	61da      	str	r2, [r3, #28]
      break;
 8002612:	e002      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
      break;
 8002618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002622:	7dfb      	ldrb	r3, [r7, #23]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	d831      	bhi.n	80026a4 <HAL_TIM_ReadCapturedValue+0x78>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	0800267d 	.word	0x0800267d
 800264c:	080026a5 	.word	0x080026a5
 8002650:	080026a5 	.word	0x080026a5
 8002654:	080026a5 	.word	0x080026a5
 8002658:	08002687 	.word	0x08002687
 800265c:	080026a5 	.word	0x080026a5
 8002660:	080026a5 	.word	0x080026a5
 8002664:	080026a5 	.word	0x080026a5
 8002668:	08002691 	.word	0x08002691
 800266c:	080026a5 	.word	0x080026a5
 8002670:	080026a5 	.word	0x080026a5
 8002674:	080026a5 	.word	0x080026a5
 8002678:	0800269b 	.word	0x0800269b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	60fb      	str	r3, [r7, #12]

      break;
 8002684:	e00f      	b.n	80026a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	60fb      	str	r3, [r7, #12]

      break;
 800268e:	e00a      	b.n	80026a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	60fb      	str	r3, [r7, #12]

      break;
 8002698:	e005      	b.n	80026a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	60fb      	str	r3, [r7, #12]

      break;
 80026a2:	e000      	b.n	80026a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80026a4:	bf00      	nop
  }

  return tmpreg;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <TIM_Base_SetConfig+0xe4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00f      	beq.n	8002728 <TIM_Base_SetConfig+0x38>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d00b      	beq.n	8002728 <TIM_Base_SetConfig+0x38>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <TIM_Base_SetConfig+0xe8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <TIM_Base_SetConfig+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a30      	ldr	r2, [pc, #192]	; (80027dc <TIM_Base_SetConfig+0xec>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_Base_SetConfig+0x38>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <TIM_Base_SetConfig+0xf0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d108      	bne.n	800273a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_Base_SetConfig+0xe4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01b      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d017      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <TIM_Base_SetConfig+0xe8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a21      	ldr	r2, [pc, #132]	; (80027dc <TIM_Base_SetConfig+0xec>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00f      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <TIM_Base_SetConfig+0xf0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <TIM_Base_SetConfig+0xf4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <TIM_Base_SetConfig+0xf8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <TIM_Base_SetConfig+0xfc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <TIM_Base_SetConfig+0xe4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800

080027f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0201 	bic.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 0302 	bic.w	r3, r3, #2
 8002838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <TIM_OC1_SetConfig+0xc8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10c      	bne.n	8002866 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0308 	bic.w	r3, r3, #8
 8002852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <TIM_OC1_SetConfig+0xc8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d111      	bne.n	8002892 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40010000 	.word	0x40010000

080028bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0210 	bic.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0320 	bic.w	r3, r3, #32
 8002906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <TIM_OC2_SetConfig+0xd4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10d      	bne.n	8002938 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <TIM_OC2_SetConfig+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d113      	bne.n	8002968 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000

08002994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <TIM_OC3_SetConfig+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10d      	bne.n	8002a0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <TIM_OC3_SetConfig+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40010000 	.word	0x40010000

08002a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <TIM_OC4_SetConfig+0x9c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d109      	bne.n	8002adc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000

08002b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <tft_ili93241_select_chip>:
static void tft_ili9341_set_window(uint16_t x_col, uint16_t y_col, uint16_t x_page, uint16_t y_page);
void tft_ili9341_draw_pixel(uint16_t x, uint16_t y, Color eColor);
void tft_ili9341_fill_screen(Color eColor);

void tft_ili93241_select_chip(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN_NUM, GPIO_PIN_RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b86:	4802      	ldr	r0, [pc, #8]	; (8002b90 <tft_ili93241_select_chip+0x14>)
 8002b88:	f7fe fca8 	bl	80014dc <HAL_GPIO_WritePin>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40020400 	.word	0x40020400

08002b94 <tft_ili93241_unselect_chip>:

void tft_ili93241_unselect_chip(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN_NUM, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9e:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <tft_ili93241_unselect_chip+0x14>)
 8002ba0:	f7fe fc9c 	bl	80014dc <HAL_GPIO_WritePin>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40020400 	.word	0x40020400

08002bac <tft_ili9341_send_cmd>:

    tft_ili93241_unselect_chip();
}

static void tft_ili9341_send_cmd(uint8_t usCmd)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_RESET);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bbc:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <tft_ili9341_send_cmd+0x2c>)
 8002bbe:	f7fe fc8d 	bl	80014dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &usCmd, 1, HAL_MAX_DELAY);
 8002bc2:	1df9      	adds	r1, r7, #7
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4804      	ldr	r0, [pc, #16]	; (8002bdc <tft_ili9341_send_cmd+0x30>)
 8002bcc:	f7fe fd24 	bl	8001618 <HAL_SPI_Transmit>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	2000018c 	.word	0x2000018c

08002be0 <tft_ili9341_send_data>:

static void tft_ili9341_send_data(uint8_t* buff, size_t buff_len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_SET);
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf0:	4810      	ldr	r0, [pc, #64]	; (8002c34 <tft_ili9341_send_data+0x54>)
 8002bf2:	f7fe fc73 	bl	80014dc <HAL_GPIO_WritePin>
    while (buff_len > 0)
 8002bf6:	e015      	b.n	8002c24 <tft_ili9341_send_data+0x44>
    {
        uint16_t chunk_len = buff_len  > 32768 ? 32768 : buff_len ;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	bf28      	it	cs
 8002c00:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8002c04:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&hspi, buff, chunk_len, HAL_MAX_DELAY);
 8002c06:	89fa      	ldrh	r2, [r7, #14]
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	480a      	ldr	r0, [pc, #40]	; (8002c38 <tft_ili9341_send_data+0x58>)
 8002c10:	f7fe fd02 	bl	8001618 <HAL_SPI_Transmit>
        buff_len -= chunk_len;
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	603b      	str	r3, [r7, #0]
        buff += chunk_len;
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	607b      	str	r3, [r7, #4]
    while (buff_len > 0)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e6      	bne.n	8002bf8 <tft_ili9341_send_data+0x18>
    }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40020400 	.word	0x40020400
 8002c38:	2000018c 	.word	0x2000018c

08002c3c <tft_ili9341_set_window>:
{
    tft_ili9341_send_cmd(TFT_CMD_DISPLAY_OFF);
}

static void tft_ili9341_set_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) 
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	80fb      	strh	r3, [r7, #6]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80bb      	strh	r3, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	807b      	strh	r3, [r7, #2]
 8002c56:	4613      	mov	r3, r2
 8002c58:	803b      	strh	r3, [r7, #0]
    /* column address set */
    tft_ili9341_send_cmd(0x2A);
 8002c5a:	202a      	movs	r0, #42	; 0x2a
 8002c5c:	f7ff ffa6 	bl	8002bac <tft_ili9341_send_cmd>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	733b      	strb	r3, [r7, #12]
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	737b      	strb	r3, [r7, #13]
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	73bb      	strb	r3, [r7, #14]
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	73fb      	strb	r3, [r7, #15]
        tft_ili9341_send_data(data, sizeof(data));
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2104      	movs	r1, #4
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ffaa 	bl	8002be0 <tft_ili9341_send_data>
    }

    /* row address set */
    tft_ili9341_send_cmd(0x2B);
 8002c8c:	202b      	movs	r0, #43	; 0x2b
 8002c8e:	f7ff ff8d 	bl	8002bac <tft_ili9341_send_cmd>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8002c92:	88bb      	ldrh	r3, [r7, #4]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	723b      	strb	r3, [r7, #8]
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	727b      	strb	r3, [r7, #9]
 8002ca2:	883b      	ldrh	r3, [r7, #0]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	72bb      	strb	r3, [r7, #10]
 8002cac:	883b      	ldrh	r3, [r7, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	72fb      	strb	r3, [r7, #11]
        tft_ili9341_send_data(data, sizeof(data));
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff91 	bl	8002be0 <tft_ili9341_send_data>
    }

    /* write to RAM */
    tft_ili9341_send_cmd(0x2C);
 8002cbe:	202c      	movs	r0, #44	; 0x2c
 8002cc0:	f7ff ff74 	bl	8002bac <tft_ili9341_send_cmd>
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}

08002ccc <tft_ili9341_fill_rectangle>:

void tft_ili9341_fill_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) 
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	80fb      	strh	r3, [r7, #6]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80bb      	strh	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	803b      	strh	r3, [r7, #0]
    uint8_t data[] = { UPPER_NIBBLE(color), LOWER_NIBBLE(color) };
 8002cea:	8c3b      	ldrh	r3, [r7, #32]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	733b      	strb	r3, [r7, #12]
 8002cf4:	8c3b      	ldrh	r3, [r7, #32]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	737b      	strb	r3, [r7, #13]

    if ( (x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) 
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2bef      	cmp	r3, #239	; 0xef
 8002cfe:	d84c      	bhi.n	8002d9a <tft_ili9341_fill_rectangle+0xce>
 8002d00:	88bb      	ldrh	r3, [r7, #4]
 8002d02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d06:	d248      	bcs.n	8002d9a <tft_ili9341_fill_rectangle+0xce>
    {
        return;
    }
        
    if ( (x + w - 1) >= ILI9341_WIDTH)
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2bf0      	cmp	r3, #240	; 0xf0
 8002d10:	dd03      	ble.n	8002d1a <tft_ili9341_fill_rectangle+0x4e>
    {
        w = ILI9341_WIDTH - x;
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d18:	807b      	strh	r3, [r7, #2]
    }

    if ( (y + h - 1) >= ILI9341_HEIGHT)
 8002d1a:	88ba      	ldrh	r2, [r7, #4]
 8002d1c:	883b      	ldrh	r3, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d24:	dd03      	ble.n	8002d2e <tft_ili9341_fill_rectangle+0x62>
    {
        h = ILI9341_HEIGHT - y;
 8002d26:	88bb      	ldrh	r3, [r7, #4]
 8002d28:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002d2c:	803b      	strh	r3, [r7, #0]
    }

    tft_ili93241_select_chip();
 8002d2e:	f7ff ff25 	bl	8002b7c <tft_ili93241_select_chip>
    tft_ili9341_set_window(x, y, x+w-1, y+h-1);
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4413      	add	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29c      	uxth	r4, r3
 8002d3e:	88ba      	ldrh	r2, [r7, #4]
 8002d40:	883b      	ldrh	r3, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	88b9      	ldrh	r1, [r7, #4]
 8002d4c:	88f8      	ldrh	r0, [r7, #6]
 8002d4e:	4622      	mov	r2, r4
 8002d50:	f7ff ff74 	bl	8002c3c <tft_ili9341_set_window>
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN_NUM, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d5a:	4812      	ldr	r0, [pc, #72]	; (8002da4 <tft_ili9341_fill_rectangle+0xd8>)
 8002d5c:	f7fe fbbe 	bl	80014dc <HAL_GPIO_WritePin>
    for ( y = h; y > 0; y-- )
 8002d60:	883b      	ldrh	r3, [r7, #0]
 8002d62:	80bb      	strh	r3, [r7, #4]
 8002d64:	e013      	b.n	8002d8e <tft_ili9341_fill_rectangle+0xc2>
    {
        for ( x = w; x > 0; x-- )
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	e00a      	b.n	8002d82 <tft_ili9341_fill_rectangle+0xb6>
        {
            HAL_SPI_Transmit(&hspi, data, sizeof(data), HAL_MAX_DELAY);
 8002d6c:	f107 010c 	add.w	r1, r7, #12
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	2202      	movs	r2, #2
 8002d76:	480c      	ldr	r0, [pc, #48]	; (8002da8 <tft_ili9341_fill_rectangle+0xdc>)
 8002d78:	f7fe fc4e 	bl	8001618 <HAL_SPI_Transmit>
        for ( x = w; x > 0; x-- )
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	80fb      	strh	r3, [r7, #6]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f1      	bne.n	8002d6c <tft_ili9341_fill_rectangle+0xa0>
    for ( y = h; y > 0; y-- )
 8002d88:	88bb      	ldrh	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	80bb      	strh	r3, [r7, #4]
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <tft_ili9341_fill_rectangle+0x9a>
        }
    }
    tft_ili93241_unselect_chip();
 8002d94:	f7ff fefe 	bl	8002b94 <tft_ili93241_unselect_chip>
 8002d98:	e000      	b.n	8002d9c <tft_ili9341_fill_rectangle+0xd0>
        return;
 8002d9a:	bf00      	nop
}
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40020400 	.word	0x40020400
 8002da8:	2000018c 	.word	0x2000018c

08002dac <tft_ili9341_fill_screen>:

void tft_ili9341_fill_screen(Color eColor)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
    tft_ili9341_fill_rectangle(0, 0, TFT_ILI9341_WIDTH, TFT_ILI9341_HEIGHT, eColor);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dbe:	22f0      	movs	r2, #240	; 0xf0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff ff82 	bl	8002ccc <tft_ili9341_fill_rectangle>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <tft_ili9341_send_char>:
    tft_ili93241_unselect_chip();
}


static void tft_ili9341_send_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) 
{
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b089      	sub	sp, #36	; 0x24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
 8002dde:	460b      	mov	r3, r1
 8002de0:	80bb      	strh	r3, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    tft_ili9341_set_window(x, y, x+font.width-1, y+font.height-1);
 8002de6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4413      	add	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29c      	uxth	r4, r3
 8002df6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	88bb      	ldrh	r3, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	88b9      	ldrh	r1, [r7, #4]
 8002e08:	88f8      	ldrh	r0, [r7, #6]
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	f7ff ff16 	bl	8002c3c <tft_ili9341_set_window>
    for(i = 0; i < font.height; i++) 
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	e043      	b.n	8002e9e <tft_ili9341_send_char+0xce>
    {
        b = font.data[(ch - 32) * font.height + i];
 8002e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	3b20      	subs	r3, #32
 8002e1c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	440b      	add	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
        for (j = 0; j < font.width; j++) 
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e029      	b.n	8002e8c <tft_ili9341_send_char+0xbc>
        {
            if ((b << j) & 0x8000)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <tft_ili9341_send_char+0x96>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002e48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	743b      	strb	r3, [r7, #16]
 8002e52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	747b      	strb	r3, [r7, #17]
                tft_ili9341_send_data(data, sizeof(data));
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff febe 	bl	8002be0 <tft_ili9341_send_data>
 8002e64:	e00f      	b.n	8002e86 <tft_ili9341_send_char+0xb6>
            } 
            else 
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	733b      	strb	r3, [r7, #12]
 8002e72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	737b      	strb	r3, [r7, #13]
                tft_ili9341_send_data(data, sizeof(data));
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fead 	bl	8002be0 <tft_ili9341_send_data>
        for (j = 0; j < font.width; j++) 
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e90:	461a      	mov	r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d3cf      	bcc.n	8002e38 <tft_ili9341_send_char+0x68>
    for(i = 0; i < font.height; i++) 
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d3b5      	bcc.n	8002e16 <tft_ili9341_send_char+0x46>
            }
        }
    }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002eb6:	b002      	add	sp, #8
 8002eb8:	4770      	bx	lr

08002eba <tft_ili9341_send_str>:

void tft_ili9341_send_str(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002eba:	b082      	sub	sp, #8
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	603a      	str	r2, [r7, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	80bb      	strh	r3, [r7, #4]
    tft_ili93241_select_chip();
 8002ece:	f7ff fe55 	bl	8002b7c <tft_ili93241_select_chip>
    while (*str)
 8002ed2:	e02e      	b.n	8002f32 <tft_ili9341_send_str+0x78>
    {
        if (x + font.width >= ILI9341_WIDTH)
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	7d3a      	ldrb	r2, [r7, #20]
 8002ed8:	4413      	add	r3, r2
 8002eda:	2bef      	cmp	r3, #239	; 0xef
 8002edc:	dd14      	ble.n	8002f08 <tft_ili9341_send_str+0x4e>
        {
            x = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002ee2:	7d7b      	ldrb	r3, [r7, #21]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	88bb      	ldrh	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= ILI9341_HEIGHT) 
 8002eec:	88bb      	ldrh	r3, [r7, #4]
 8002eee:	7d7a      	ldrb	r2, [r7, #21]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ef6:	da21      	bge.n	8002f3c <tft_ili9341_send_str+0x82>
            {
                break;
            }

            if (*str == ' ')
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d103      	bne.n	8002f08 <tft_ili9341_send_str+0x4e>
            {
                /* skip spaces in the beginning of the new line */
                str++;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	603b      	str	r3, [r7, #0]
                continue;
 8002f06:	e014      	b.n	8002f32 <tft_ili9341_send_str+0x78>
            }
        }
        tft_ili9341_send_char(x, y, *str, font, color, bgcolor);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	88b9      	ldrh	r1, [r7, #4]
 8002f0e:	88f8      	ldrh	r0, [r7, #6]
 8002f10:	8c3b      	ldrh	r3, [r7, #32]
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	8bbb      	ldrh	r3, [r7, #28]
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f7ff ff57 	bl	8002dd0 <tft_ili9341_send_char>
        x += font.width;
 8002f22:	7d3b      	ldrb	r3, [r7, #20]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
        str++;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	603b      	str	r3, [r7, #0]
    while (*str)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1cc      	bne.n	8002ed4 <tft_ili9341_send_str+0x1a>
 8002f3a:	e000      	b.n	8002f3e <tft_ili9341_send_str+0x84>
                break;
 8002f3c:	bf00      	nop
    }
    tft_ili93241_unselect_chip();
 8002f3e:	f7ff fe29 	bl	8002b94 <tft_ili93241_unselect_chip>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f4c:	b002      	add	sp, #8
 8002f4e:	4770      	bx	lr

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f54:	480d      	ldr	r0, [pc, #52]	; (8002f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f56:	490e      	ldr	r1, [pc, #56]	; (8002f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f6c:	4c0b      	ldr	r4, [pc, #44]	; (8002f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f7a:	f7fd ff5f 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f002 fca9 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7fd fc87 	bl	8000894 <main>
  bx  lr    
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002f94:	08007674 	.word	0x08007674
  ldr r2, =_sbss
 8002f98:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002f9c:	20009d20 	.word	0x20009d20

08002fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>

08002fa2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f103 0208 	add.w	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fba:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f103 0208 	add.w	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e00c      	b.n	800307e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3308      	adds	r3, #8
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e002      	b.n	8003072 <vListInsert+0x2e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d2f6      	bcs.n	800306c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6892      	ldr	r2, [r2, #8]
 80030cc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6852      	ldr	r2, [r2, #4]
 80030d6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d103      	bne.n	80030ea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003116:	2301      	movs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05d      	beq.n	80031fc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003144:	2b00      	cmp	r3, #0
 8003146:	d059      	beq.n	80031fc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2100      	movs	r1, #0
 8003152:	fba3 2302 	umull	r2, r3, r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d000      	beq.n	800315c <xQueueGenericReset+0x50>
 800315a:	2101      	movs	r1, #1
 800315c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d14c      	bne.n	80031fc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003162:	f002 f891 	bl	8005288 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	441a      	add	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2200      	movs	r2, #0
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	3b01      	subs	r3, #1
 8003194:	6939      	ldr	r1, [r7, #16]
 8003196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	441a      	add	r2, r3
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d114      	bne.n	80031e2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01a      	beq.n	80031f6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	3310      	adds	r3, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f81f 	bl	8004208 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <xQueueGenericReset+0x11c>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	e009      	b.n	80031f6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3310      	adds	r3, #16
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fedb 	bl	8002fa2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3324      	adds	r3, #36	; 0x24
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fed6 	bl	8002fa2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80031f6:	f002 f877 	bl	80052e8 <vPortExitCritical>
 80031fa:	e001      	b.n	8003200 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <xQueueGenericReset+0x110>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	60bb      	str	r3, [r7, #8]
    }
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800321c:	697b      	ldr	r3, [r7, #20]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02e      	beq.n	80032a2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003244:	2100      	movs	r1, #0
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d000      	beq.n	8003254 <xQueueGenericCreate+0x28>
 8003252:	2101      	movs	r1, #1
 8003254:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d123      	bne.n	80032a2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003262:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003266:	d81c      	bhi.n	80032a2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	3350      	adds	r3, #80	; 0x50
 8003276:	4618      	mov	r0, r3
 8003278:	f002 f928 	bl	80054cc <pvPortMalloc>
 800327c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3350      	adds	r3, #80	; 0x50
 800328c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800328e:	79fa      	ldrb	r2, [r7, #7]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f814 	bl	80032c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80032a0:	e00d      	b.n	80032be <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericCreate+0x92>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	613b      	str	r3, [r7, #16]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032be:	69fb      	ldr	r3, [r7, #28]
    }
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e002      	b.n	80032ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032f6:	2101      	movs	r1, #1
 80032f8:	69b8      	ldr	r0, [r7, #24]
 80032fa:	f7ff ff07 	bl	800310c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <xQueueReceive+0x30>
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	623b      	str	r3, [r7, #32]
    }
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <xQueueReceive+0x3e>
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <xQueueReceive+0x42>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <xQueueReceive+0x44>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <xQueueReceive+0x5e>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	61fb      	str	r3, [r7, #28]
    }
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800336e:	f001 f95b 	bl	8004628 <xTaskGetSchedulerState>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <xQueueReceive+0x6e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <xQueueReceive+0x72>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueReceive+0x74>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueReceive+0x8e>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61bb      	str	r3, [r7, #24]
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800339e:	f001 ff73 	bl	8005288 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f000 f88d 	bl	80034d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00f      	beq.n	80033e6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	3310      	adds	r3, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 ff1c 	bl	8004208 <xTaskRemoveFromEventList>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <xQueueReceive+0x1bc>)
 80033d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033e6:	f001 ff7f 	bl	80052e8 <vPortExitCritical>
                return pdPASS;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e069      	b.n	80034c2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80033f4:	f001 ff78 	bl	80052e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e062      	b.n	80034c2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4618      	mov	r0, r3
 8003408:	f000 ffd4 	bl	80043b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003410:	f001 ff6a 	bl	80052e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003414:	f000 fc02 	bl	8003c1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003418:	f001 ff36 	bl	8005288 <vPortEnterCritical>
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003422:	b25b      	sxtb	r3, r3
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d103      	bne.n	8003432 <xQueueReceive+0x122>
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <xQueueReceive+0x138>
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003448:	f001 ff4e 	bl	80052e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800344c:	1d3a      	adds	r2, r7, #4
 800344e:	f107 0310 	add.w	r3, r7, #16
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ffc3 	bl	80043e0 <xTaskCheckForTimeOut>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d123      	bne.n	80034a8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003462:	f000 f8ad 	bl	80035c0 <prvIsQueueEmpty>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fe5d 	bl	8004134 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800347a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347c:	f000 f84e 	bl	800351c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003480:	f000 fbda 	bl	8003c38 <xTaskResumeAll>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d189      	bne.n	800339e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <xQueueReceive+0x1bc>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	e780      	b.n	800339e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800349c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800349e:	f000 f83d 	bl	800351c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80034a2:	f000 fbc9 	bl	8003c38 <xTaskResumeAll>
 80034a6:	e77a      	b.n	800339e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80034a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034aa:	f000 f837 	bl	800351c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80034ae:	f000 fbc3 	bl	8003c38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b4:	f000 f884 	bl	80035c0 <prvIsQueueEmpty>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f43f af6f 	beq.w	800339e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80034c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d303      	bcc.n	8003504 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f002 fa04 	bl	800591c <memcpy>
    }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003524:	f001 feb0 	bl	8005288 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800352e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003530:	e011      	b.n	8003556 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3324      	adds	r3, #36	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fe62 	bl	8004208 <xTaskRemoveFromEventList>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800354a:	f000 ffaf 	bl	80044ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	3b01      	subs	r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dce9      	bgt.n	8003532 <prvUnlockQueue+0x16>
 800355e:	e000      	b.n	8003562 <prvUnlockQueue+0x46>
                        break;
 8003560:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	22ff      	movs	r2, #255	; 0xff
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800356a:	f001 febd 	bl	80052e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800356e:	f001 fe8b 	bl	8005288 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003578:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800357a:	e011      	b.n	80035a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3310      	adds	r3, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fe3d 	bl	8004208 <xTaskRemoveFromEventList>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003594:	f000 ff8a 	bl	80044ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	3b01      	subs	r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dce9      	bgt.n	800357c <prvUnlockQueue+0x60>
 80035a8:	e000      	b.n	80035ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80035aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	22ff      	movs	r2, #255	; 0xff
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80035b4:	f001 fe98 	bl	80052e8 <vPortExitCritical>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035c8:	f001 fe5e 	bl	8005288 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e001      	b.n	80035de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035de:	f001 fe83 	bl	80052e8 <vPortExitCritical>

    return xReturn;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <vQueueAddToRegistry+0x26>
        __asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60fb      	str	r3, [r7, #12]
    }
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d024      	beq.n	8003666 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e01e      	b.n	8003660 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <vQueueAddToRegistry+0x98>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d105      	bne.n	800363e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <vQueueAddToRegistry+0x98>)
 8003638:	4413      	add	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
                    break;
 800363c:	e013      	b.n	8003666 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <vQueueAddToRegistry+0x6e>
 8003644:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <vQueueAddToRegistry+0x98>)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <vQueueAddToRegistry+0x98>)
 8003656:	4413      	add	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b07      	cmp	r3, #7
 8003664:	d9dd      	bls.n	8003622 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	200001e4 	.word	0x200001e4

08003688 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003698:	f001 fdf6 	bl	8005288 <vPortEnterCritical>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d103      	bne.n	80036b2 <vQueueWaitForMessageRestricted+0x2a>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d103      	bne.n	80036c8 <vQueueWaitForMessageRestricted+0x40>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c8:	f001 fe0e 	bl	80052e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd4d 	bl	800417c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff ff1a 	bl	800351c <prvUnlockQueue>
    }
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af04      	add	r7, sp, #16
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fee1 	bl	80054cc <pvPortMalloc>
 800370a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003712:	205c      	movs	r0, #92	; 0x5c
 8003714:	f001 feda 	bl	80054cc <pvPortMalloc>
 8003718:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
 8003726:	e005      	b.n	8003734 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f001 ffaf 	bl	800568c <vPortFree>
 800372e:	e001      	b.n	8003734 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	2300      	movs	r3, #0
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f80e 	bl	8003772 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003756:	69f8      	ldr	r0, [r7, #28]
 8003758:	f000 f8b0 	bl	80038bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e002      	b.n	8003768 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003768:	69bb      	ldr	r3, [r7, #24]
    }
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	21a5      	movs	r1, #165	; 0xa5
 800378c:	f002 f8d4 	bl	8005938 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800379a:	3b01      	subs	r3, #1
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f023 0307 	bic.w	r3, r3, #7
 80037a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <prvInitialiseNewTask+0x58>
        __asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	617b      	str	r3, [r7, #20]
    }
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01f      	beq.n	8003810 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e012      	b.n	80037fc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	7819      	ldrb	r1, [r3, #0]
 80037de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	3334      	adds	r3, #52	; 0x34
 80037e6:	460a      	mov	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d9e9      	bls.n	80037d6 <prvInitialiseNewTask+0x64>
 8003802:	e000      	b.n	8003806 <prvInitialiseNewTask+0x94>
            {
                break;
 8003804:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800380e:	e003      	b.n	8003818 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	2b04      	cmp	r3, #4
 800381c:	d90a      	bls.n	8003834 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	613b      	str	r3, [r7, #16]
    }
 8003830:	bf00      	nop
 8003832:	e7fe      	b.n	8003832 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	2b04      	cmp	r3, #4
 8003838:	d901      	bls.n	800383e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800383a:	2304      	movs	r3, #4
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003848:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fbc4 	bl	8002fe2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	3318      	adds	r3, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fbbf 	bl	8002fe2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003868:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	f1c3 0205 	rsb	r2, r3, #5
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	2208      	movs	r2, #8
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f002 f858 	bl	8005938 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	3358      	adds	r3, #88	; 0x58
 800388c:	2202      	movs	r2, #2
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f002 f851 	bl	8005938 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	68f9      	ldr	r1, [r7, #12]
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f001 fbc2 	bl	8005024 <pxPortInitialiseStack>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038b2:	bf00      	nop
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80038c4:	f001 fce0 	bl	8005288 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80038c8:	4b40      	ldr	r3, [pc, #256]	; (80039cc <prvAddNewTaskToReadyList+0x110>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <prvAddNewTaskToReadyList+0x110>)
 80038d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <prvAddNewTaskToReadyList+0x114>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <prvAddNewTaskToReadyList+0x114>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038e0:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <prvAddNewTaskToReadyList+0x110>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d110      	bne.n	800390a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038e8:	f000 fe04 	bl	80044f4 <prvInitialiseTaskLists>
 80038ec:	e00d      	b.n	800390a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <prvAddNewTaskToReadyList+0x118>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <prvAddNewTaskToReadyList+0x114>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	429a      	cmp	r2, r3
 8003902:	d802      	bhi.n	800390a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003904:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <prvAddNewTaskToReadyList+0x114>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <prvAddNewTaskToReadyList+0x11c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <prvAddNewTaskToReadyList+0x11c>)
 8003912:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <prvAddNewTaskToReadyList+0x11c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <prvAddNewTaskToReadyList+0x120>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <prvAddNewTaskToReadyList+0x120>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	492b      	ldr	r1, [pc, #172]	; (80039e0 <prvAddNewTaskToReadyList+0x124>)
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3304      	adds	r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	3204      	adds	r2, #4
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <prvAddNewTaskToReadyList+0x124>)
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	615a      	str	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4918      	ldr	r1, [pc, #96]	; (80039e0 <prvAddNewTaskToReadyList+0x124>)
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	4814      	ldr	r0, [pc, #80]	; (80039e0 <prvAddNewTaskToReadyList+0x124>)
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4403      	add	r3, r0
 8003998:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800399a:	f001 fca5 	bl	80052e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <prvAddNewTaskToReadyList+0x118>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <prvAddNewTaskToReadyList+0x114>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d207      	bcs.n	80039c4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <prvAddNewTaskToReadyList+0x128>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200002fc 	.word	0x200002fc
 80039d0:	20000224 	.word	0x20000224
 80039d4:	20000308 	.word	0x20000308
 80039d8:	20000318 	.word	0x20000318
 80039dc:	20000304 	.word	0x20000304
 80039e0:	20000228 	.word	0x20000228
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80039f0:	f001 fc4a 	bl	8005288 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <vTaskDelete+0x18>
 80039fa:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <vTaskDelete+0x100>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	e000      	b.n	8003a02 <vTaskDelete+0x1a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fb54 	bl	80030b6 <uxListRemove>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d115      	bne.n	8003a40 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4934      	ldr	r1, [pc, #208]	; (8003aec <vTaskDelete+0x104>)
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <vTaskDelete+0x58>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43da      	mvns	r2, r3
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <vTaskDelete+0x108>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <vTaskDelete+0x108>)
 8003a3e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fb32 	bl	80030b6 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <vTaskDelete+0x10c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <vTaskDelete+0x10c>)
 8003a5a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <vTaskDelete+0x100>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d10b      	bne.n	8003a7e <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4822      	ldr	r0, [pc, #136]	; (8003af8 <vTaskDelete+0x110>)
 8003a6e:	f7ff fac5 	bl	8002ffc <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003a72:	4b22      	ldr	r3, [pc, #136]	; (8003afc <vTaskDelete+0x114>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <vTaskDelete+0x114>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e006      	b.n	8003a8c <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <vTaskDelete+0x118>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <vTaskDelete+0x118>)
 8003a86:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003a88:	f000 fdb2 	bl	80045f0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003a8c:	f001 fc2c 	bl	80052e8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <vTaskDelete+0x100>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d002      	beq.n	8003aa0 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fd98 	bl	80045d0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003aa0:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <vTaskDelete+0x11c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <vTaskDelete+0x100>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d116      	bne.n	8003ae0 <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <vTaskDelete+0x120>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <vTaskDelete+0xe8>
        __asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	60bb      	str	r3, [r7, #8]
    }
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <vTaskDelete+0x124>)
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000224 	.word	0x20000224
 8003aec:	20000228 	.word	0x20000228
 8003af0:	20000304 	.word	0x20000304
 8003af4:	20000318 	.word	0x20000318
 8003af8:	200002d0 	.word	0x200002d0
 8003afc:	200002e4 	.word	0x200002e4
 8003b00:	200002fc 	.word	0x200002fc
 8003b04:	20000308 	.word	0x20000308
 8003b08:	20000324 	.word	0x20000324
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <vTaskDelay+0x60>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <vTaskDelay+0x30>
        __asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	60bb      	str	r3, [r7, #8]
    }
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003b40:	f000 f86c 	bl	8003c1c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b44:	2100      	movs	r1, #0
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 ff68 	bl	8004a1c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003b4c:	f000 f874 	bl	8003c38 <xTaskResumeAll>
 8003b50:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <vTaskDelay+0x64>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000324 	.word	0x20000324
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <vTaskStartScheduler+0x88>)
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	2282      	movs	r2, #130	; 0x82
 8003b8a:	491e      	ldr	r1, [pc, #120]	; (8003c04 <vTaskStartScheduler+0x8c>)
 8003b8c:	481e      	ldr	r0, [pc, #120]	; (8003c08 <vTaskStartScheduler+0x90>)
 8003b8e:	f7ff fdaf 	bl	80036f0 <xTaskCreate>
 8003b92:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003b9a:	f000 ffbf 	bl	8004b1c <xTimerCreateTimerTask>
 8003b9e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d116      	bne.n	8003bd4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	60bb      	str	r3, [r7, #8]
    }
 8003bb8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <vTaskStartScheduler+0x94>)
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <vTaskStartScheduler+0x98>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <vTaskStartScheduler+0x9c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003bce:	f001 fab9 	bl	8005144 <xPortStartScheduler>
 8003bd2:	e00e      	b.n	8003bf2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d10a      	bne.n	8003bf2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	607b      	str	r3, [r7, #4]
    }
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <vTaskStartScheduler+0xa0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000320 	.word	0x20000320
 8003c04:	080062cc 	.word	0x080062cc
 8003c08:	080044c5 	.word	0x080044c5
 8003c0c:	2000031c 	.word	0x2000031c
 8003c10:	20000308 	.word	0x20000308
 8003c14:	20000300 	.word	0x20000300
 8003c18:	20000014 	.word	0x20000014

08003c1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <vTaskSuspendAll+0x18>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <vTaskSuspendAll+0x18>)
 8003c28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000324 	.word	0x20000324

08003c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003c46:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <xTaskResumeAll+0x1d4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xTaskResumeAll+0x2c>
        __asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	607b      	str	r3, [r7, #4]
    }
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003c64:	f001 fb10 	bl	8005288 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <xTaskResumeAll+0x1d4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <xTaskResumeAll+0x1d4>)
 8003c70:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c72:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <xTaskResumeAll+0x1d4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 80c0 	bne.w	8003dfc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <xTaskResumeAll+0x1d8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80bb 	beq.w	8003dfc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c86:	e08a      	b.n	8003d9e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c88:	4b62      	ldr	r3, [pc, #392]	; (8003e14 <xTaskResumeAll+0x1dc>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	6a12      	ldr	r2, [r2, #32]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	69d2      	ldr	r2, [r2, #28]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d103      	bne.n	8003cbe <xTaskResumeAll+0x86>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	68d2      	ldr	r2, [r2, #12]
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	6892      	ldr	r2, [r2, #8]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d103      	bne.n	8003cfc <xTaskResumeAll+0xc4>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	615a      	str	r2, [r3, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <xTaskResumeAll+0x1e0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <xTaskResumeAll+0x1e0>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	493e      	ldr	r1, [pc, #248]	; (8003e1c <xTaskResumeAll+0x1e4>)
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3304      	adds	r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	3204      	adds	r2, #4
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4a2e      	ldr	r2, [pc, #184]	; (8003e1c <xTaskResumeAll+0x1e4>)
 8003d62:	441a      	add	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	615a      	str	r2, [r3, #20]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	492b      	ldr	r1, [pc, #172]	; (8003e1c <xTaskResumeAll+0x1e4>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	4827      	ldr	r0, [pc, #156]	; (8003e1c <xTaskResumeAll+0x1e4>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4403      	add	r3, r0
 8003d88:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <xTaskResumeAll+0x1e8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003d98:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <xTaskResumeAll+0x1ec>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <xTaskResumeAll+0x1dc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f47f af70 	bne.w	8003c88 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003dae:	f000 fc1f 	bl	80045f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <xTaskResumeAll+0x1f0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d010      	beq.n	8003de0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003dbe:	f000 f847 	bl	8003e50 <xTaskIncrementTick>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <xTaskResumeAll+0x1ec>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f1      	bne.n	8003dbe <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <xTaskResumeAll+0x1f0>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <xTaskResumeAll+0x1ec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <xTaskResumeAll+0x1f4>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003dfc:	f001 fa74 	bl	80052e8 <vPortExitCritical>

    return xAlreadyYielded;
 8003e00:	69bb      	ldr	r3, [r7, #24]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000324 	.word	0x20000324
 8003e10:	200002fc 	.word	0x200002fc
 8003e14:	200002bc 	.word	0x200002bc
 8003e18:	20000304 	.word	0x20000304
 8003e1c:	20000228 	.word	0x20000228
 8003e20:	20000224 	.word	0x20000224
 8003e24:	20000310 	.word	0x20000310
 8003e28:	2000030c 	.word	0x2000030c
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <xTaskGetTickCount+0x1c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003e3c:	687b      	ldr	r3, [r7, #4]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000300 	.word	0x20000300

08003e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5a:	4b7d      	ldr	r3, [pc, #500]	; (8004050 <xTaskIncrementTick+0x200>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 80ec 	bne.w	800403c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e64:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <xTaskIncrementTick+0x204>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003e6c:	4a79      	ldr	r2, [pc, #484]	; (8004054 <xTaskIncrementTick+0x204>)
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d120      	bne.n	8003eba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003e78:	4b77      	ldr	r3, [pc, #476]	; (8004058 <xTaskIncrementTick+0x208>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <xTaskIncrementTick+0x48>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	607b      	str	r3, [r7, #4]
    }
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xTaskIncrementTick+0x46>
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <xTaskIncrementTick+0x208>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	4b6f      	ldr	r3, [pc, #444]	; (800405c <xTaskIncrementTick+0x20c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <xTaskIncrementTick+0x208>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4a6d      	ldr	r2, [pc, #436]	; (800405c <xTaskIncrementTick+0x20c>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <xTaskIncrementTick+0x210>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a6b      	ldr	r2, [pc, #428]	; (8004060 <xTaskIncrementTick+0x210>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	f000 fb9b 	bl	80045f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <xTaskIncrementTick+0x214>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f0c0 80a6 	bcc.w	8004012 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec6:	4b64      	ldr	r3, [pc, #400]	; (8004058 <xTaskIncrementTick+0x208>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <xTaskIncrementTick+0x214>)
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	601a      	str	r2, [r3, #0]
                    break;
 8003ed8:	e09b      	b.n	8004012 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eda:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <xTaskIncrementTick+0x208>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d203      	bcs.n	8003efa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <xTaskIncrementTick+0x214>)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003ef8:	e08b      	b.n	8004012 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	68d2      	ldr	r2, [r2, #12]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	6892      	ldr	r2, [r2, #8]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d103      	bne.n	8003f28 <xTaskIncrementTick+0xd8>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	615a      	str	r2, [r3, #20]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01e      	beq.n	8003f7e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	6a12      	ldr	r2, [r2, #32]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	69d2      	ldr	r2, [r2, #28]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3318      	adds	r3, #24
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d103      	bne.n	8003f6e <xTaskIncrementTick+0x11e>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2200      	movs	r2, #0
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	2201      	movs	r2, #1
 8003f84:	409a      	lsls	r2, r3
 8003f86:	4b38      	ldr	r3, [pc, #224]	; (8004068 <xTaskIncrementTick+0x218>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	4a36      	ldr	r2, [pc, #216]	; (8004068 <xTaskIncrementTick+0x218>)
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4935      	ldr	r1, [pc, #212]	; (800406c <xTaskIncrementTick+0x21c>)
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	3204      	adds	r2, #4
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <xTaskIncrementTick+0x21c>)
 8003fd4:	441a      	add	r2, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	615a      	str	r2, [r3, #20]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	4923      	ldr	r1, [pc, #140]	; (800406c <xTaskIncrementTick+0x21c>)
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	481f      	ldr	r0, [pc, #124]	; (800406c <xTaskIncrementTick+0x21c>)
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4403      	add	r3, r0
 8003ffa:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <xTaskIncrementTick+0x220>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	429a      	cmp	r2, r3
 8004008:	f4ff af5d 	bcc.w	8003ec6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004010:	e759      	b.n	8003ec6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <xTaskIncrementTick+0x220>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4914      	ldr	r1, [pc, #80]	; (800406c <xTaskIncrementTick+0x21c>)
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d901      	bls.n	800402e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 800402a:	2301      	movs	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <xTaskIncrementTick+0x224>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e004      	b.n	8004046 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <xTaskIncrementTick+0x228>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <xTaskIncrementTick+0x228>)
 8004044:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000324 	.word	0x20000324
 8004054:	20000300 	.word	0x20000300
 8004058:	200002b4 	.word	0x200002b4
 800405c:	200002b8 	.word	0x200002b8
 8004060:	20000314 	.word	0x20000314
 8004064:	2000031c 	.word	0x2000031c
 8004068:	20000304 	.word	0x20000304
 800406c:	20000228 	.word	0x20000228
 8004070:	20000224 	.word	0x20000224
 8004074:	20000310 	.word	0x20000310
 8004078:	2000030c 	.word	0x2000030c

0800407c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004082:	4b27      	ldr	r3, [pc, #156]	; (8004120 <vTaskSwitchContext+0xa4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <vTaskSwitchContext+0xa8>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004090:	e03f      	b.n	8004112 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <vTaskSwitchContext+0xa8>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <vTaskSwitchContext+0xac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	f1c3 031f 	rsb	r3, r3, #31
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	491f      	ldr	r1, [pc, #124]	; (800412c <vTaskSwitchContext+0xb0>)
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
    }
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vTaskSwitchContext+0x5a>
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <vTaskSwitchContext+0xb0>)
 80040e4:	4413      	add	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	3308      	adds	r3, #8
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d104      	bne.n	8004108 <vTaskSwitchContext+0x8c>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <vTaskSwitchContext+0xb4>)
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000324 	.word	0x20000324
 8004124:	20000310 	.word	0x20000310
 8004128:	20000304 	.word	0x20000304
 800412c:	20000228 	.word	0x20000228
 8004130:	20000224 	.word	0x20000224

08004134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
    }
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <vTaskPlaceOnEventList+0x44>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3318      	adds	r3, #24
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe ff6e 	bl	8003044 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004168:	2101      	movs	r1, #1
 800416a:	6838      	ldr	r0, [r7, #0]
 800416c:	f000 fc56 	bl	8004a1c <prvAddCurrentTaskToDelayedList>
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000224 	.word	0x20000224

0800417c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	613b      	str	r3, [r7, #16]
    }
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <vTaskPlaceOnEventListRestricted+0x88>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	61da      	str	r2, [r3, #28]
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <vTaskPlaceOnEventListRestricted+0x88>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	6892      	ldr	r2, [r2, #8]
 80041ba:	621a      	str	r2, [r3, #32]
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <vTaskPlaceOnEventListRestricted+0x88>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	3218      	adds	r2, #24
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <vTaskPlaceOnEventListRestricted+0x88>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f103 0218 	add.w	r2, r3, #24
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <vTaskPlaceOnEventListRestricted+0x88>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295
 80041f0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68b8      	ldr	r0, [r7, #8]
 80041f6:	f000 fc11 	bl	8004a1c <prvAddCurrentTaskToDelayedList>
    }
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000224 	.word	0x20000224

08004208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004208:	b480      	push	{r7}
 800420a:	b08b      	sub	sp, #44	; 0x2c
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	60fb      	str	r3, [r7, #12]
    }
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	6a12      	ldr	r2, [r2, #32]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	69d2      	ldr	r2, [r2, #28]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	3318      	adds	r3, #24
 8004256:	429a      	cmp	r2, r3
 8004258:	d103      	bne.n	8004262 <xTaskRemoveFromEventList+0x5a>
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	2200      	movs	r2, #0
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <xTaskRemoveFromEventList+0x194>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d15e      	bne.n	8004338 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	68d2      	ldr	r2, [r2, #12]
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	6a3a      	ldr	r2, [r7, #32]
 8004290:	6892      	ldr	r2, [r2, #8]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	3304      	adds	r3, #4
 800429c:	429a      	cmp	r2, r3
 800429e:	d103      	bne.n	80042a8 <xTaskRemoveFromEventList+0xa0>
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <xTaskRemoveFromEventList+0x198>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <xTaskRemoveFromEventList+0x198>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4935      	ldr	r1, [pc, #212]	; (80043a4 <xTaskRemoveFromEventList+0x19c>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3304      	adds	r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	3204      	adds	r2, #4
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <xTaskRemoveFromEventList+0x19c>)
 800430e:	441a      	add	r2, r3
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	615a      	str	r2, [r3, #20]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	4922      	ldr	r1, [pc, #136]	; (80043a4 <xTaskRemoveFromEventList+0x19c>)
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	481e      	ldr	r0, [pc, #120]	; (80043a4 <xTaskRemoveFromEventList+0x19c>)
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4403      	add	r3, r0
 8004334:	6019      	str	r1, [r3, #0]
 8004336:	e01b      	b.n	8004370 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <xTaskRemoveFromEventList+0x1a0>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	61da      	str	r2, [r3, #28]
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	621a      	str	r2, [r3, #32]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	3218      	adds	r2, #24
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f103 0218 	add.w	r2, r3, #24
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <xTaskRemoveFromEventList+0x1a0>)
 8004364:	629a      	str	r2, [r3, #40]	; 0x28
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <xTaskRemoveFromEventList+0x1a0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <xTaskRemoveFromEventList+0x1a0>)
 800436e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <xTaskRemoveFromEventList+0x1a4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	429a      	cmp	r2, r3
 800437c:	d905      	bls.n	800438a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800437e:	2301      	movs	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <xTaskRemoveFromEventList+0x1a8>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e001      	b.n	800438e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004390:	4618      	mov	r0, r3
 8004392:	372c      	adds	r7, #44	; 0x2c
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000324 	.word	0x20000324
 80043a0:	20000304 	.word	0x20000304
 80043a4:	20000228 	.word	0x20000228
 80043a8:	200002bc 	.word	0x200002bc
 80043ac:	20000224 	.word	0x20000224
 80043b0:	20000310 	.word	0x20000310

080043b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <vTaskInternalSetTimeOutState+0x24>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <vTaskInternalSetTimeOutState+0x28>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	20000314 	.word	0x20000314
 80043dc:	20000300 	.word	0x20000300

080043e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	613b      	str	r3, [r7, #16]
    }
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60fb      	str	r3, [r7, #12]
    }
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004422:	f000 ff31 	bl	8005288 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004426:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <xTaskCheckForTimeOut+0xc4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	e026      	b.n	8004494 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <xTaskCheckForTimeOut+0xc8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d00a      	beq.n	8004468 <xTaskCheckForTimeOut+0x88>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	429a      	cmp	r2, r3
 800445a:	d305      	bcc.n	8004468 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800445c:	2301      	movs	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e015      	b.n	8004494 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20b      	bcs.n	800448a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad2      	subs	r2, r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ff98 	bl	80043b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e004      	b.n	8004494 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004494:	f000 ff28 	bl	80052e8 <vPortExitCritical>

    return xReturn;
 8004498:	69fb      	ldr	r3, [r7, #28]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000300 	.word	0x20000300
 80044a8:	20000314 	.word	0x20000314

080044ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <vTaskMissedYield+0x14>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000310 	.word	0x20000310

080044c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80044cc:	f000 f852 	bl	8004574 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <prvIdleTask+0x28>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d9f9      	bls.n	80044cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <prvIdleTask+0x2c>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80044e8:	e7f0      	b.n	80044cc <prvIdleTask+0x8>
 80044ea:	bf00      	nop
 80044ec:	20000228 	.word	0x20000228
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e00c      	b.n	800451a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <prvInitialiseTaskLists+0x60>)
 800450c:	4413      	add	r3, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fd47 	bl	8002fa2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3301      	adds	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d9ef      	bls.n	8004500 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004520:	480d      	ldr	r0, [pc, #52]	; (8004558 <prvInitialiseTaskLists+0x64>)
 8004522:	f7fe fd3e 	bl	8002fa2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004526:	480d      	ldr	r0, [pc, #52]	; (800455c <prvInitialiseTaskLists+0x68>)
 8004528:	f7fe fd3b 	bl	8002fa2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800452c:	480c      	ldr	r0, [pc, #48]	; (8004560 <prvInitialiseTaskLists+0x6c>)
 800452e:	f7fe fd38 	bl	8002fa2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004532:	480c      	ldr	r0, [pc, #48]	; (8004564 <prvInitialiseTaskLists+0x70>)
 8004534:	f7fe fd35 	bl	8002fa2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004538:	480b      	ldr	r0, [pc, #44]	; (8004568 <prvInitialiseTaskLists+0x74>)
 800453a:	f7fe fd32 	bl	8002fa2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <prvInitialiseTaskLists+0x78>)
 8004540:	4a05      	ldr	r2, [pc, #20]	; (8004558 <prvInitialiseTaskLists+0x64>)
 8004542:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <prvInitialiseTaskLists+0x7c>)
 8004546:	4a05      	ldr	r2, [pc, #20]	; (800455c <prvInitialiseTaskLists+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000228 	.word	0x20000228
 8004558:	2000028c 	.word	0x2000028c
 800455c:	200002a0 	.word	0x200002a0
 8004560:	200002bc 	.word	0x200002bc
 8004564:	200002d0 	.word	0x200002d0
 8004568:	200002e8 	.word	0x200002e8
 800456c:	200002b4 	.word	0x200002b4
 8004570:	200002b8 	.word	0x200002b8

08004574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457a:	e019      	b.n	80045b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800457c:	f000 fe84 	bl	8005288 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <prvCheckTasksWaitingTermination+0x50>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fd92 	bl	80030b6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 800459a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <prvCheckTasksWaitingTermination+0x58>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80045a6:	f000 fe9f 	bl	80052e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f810 	bl	80045d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e1      	bne.n	800457c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200002d0 	.word	0x200002d0
 80045c8:	200002fc 	.word	0x200002fc
 80045cc:	200002e4 	.word	0x200002e4

080045d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f855 	bl	800568c <vPortFree>
                vPortFree( pxTCB );
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 f852 	bl	800568c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <prvResetNextTaskUnblockTime+0x30>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <prvResetNextTaskUnblockTime+0x34>)
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004606:	e005      	b.n	8004614 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <prvResetNextTaskUnblockTime+0x30>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <prvResetNextTaskUnblockTime+0x34>)
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	200002b4 	.word	0x200002b4
 8004624:	2000031c 	.word	0x2000031c

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <xTaskGetSchedulerState+0x34>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <xTaskGetSchedulerState+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
    }
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000308 	.word	0x20000308
 8004660:	20000324 	.word	0x20000324

08004664 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d90a      	bls.n	800468e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	613b      	str	r3, [r7, #16]
    }
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800468e:	f000 fdfb 	bl	8005288 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004692:	4b32      	ldr	r3, [pc, #200]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4413      	add	r3, r2
 800469a:	3358      	adds	r3, #88	; 0x58
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d022      	beq.n	80046ea <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	3214      	adds	r2, #20
 80046ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	43d2      	mvns	r2, r2
 80046b4:	4011      	ands	r1, r2
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	3214      	adds	r2, #20
 80046ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	3358      	adds	r3, #88	; 0x58
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d2:	2101      	movs	r1, #1
 80046d4:	6a38      	ldr	r0, [r7, #32]
 80046d6:	f000 f9a1 	bl	8004a1c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <xTaskGenericNotifyWait+0xfc>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80046ea:	f000 fdfd 	bl	80052e8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80046ee:	f000 fdcb 	bl	8005288 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	3214      	adds	r2, #20
 8004700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	3358      	adds	r3, #88	; 0x58
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d002      	beq.n	8004720 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e00e      	b.n	800473e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	3214      	adds	r2, #20
 8004728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	43d2      	mvns	r2, r2
 8004730:	4011      	ands	r1, r2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	3214      	adds	r2, #20
 8004736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <xTaskGenericNotifyWait+0xf8>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	3358      	adds	r3, #88	; 0x58
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800474c:	f000 fdcc 	bl	80052e8 <vPortExitCritical>

        return xReturn;
 8004750:	697b      	ldr	r3, [r7, #20]
    }
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000224 	.word	0x20000224
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004764:	b580      	push	{r7, lr}
 8004766:	b092      	sub	sp, #72	; 0x48
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004772:	2301      	movs	r3, #1
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d90a      	bls.n	80047ae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ae:	f000 fe4d 	bl	800544c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80047b6:	f3ef 8211 	mrs	r2, BASEPRI
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	623a      	str	r2, [r7, #32]
 80047cc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80047ce:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80047d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	3214      	adds	r2, #20
 80047de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80047e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4413      	add	r3, r2
 80047ec:	3358      	adds	r3, #88	; 0x58
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80047f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4413      	add	r3, r2
 80047fa:	3358      	adds	r3, #88	; 0x58
 80047fc:	2202      	movs	r2, #2
 80047fe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d83b      	bhi.n	800487e <xTaskGenericNotifyFromISR+0x11a>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <xTaskGenericNotifyFromISR+0xa8>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	0800489d 	.word	0x0800489d
 8004810:	08004821 	.word	0x08004821
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004855 	.word	0x08004855
 800481c:	08004863 	.word	0x08004863
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	3214      	adds	r2, #20
 8004826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	ea42 0103 	orr.w	r1, r2, r3
 8004830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	3214      	adds	r2, #20
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800483a:	e032      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	3214      	adds	r2, #20
 8004842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	3214      	adds	r2, #20
 800484e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004852:	e026      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	3214      	adds	r2, #20
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004860:	e01f      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004862:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004866:	2b02      	cmp	r3, #2
 8004868:	d006      	beq.n	8004878 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800486a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	3214      	adds	r2, #20
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004876:	e014      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004878:	2300      	movs	r3, #0
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800487c:	e011      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <xTaskGenericNotifyFromISR+0x29c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	61bb      	str	r3, [r7, #24]
    }
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80048a0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80048a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	f040 809e 	bne.w	80049e8 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80048ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	617b      	str	r3, [r7, #20]
    }
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ca:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <xTaskGenericNotifyFromISR+0x2a0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d15e      	bne.n	8004990 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	633b      	str	r3, [r7, #48]	; 0x30
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048de:	68d2      	ldr	r2, [r2, #12]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048e8:	6892      	ldr	r2, [r2, #8]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	3304      	adds	r3, #4
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d103      	bne.n	8004900 <xTaskGenericNotifyFromISR+0x19c>
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	2200      	movs	r2, #0
 8004904:	615a      	str	r2, [r3, #20]
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <xTaskGenericNotifyFromISR+0x2a4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <xTaskGenericNotifyFromISR+0x2a4>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4939      	ldr	r1, [pc, #228]	; (8004a0c <xTaskGenericNotifyFromISR+0x2a8>)
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	3304      	adds	r3, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800494c:	3204      	adds	r2, #4
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <xTaskGenericNotifyFromISR+0x2a8>)
 8004966:	441a      	add	r2, r3
 8004968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496a:	615a      	str	r2, [r3, #20]
 800496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	4926      	ldr	r1, [pc, #152]	; (8004a0c <xTaskGenericNotifyFromISR+0x2a8>)
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	4822      	ldr	r0, [pc, #136]	; (8004a0c <xTaskGenericNotifyFromISR+0x2a8>)
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4403      	add	r3, r0
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	e01b      	b.n	80049c8 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004990:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <xTaskGenericNotifyFromISR+0x2ac>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
 8004996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499a:	61da      	str	r2, [r3, #28]
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a2:	621a      	str	r2, [r3, #32]
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049aa:	3218      	adds	r2, #24
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b0:	f103 0218 	add.w	r2, r3, #24
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <xTaskGenericNotifyFromISR+0x2ac>)
 80049bc:	629a      	str	r2, [r3, #40]	; 0x28
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <xTaskGenericNotifyFromISR+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <xTaskGenericNotifyFromISR+0x2ac>)
 80049c6:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <xTaskGenericNotifyFromISR+0x2b0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d908      	bls.n	80049e8 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80049d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <xTaskGenericNotifyFromISR+0x2b4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ea:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80049f2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80049f6:	4618      	mov	r0, r3
 80049f8:	3748      	adds	r7, #72	; 0x48
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000300 	.word	0x20000300
 8004a04:	20000324 	.word	0x20000324
 8004a08:	20000304 	.word	0x20000304
 8004a0c:	20000228 	.word	0x20000228
 8004a10:	200002bc 	.word	0x200002bc
 8004a14:	20000224 	.word	0x20000224
 8004a18:	20000310 	.word	0x20000310

08004a1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a2c:	4b35      	ldr	r3, [pc, #212]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fb3f 	bl	80030b6 <uxListRemove>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a3e:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	2201      	movs	r2, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	4b2e      	ldr	r3, [pc, #184]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4013      	ands	r3, r2
 8004a52:	4a2d      	ldr	r2, [pc, #180]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d124      	bne.n	8004aa8 <prvAddCurrentTaskToDelayedList+0x8c>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d021      	beq.n	8004aa8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a64:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	3204      	adds	r2, #4
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a98:	615a      	str	r2, [r3, #20]
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004aa6:	e026      	b.n	8004af6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d209      	bcs.n	8004ad4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7fe fab9 	bl	8003044 <vListInsert>
}
 8004ad2:	e010      	b.n	8004af6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fe faaf 	bl	8003044 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d202      	bcs.n	8004af6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6013      	str	r3, [r2, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000300 	.word	0x20000300
 8004b04:	20000224 	.word	0x20000224
 8004b08:	20000304 	.word	0x20000304
 8004b0c:	200002e8 	.word	0x200002e8
 8004b10:	200002b8 	.word	0x200002b8
 8004b14:	200002b4 	.word	0x200002b4
 8004b18:	2000031c 	.word	0x2000031c

08004b1c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b26:	f000 fa47 	bl	8004fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <xTimerCreateTimerTask+0x54>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <xTimerCreateTimerTask+0x58>)
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	2302      	movs	r3, #2
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b40:	490d      	ldr	r1, [pc, #52]	; (8004b78 <xTimerCreateTimerTask+0x5c>)
 8004b42:	480e      	ldr	r0, [pc, #56]	; (8004b7c <xTimerCreateTimerTask+0x60>)
 8004b44:	f7fe fdd4 	bl	80036f0 <xTaskCreate>
 8004b48:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	603b      	str	r3, [r7, #0]
    }
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004b66:	687b      	ldr	r3, [r7, #4]
    }
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000358 	.word	0x20000358
 8004b74:	2000035c 	.word	0x2000035c
 8004b78:	080062d4 	.word	0x080062d4
 8004b7c:	08004c25 	.word	0x08004c25

08004b80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004b8c:	e008      	b.n	8004ba0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	18d1      	adds	r1, r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f8dd 	bl	8004d6c <prvInsertTimerInActiveList>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ea      	bne.n	8004b8e <prvReloadTimer+0xe>
        }
    }
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <prvProcessExpiredTimer+0x5c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fa6a 	bl	80030b6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff ffc3 	bl	8004b80 <prvReloadTimer>
 8004bfa:	e008      	b.n	8004c0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	4798      	blx	r3
    }
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000350 	.word	0x20000350

08004c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f857 	bl	8004ce4 <prvGetNextExpireTime>
 8004c36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f803 	bl	8004c48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c42:	f000 f8d5 	bl	8004df0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c46:	e7f1      	b.n	8004c2c <prvTimerTask+0x8>

08004c48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c52:	f7fe ffe3 	bl	8003c1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c56:	f107 0308 	add.w	r3, r7, #8
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f866 	bl	8004d2c <prvSampleTimeNow>
 8004c60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d130      	bne.n	8004cca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d806      	bhi.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c76:	f7fe ffdf 	bl	8003c38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ffa1 	bl	8004bc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c82:	e024      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <prvProcessTimerOrBlockTask+0x90>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <prvProcessTimerOrBlockTask+0x50>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <prvProcessTimerOrBlockTask+0x52>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <prvProcessTimerOrBlockTask+0x94>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f7fe fced 	bl	8003688 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004cae:	f7fe ffc3 	bl	8003c38 <xTaskResumeAll>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <prvProcessTimerOrBlockTask+0x98>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
    }
 8004cc8:	e001      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004cca:	f7fe ffb5 	bl	8003c38 <xTaskResumeAll>
    }
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000354 	.word	0x20000354
 8004cdc:	20000358 	.word	0x20000358
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <prvGetNextExpireTime+0x44>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <prvGetNextExpireTime+0x16>
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	e000      	b.n	8004cfc <prvGetNextExpireTime+0x18>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <prvGetNextExpireTime+0x44>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e001      	b.n	8004d18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d18:	68fb      	ldr	r3, [r7, #12]
    }
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000350 	.word	0x20000350

08004d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d34:	f7ff f87c 	bl	8003e30 <xTaskGetTickCount>
 8004d38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvSampleTimeNow+0x3c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d205      	bcs.n	8004d50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d44:	f000 f912 	bl	8004f6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <prvSampleTimeNow+0x3c>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000360 	.word	0x20000360

08004d6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d812      	bhi.n	8004db8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e01b      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <prvInsertTimerInActiveList+0x7c>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fe f947 	bl	8003044 <vListInsert>
 8004db6:	e012      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d206      	bcs.n	8004dce <prvInsertTimerInActiveList+0x62>
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e007      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <prvInsertTimerInActiveList+0x80>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe f933 	bl	8003044 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004dde:	697b      	ldr	r3, [r7, #20]
    }
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000354 	.word	0x20000354
 8004dec:	20000350 	.word	0x20000350

08004df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df6:	e0a6      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f2c0 80a2 	blt.w	8004f44 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe f950 	bl	80030b6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff87 	bl	8004d2c <prvSampleTimeNow>
 8004e1e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	f200 808e 	bhi.w	8004f46 <prvProcessReceivedCommands+0x156>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <prvProcessReceivedCommands+0x40>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e55 	.word	0x08004e55
 8004e38:	08004ebd 	.word	0x08004ebd
 8004e3c:	08004ed1 	.word	0x08004ed1
 8004e40:	08004f1b 	.word	0x08004f1b
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e55 	.word	0x08004e55
 8004e4c:	08004ebd 	.word	0x08004ebd
 8004e50:	08004ed1 	.word	0x08004ed1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	18d1      	adds	r1, r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	69f8      	ldr	r0, [r7, #28]
 8004e74:	f7ff ff7a 	bl	8004d6c <prvInsertTimerInActiveList>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	4413      	add	r3, r2
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4619      	mov	r1, r3
 8004e98:	69f8      	ldr	r0, [r7, #28]
 8004e9a:	f7ff fe71 	bl	8004b80 <prvReloadTimer>
 8004e9e:	e008      	b.n	8004eb2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	69f8      	ldr	r0, [r7, #28]
 8004eb8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004eba:	e044      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ece:	e03a      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	617b      	str	r3, [r7, #20]
    }
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	18d1      	adds	r1, r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	69f8      	ldr	r0, [r7, #28]
 8004f14:	f7ff ff2a 	bl	8004d6c <prvInsertTimerInActiveList>
                        break;
 8004f18:	e015      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004f28:	69f8      	ldr	r0, [r7, #28]
 8004f2a:	f000 fbaf 	bl	800568c <vPortFree>
 8004f2e:	e00a      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f42:	e000      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004f44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <prvProcessReceivedCommands+0x178>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f107 0108 	add.w	r1, r7, #8
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe f9dd 	bl	8003310 <xQueueReceive>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af4d 	bne.w	8004df8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000358 	.word	0x20000358

08004f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f72:	e009      	b.n	8004f88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f7ff fe1e 	bl	8004bc4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
    }
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000350 	.word	0x20000350
 8004fb4:	20000354 	.word	0x20000354

08004fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004fbc:	f000 f964 	bl	8005288 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fca:	f7fd ffea 	bl	8002fa2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004fce:	4811      	ldr	r0, [pc, #68]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fd0:	f7fd ffe7 	bl	8002fa2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fde:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	210c      	movs	r1, #12
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f7fe f921 	bl	800322c <xQueueGenericCreate>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4a07      	ldr	r2, [pc, #28]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4908      	ldr	r1, [pc, #32]	; (8005020 <prvCheckForValidListAndQueue+0x68>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe faf4 	bl	80035ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005004:	f000 f970 	bl	80052e8 <vPortExitCritical>
    }
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000358 	.word	0x20000358
 8005010:	20000328 	.word	0x20000328
 8005014:	2000033c 	.word	0x2000033c
 8005018:	20000350 	.word	0x20000350
 800501c:	20000354 	.word	0x20000354
 8005020:	080062dc 	.word	0x080062dc

08005024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b04      	subs	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800503c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <pxPortInitialiseStack+0x64>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b14      	subs	r3, #20
 800505e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f06f 0202 	mvn.w	r2, #2
 8005072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b20      	subs	r3, #32
 8005078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	0800508d 	.word	0x0800508d

0800508c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <prvTaskExitError+0x54>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d00a      	beq.n	80050b6 <prvTaskExitError+0x2a>
        __asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
    }
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <prvTaskExitError+0x28>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
    }
 80050c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80050ca:	bf00      	nop
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0fc      	beq.n	80050cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000018 	.word	0x20000018
	...

080050f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <pxCurrentTCBConst2>)
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f380 8809 	msr	PSP, r0
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8811 	msr	BASEPRI, r0
 800510a:	4770      	bx	lr
 800510c:	f3af 8000 	nop.w

08005110 <pxCurrentTCBConst2>:
 8005110:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <prvPortStartFirstTask+0x24>)
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	6800      	ldr	r0, [r0, #0]
 800511e:	f380 8808 	msr	MSP, r0
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8814 	msr	CONTROL, r0
 800512a:	b662      	cpsie	i
 800512c:	b661      	cpsie	f
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	df00      	svc	0
 8005138:	bf00      	nop
 800513a:	0000      	.short	0x0000
 800513c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop

08005144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800514a:	4b46      	ldr	r3, [pc, #280]	; (8005264 <xPortStartScheduler+0x120>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a46      	ldr	r2, [pc, #280]	; (8005268 <xPortStartScheduler+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10a      	bne.n	800516a <xPortStartScheduler+0x26>
        __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
    }
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800516a:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <xPortStartScheduler+0x120>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <xPortStartScheduler+0x128>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10a      	bne.n	800518a <xPortStartScheduler+0x46>
        __asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	60fb      	str	r3, [r7, #12]
    }
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <xPortStartScheduler+0x12c>)
 800518c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <xPortStartScheduler+0x130>)
 80051b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051b2:	4b31      	ldr	r3, [pc, #196]	; (8005278 <xPortStartScheduler+0x134>)
 80051b4:	2207      	movs	r2, #7
 80051b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051b8:	e009      	b.n	80051ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <xPortStartScheduler+0x134>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <xPortStartScheduler+0x134>)
 80051c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d0ef      	beq.n	80051ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <xPortStartScheduler+0x134>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1c3 0307 	rsb	r3, r3, #7
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00a      	beq.n	80051fc <xPortStartScheduler+0xb8>
        __asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60bb      	str	r3, [r7, #8]
    }
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <xPortStartScheduler+0x134>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <xPortStartScheduler+0x134>)
 8005204:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <xPortStartScheduler+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800520e:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <xPortStartScheduler+0x134>)
 8005210:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a17      	ldr	r2, [pc, #92]	; (800527c <xPortStartScheduler+0x138>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <xPortStartScheduler+0x138>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <xPortStartScheduler+0x138>)
 800522c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005232:	f000 f8db 	bl	80053ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <xPortStartScheduler+0x13c>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800523c:	f000 f8fa 	bl	8005434 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <xPortStartScheduler+0x140>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <xPortStartScheduler+0x140>)
 8005246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800524a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800524c:	f7ff ff64 	bl	8005118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005250:	f7fe ff14 	bl	800407c <vTaskSwitchContext>
    prvTaskExitError();
 8005254:	f7ff ff1a 	bl	800508c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000ed00 	.word	0xe000ed00
 8005268:	410fc271 	.word	0x410fc271
 800526c:	410fc270 	.word	0x410fc270
 8005270:	e000e400 	.word	0xe000e400
 8005274:	20000364 	.word	0x20000364
 8005278:	20000368 	.word	0x20000368
 800527c:	e000ed20 	.word	0xe000ed20
 8005280:	20000018 	.word	0x20000018
 8005284:	e000ef34 	.word	0xe000ef34

08005288 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
        __asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	607b      	str	r3, [r7, #4]
    }
 80052a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <vPortEnterCritical+0x58>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <vPortEnterCritical+0x58>)
 80052aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <vPortEnterCritical+0x58>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10f      	bne.n	80052d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortEnterCritical+0x5c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	603b      	str	r3, [r7, #0]
    }
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vPortEnterCritical+0x4a>
    }
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000018 	.word	0x20000018
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <vPortExitCritical+0x50>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <vPortExitCritical+0x24>
        __asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	607b      	str	r3, [r7, #4]
    }
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <vPortExitCritical+0x50>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3b01      	subs	r3, #1
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <vPortExitCritical+0x50>)
 8005314:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <vPortExitCritical+0x50>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <vPortExitCritical+0x42>
 800531e:	2300      	movs	r3, #0
 8005320:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f383 8811 	msr	BASEPRI, r3
    }
 8005328:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	20000018 	.word	0x20000018
 800533c:	00000000 	.word	0x00000000

08005340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005340:	f3ef 8009 	mrs	r0, PSP
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <pxCurrentTCBConst>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f01e 0f10 	tst.w	lr, #16
 8005350:	bf08      	it	eq
 8005352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005364:	f380 8811 	msr	BASEPRI, r0
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f7fe fe84 	bl	800407c <vTaskSwitchContext>
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f380 8811 	msr	BASEPRI, r0
 800537c:	bc09      	pop	{r0, r3}
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005386:	f01e 0f10 	tst.w	lr, #16
 800538a:	bf08      	it	eq
 800538c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005390:	f380 8809 	msr	PSP, r0
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst>:
 80053a0:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
        __asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
    }
 80053c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80053c2:	f7fe fd45 	bl	8003e50 <xTaskIncrementTick>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <SysTick_Handler+0x40>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
    }
 80053de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <vPortSetupTimerInterrupt+0x34>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <vPortSetupTimerInterrupt+0x38>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <vPortSetupTimerInterrupt+0x3c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0a      	ldr	r2, [pc, #40]	; (800542c <vPortSetupTimerInterrupt+0x40>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <vPortSetupTimerInterrupt+0x44>)
 800540a:	3b01      	subs	r3, #1
 800540c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800540e:	4b04      	ldr	r3, [pc, #16]	; (8005420 <vPortSetupTimerInterrupt+0x34>)
 8005410:	2207      	movs	r2, #7
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000e010 	.word	0xe000e010
 8005424:	e000e018 	.word	0xe000e018
 8005428:	20000000 	.word	0x20000000
 800542c:	10624dd3 	.word	0x10624dd3
 8005430:	e000e014 	.word	0xe000e014

08005434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005444 <vPortEnableVFP+0x10>
 8005438:	6801      	ldr	r1, [r0, #0]
 800543a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800543e:	6001      	str	r1, [r0, #0]
 8005440:	4770      	bx	lr
 8005442:	0000      	.short	0x0000
 8005444:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop

0800544c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005452:	f3ef 8305 	mrs	r3, IPSR
 8005456:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d914      	bls.n	8005488 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800545e:	4a17      	ldr	r2, [pc, #92]	; (80054bc <vPortValidateInterruptPriority+0x70>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <vPortValidateInterruptPriority+0x74>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	7afa      	ldrb	r2, [r7, #11]
 800546e:	429a      	cmp	r2, r3
 8005470:	d20a      	bcs.n	8005488 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
    }
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <vPortValidateInterruptPriority+0x78>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <vPortValidateInterruptPriority+0x7c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d90a      	bls.n	80054ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	603b      	str	r3, [r7, #0]
    }
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <vPortValidateInterruptPriority+0x60>
    }
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	e000e3f0 	.word	0xe000e3f0
 80054c0:	20000364 	.word	0x20000364
 80054c4:	e000ed0c 	.word	0xe000ed0c
 80054c8:	20000368 	.word	0x20000368

080054cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	; 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80054d8:	f7fe fba0 	bl	8003c1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80054dc:	4b65      	ldr	r3, [pc, #404]	; (8005674 <pvPortMalloc+0x1a8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80054e4:	f000 f934 	bl	8005750 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054e8:	4b63      	ldr	r3, [pc, #396]	; (8005678 <pvPortMalloc+0x1ac>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 80a7 	bne.w	8005644 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02d      	beq.n	8005558 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80054fc:	2208      	movs	r2, #8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d227      	bcs.n	8005558 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d021      	beq.n	800555e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d214      	bcs.n	8005552 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	3308      	adds	r3, #8
 8005530:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <pvPortMalloc+0x92>
        __asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	617b      	str	r3, [r7, #20]
    }
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005556:	e002      	b.n	800555e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e000      	b.n	8005560 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800555e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d06e      	beq.n	8005644 <pvPortMalloc+0x178>
 8005566:	4b45      	ldr	r3, [pc, #276]	; (800567c <pvPortMalloc+0x1b0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d869      	bhi.n	8005644 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <pvPortMalloc+0x1b4>)
 8005572:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005574:	4b42      	ldr	r3, [pc, #264]	; (8005680 <pvPortMalloc+0x1b4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557a:	e004      	b.n	8005586 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d903      	bls.n	8005598 <pvPortMalloc+0xcc>
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f1      	bne.n	800557c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <pvPortMalloc+0x1a8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559e:	429a      	cmp	r2, r3
 80055a0:	d050      	beq.n	8005644 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2208      	movs	r2, #8
 80055a8:	4413      	add	r3, r2
 80055aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	2308      	movs	r3, #8
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d91f      	bls.n	8005604 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <pvPortMalloc+0x120>
        __asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	613b      	str	r3, [r7, #16]
    }
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055fe:	69b8      	ldr	r0, [r7, #24]
 8005600:	f000 f908 	bl	8005814 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <pvPortMalloc+0x1b0>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	4a1b      	ldr	r2, [pc, #108]	; (800567c <pvPortMalloc+0x1b0>)
 8005610:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <pvPortMalloc+0x1b0>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <pvPortMalloc+0x1b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d203      	bcs.n	8005626 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800561e:	4b17      	ldr	r3, [pc, #92]	; (800567c <pvPortMalloc+0x1b0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a18      	ldr	r2, [pc, #96]	; (8005684 <pvPortMalloc+0x1b8>)
 8005624:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <pvPortMalloc+0x1ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	431a      	orrs	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <pvPortMalloc+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a11      	ldr	r2, [pc, #68]	; (8005688 <pvPortMalloc+0x1bc>)
 8005642:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005644:	f7fe faf8 	bl	8003c38 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <pvPortMalloc+0x19c>
        __asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
    }
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <pvPortMalloc+0x19a>
    return pvReturn;
 8005668:	69fb      	ldr	r3, [r7, #28]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20009cf8 	.word	0x20009cf8
 8005678:	20009d0c 	.word	0x20009d0c
 800567c:	20009cfc 	.word	0x20009cfc
 8005680:	20009cf0 	.word	0x20009cf0
 8005684:	20009d00 	.word	0x20009d00
 8005688:	20009d04 	.word	0x20009d04

0800568c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04d      	beq.n	800573a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800569e:	2308      	movs	r3, #8
 80056a0:	425b      	negs	r3, r3
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4413      	add	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4b24      	ldr	r3, [pc, #144]	; (8005744 <vPortFree+0xb8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <vPortFree+0x44>
        __asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
    }
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <vPortFree+0x62>
        __asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
    }
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <vPortFree+0xb8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01e      	beq.n	800573a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11a      	bne.n	800573a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <vPortFree+0xb8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	43db      	mvns	r3, r3
 800570e:	401a      	ands	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005714:	f7fe fa82 	bl	8003c1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <vPortFree+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4413      	add	r3, r2
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <vPortFree+0xbc>)
 8005724:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f000 f874 	bl	8005814 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <vPortFree+0xc0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	4a06      	ldr	r2, [pc, #24]	; (800574c <vPortFree+0xc0>)
 8005734:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005736:	f7fe fa7f 	bl	8003c38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20009d0c 	.word	0x20009d0c
 8005748:	20009cfc 	.word	0x20009cfc
 800574c:	20009d08 	.word	0x20009d08

08005750 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005756:	f649 1384 	movw	r3, #39300	; 0x9984
 800575a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <prvHeapInit+0xac>)
 800575e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3307      	adds	r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0307 	bic.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <prvHeapInit+0xac>)
 8005780:	4413      	add	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005788:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <prvHeapInit+0xb0>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <prvHeapInit+0xb0>)
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800579c:	2208      	movs	r2, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <prvHeapInit+0xb4>)
 80057b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <prvHeapInit+0xb4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <prvHeapInit+0xb4>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <prvHeapInit+0xb8>)
 80057de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <prvHeapInit+0xbc>)
 80057e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <prvHeapInit+0xc0>)
 80057ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000036c 	.word	0x2000036c
 8005800:	20009cf0 	.word	0x20009cf0
 8005804:	20009cf8 	.word	0x20009cf8
 8005808:	20009d00 	.word	0x20009d00
 800580c:	20009cfc 	.word	0x20009cfc
 8005810:	20009d0c 	.word	0x20009d0c

08005814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800581c:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <prvInsertBlockIntoFreeList+0xac>)
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e002      	b.n	8005828 <prvInsertBlockIntoFreeList+0x14>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d8f7      	bhi.n	8005822 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d108      	bne.n	8005856 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d118      	bne.n	800589c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d00d      	beq.n	8005892 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e008      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e003      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d002      	beq.n	80058b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20009cf0 	.word	0x20009cf0
 80058c4:	20009cf8 	.word	0x20009cf8

080058c8 <__errno>:
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <__errno+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	2000001c 	.word	0x2000001c

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4d0d      	ldr	r5, [pc, #52]	; (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058da:	1b64      	subs	r4, r4, r5
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2600      	movs	r6, #0
 80058e0:	42a6      	cmp	r6, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4d0b      	ldr	r5, [pc, #44]	; (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	; (8005918 <__libc_init_array+0x44>)
 80058e8:	f000 fc8e 	bl	8006208 <_init>
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2600      	movs	r6, #0
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fc:	4798      	blx	r3
 80058fe:	3601      	adds	r6, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f855 3b04 	ldr.w	r3, [r5], #4
 8005906:	4798      	blx	r3
 8005908:	3601      	adds	r6, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	0800766c 	.word	0x0800766c
 8005910:	0800766c 	.word	0x0800766c
 8005914:	0800766c 	.word	0x0800766c
 8005918:	08007670 	.word	0x08007670

0800591c <memcpy>:
 800591c:	440a      	add	r2, r1
 800591e:	4291      	cmp	r1, r2
 8005920:	f100 33ff 	add.w	r3, r0, #4294967295
 8005924:	d100      	bne.n	8005928 <memcpy+0xc>
 8005926:	4770      	bx	lr
 8005928:	b510      	push	{r4, lr}
 800592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005932:	4291      	cmp	r1, r2
 8005934:	d1f9      	bne.n	800592a <memcpy+0xe>
 8005936:	bd10      	pop	{r4, pc}

08005938 <memset>:
 8005938:	4402      	add	r2, r0
 800593a:	4603      	mov	r3, r0
 800593c:	4293      	cmp	r3, r2
 800593e:	d100      	bne.n	8005942 <memset+0xa>
 8005940:	4770      	bx	lr
 8005942:	f803 1b01 	strb.w	r1, [r3], #1
 8005946:	e7f9      	b.n	800593c <memset+0x4>

08005948 <siprintf>:
 8005948:	b40e      	push	{r1, r2, r3}
 800594a:	b500      	push	{lr}
 800594c:	b09c      	sub	sp, #112	; 0x70
 800594e:	ab1d      	add	r3, sp, #116	; 0x74
 8005950:	9002      	str	r0, [sp, #8]
 8005952:	9006      	str	r0, [sp, #24]
 8005954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005958:	4809      	ldr	r0, [pc, #36]	; (8005980 <siprintf+0x38>)
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	9104      	str	r1, [sp, #16]
 800595e:	4909      	ldr	r1, [pc, #36]	; (8005984 <siprintf+0x3c>)
 8005960:	f853 2b04 	ldr.w	r2, [r3], #4
 8005964:	9105      	str	r1, [sp, #20]
 8005966:	6800      	ldr	r0, [r0, #0]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	a902      	add	r1, sp, #8
 800596c:	f000 f868 	bl	8005a40 <_svfiprintf_r>
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	b01c      	add	sp, #112	; 0x70
 8005978:	f85d eb04 	ldr.w	lr, [sp], #4
 800597c:	b003      	add	sp, #12
 800597e:	4770      	bx	lr
 8005980:	2000001c 	.word	0x2000001c
 8005984:	ffff0208 	.word	0xffff0208

08005988 <__ssputs_r>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	688e      	ldr	r6, [r1, #8]
 800598e:	429e      	cmp	r6, r3
 8005990:	4682      	mov	sl, r0
 8005992:	460c      	mov	r4, r1
 8005994:	4690      	mov	r8, r2
 8005996:	461f      	mov	r7, r3
 8005998:	d838      	bhi.n	8005a0c <__ssputs_r+0x84>
 800599a:	898a      	ldrh	r2, [r1, #12]
 800599c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a0:	d032      	beq.n	8005a08 <__ssputs_r+0x80>
 80059a2:	6825      	ldr	r5, [r4, #0]
 80059a4:	6909      	ldr	r1, [r1, #16]
 80059a6:	eba5 0901 	sub.w	r9, r5, r1
 80059aa:	6965      	ldr	r5, [r4, #20]
 80059ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b4:	3301      	adds	r3, #1
 80059b6:	444b      	add	r3, r9
 80059b8:	106d      	asrs	r5, r5, #1
 80059ba:	429d      	cmp	r5, r3
 80059bc:	bf38      	it	cc
 80059be:	461d      	movcc	r5, r3
 80059c0:	0553      	lsls	r3, r2, #21
 80059c2:	d531      	bpl.n	8005a28 <__ssputs_r+0xa0>
 80059c4:	4629      	mov	r1, r5
 80059c6:	f000 fb55 	bl	8006074 <_malloc_r>
 80059ca:	4606      	mov	r6, r0
 80059cc:	b950      	cbnz	r0, 80059e4 <__ssputs_r+0x5c>
 80059ce:	230c      	movs	r3, #12
 80059d0:	f8ca 3000 	str.w	r3, [sl]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e4:	6921      	ldr	r1, [r4, #16]
 80059e6:	464a      	mov	r2, r9
 80059e8:	f7ff ff98 	bl	800591c <memcpy>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	6126      	str	r6, [r4, #16]
 80059fa:	6165      	str	r5, [r4, #20]
 80059fc:	444e      	add	r6, r9
 80059fe:	eba5 0509 	sub.w	r5, r5, r9
 8005a02:	6026      	str	r6, [r4, #0]
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	463e      	mov	r6, r7
 8005a08:	42be      	cmp	r6, r7
 8005a0a:	d900      	bls.n	8005a0e <__ssputs_r+0x86>
 8005a0c:	463e      	mov	r6, r7
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	4632      	mov	r2, r6
 8005a12:	4641      	mov	r1, r8
 8005a14:	f000 faa8 	bl	8005f68 <memmove>
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	1b9b      	subs	r3, r3, r6
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4433      	add	r3, r6
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	2000      	movs	r0, #0
 8005a26:	e7db      	b.n	80059e0 <__ssputs_r+0x58>
 8005a28:	462a      	mov	r2, r5
 8005a2a:	f000 fb97 	bl	800615c <_realloc_r>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1e1      	bne.n	80059f8 <__ssputs_r+0x70>
 8005a34:	6921      	ldr	r1, [r4, #16]
 8005a36:	4650      	mov	r0, sl
 8005a38:	f000 fab0 	bl	8005f9c <_free_r>
 8005a3c:	e7c7      	b.n	80059ce <__ssputs_r+0x46>
	...

08005a40 <_svfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4698      	mov	r8, r3
 8005a46:	898b      	ldrh	r3, [r1, #12]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	b09d      	sub	sp, #116	; 0x74
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	d50e      	bpl.n	8005a72 <_svfiprintf_r+0x32>
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	b963      	cbnz	r3, 8005a72 <_svfiprintf_r+0x32>
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	f000 fb0b 	bl	8006074 <_malloc_r>
 8005a5e:	6028      	str	r0, [r5, #0]
 8005a60:	6128      	str	r0, [r5, #16]
 8005a62:	b920      	cbnz	r0, 8005a6e <_svfiprintf_r+0x2e>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e0d1      	b.n	8005c12 <_svfiprintf_r+0x1d2>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c2c <_svfiprintf_r+0x1ec>
 8005a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a8a:	f04f 0901 	mov.w	r9, #1
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x5c>
 8005a98:	2a25      	cmp	r2, #37	; 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x50>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7a>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6d 	bl	8005988 <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80aa 	beq.w	8005c08 <_svfiprintf_r+0x1c8>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a2 	beq.w	8005c08 <_svfiprintf_r+0x1c8>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ada:	931a      	str	r3, [sp, #104]	; 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	4851      	ldr	r0, [pc, #324]	; (8005c2c <_svfiprintf_r+0x1ec>)
 8005ae6:	f7fa fb7b 	bl	80001e0 <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xe6>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	; 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xf6>
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	; 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94e      	bls.n	8005bbe <_svfiprintf_r+0x17e>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x110>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x110>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	46a2      	mov	sl, r4
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0x9c>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	; 0x2e
 8005b54:	d10c      	bne.n	8005b70 <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d135      	bne.n	8005bc8 <_svfiprintf_r+0x188>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfb8      	it	lt
 8005b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b6c:	3402      	adds	r4, #2
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c3c <_svfiprintf_r+0x1fc>
 8005b74:	7821      	ldrb	r1, [r4, #0]
 8005b76:	2203      	movs	r2, #3
 8005b78:	4650      	mov	r0, sl
 8005b7a:	f7fa fb31 	bl	80001e0 <memchr>
 8005b7e:	b140      	cbz	r0, 8005b92 <_svfiprintf_r+0x152>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	eba0 000a 	sub.w	r0, r0, sl
 8005b86:	fa03 f000 	lsl.w	r0, r3, r0
 8005b8a:	9b04      	ldr	r3, [sp, #16]
 8005b8c:	4303      	orrs	r3, r0
 8005b8e:	3401      	adds	r4, #1
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b96:	4826      	ldr	r0, [pc, #152]	; (8005c30 <_svfiprintf_r+0x1f0>)
 8005b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9c:	2206      	movs	r2, #6
 8005b9e:	f7fa fb1f 	bl	80001e0 <memchr>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d038      	beq.n	8005c18 <_svfiprintf_r+0x1d8>
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005ba8:	bb1b      	cbnz	r3, 8005bf2 <_svfiprintf_r+0x1b2>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	3307      	adds	r3, #7
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	4433      	add	r3, r6
 8005bba:	9309      	str	r3, [sp, #36]	; 0x24
 8005bbc:	e767      	b.n	8005a8e <_svfiprintf_r+0x4e>
 8005bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e7a5      	b.n	8005b14 <_svfiprintf_r+0xd4>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	3401      	adds	r4, #1
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f04f 0c0a 	mov.w	ip, #10
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bda:	3a30      	subs	r2, #48	; 0x30
 8005bdc:	2a09      	cmp	r2, #9
 8005bde:	d903      	bls.n	8005be8 <_svfiprintf_r+0x1a8>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0c5      	beq.n	8005b70 <_svfiprintf_r+0x130>
 8005be4:	9105      	str	r1, [sp, #20]
 8005be6:	e7c3      	b.n	8005b70 <_svfiprintf_r+0x130>
 8005be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bec:	4604      	mov	r4, r0
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e7f0      	b.n	8005bd4 <_svfiprintf_r+0x194>
 8005bf2:	ab03      	add	r3, sp, #12
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	462a      	mov	r2, r5
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005bfa:	a904      	add	r1, sp, #16
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f3af 8000 	nop.w
 8005c02:	1c42      	adds	r2, r0, #1
 8005c04:	4606      	mov	r6, r0
 8005c06:	d1d6      	bne.n	8005bb6 <_svfiprintf_r+0x176>
 8005c08:	89ab      	ldrh	r3, [r5, #12]
 8005c0a:	065b      	lsls	r3, r3, #25
 8005c0c:	f53f af2c 	bmi.w	8005a68 <_svfiprintf_r+0x28>
 8005c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c12:	b01d      	add	sp, #116	; 0x74
 8005c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4638      	mov	r0, r7
 8005c24:	f000 f87a 	bl	8005d1c <_printf_i>
 8005c28:	e7eb      	b.n	8005c02 <_svfiprintf_r+0x1c2>
 8005c2a:	bf00      	nop
 8005c2c:	08007638 	.word	0x08007638
 8005c30:	08007642 	.word	0x08007642
 8005c34:	00000000 	.word	0x00000000
 8005c38:	08005989 	.word	0x08005989
 8005c3c:	0800763e 	.word	0x0800763e

08005c40 <_printf_common>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	4616      	mov	r6, r2
 8005c46:	4699      	mov	r9, r3
 8005c48:	688a      	ldr	r2, [r1, #8]
 8005c4a:	690b      	ldr	r3, [r1, #16]
 8005c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bfb8      	it	lt
 8005c54:	4613      	movlt	r3, r2
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	b10a      	cbz	r2, 8005c66 <_printf_common+0x26>
 8005c62:	3301      	adds	r3, #1
 8005c64:	6033      	str	r3, [r6, #0]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	0699      	lsls	r1, r3, #26
 8005c6a:	bf42      	ittt	mi
 8005c6c:	6833      	ldrmi	r3, [r6, #0]
 8005c6e:	3302      	addmi	r3, #2
 8005c70:	6033      	strmi	r3, [r6, #0]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	f015 0506 	ands.w	r5, r5, #6
 8005c78:	d106      	bne.n	8005c88 <_printf_common+0x48>
 8005c7a:	f104 0a19 	add.w	sl, r4, #25
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	6832      	ldr	r2, [r6, #0]
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dc26      	bgt.n	8005cd6 <_printf_common+0x96>
 8005c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c8c:	1e13      	subs	r3, r2, #0
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	bf18      	it	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	0692      	lsls	r2, r2, #26
 8005c96:	d42b      	bmi.n	8005cf0 <_printf_common+0xb0>
 8005c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d01e      	beq.n	8005ce4 <_printf_common+0xa4>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	68e5      	ldr	r5, [r4, #12]
 8005caa:	6832      	ldr	r2, [r6, #0]
 8005cac:	f003 0306 	and.w	r3, r3, #6
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	bf08      	it	eq
 8005cb4:	1aad      	subeq	r5, r5, r2
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	6922      	ldr	r2, [r4, #16]
 8005cba:	bf0c      	ite	eq
 8005cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc0:	2500      	movne	r5, #0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bfc4      	itt	gt
 8005cc6:	1a9b      	subgt	r3, r3, r2
 8005cc8:	18ed      	addgt	r5, r5, r3
 8005cca:	2600      	movs	r6, #0
 8005ccc:	341a      	adds	r4, #26
 8005cce:	42b5      	cmp	r5, r6
 8005cd0:	d11a      	bne.n	8005d08 <_printf_common+0xc8>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e008      	b.n	8005ce8 <_printf_common+0xa8>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4638      	mov	r0, r7
 8005cde:	47c0      	blx	r8
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d103      	bne.n	8005cec <_printf_common+0xac>
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cec:	3501      	adds	r5, #1
 8005cee:	e7c6      	b.n	8005c7e <_printf_common+0x3e>
 8005cf0:	18e1      	adds	r1, r4, r3
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	2030      	movs	r0, #48	; 0x30
 8005cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfa:	4422      	add	r2, r4
 8005cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d04:	3302      	adds	r3, #2
 8005d06:	e7c7      	b.n	8005c98 <_printf_common+0x58>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0e6      	beq.n	8005ce4 <_printf_common+0xa4>
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7d9      	b.n	8005cce <_printf_common+0x8e>
	...

08005d1c <_printf_i>:
 8005d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	7e0f      	ldrb	r7, [r1, #24]
 8005d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d24:	2f78      	cmp	r7, #120	; 0x78
 8005d26:	4691      	mov	r9, r2
 8005d28:	4680      	mov	r8, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	469a      	mov	sl, r3
 8005d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d32:	d807      	bhi.n	8005d44 <_printf_i+0x28>
 8005d34:	2f62      	cmp	r7, #98	; 0x62
 8005d36:	d80a      	bhi.n	8005d4e <_printf_i+0x32>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	f000 80d8 	beq.w	8005eee <_printf_i+0x1d2>
 8005d3e:	2f58      	cmp	r7, #88	; 0x58
 8005d40:	f000 80a3 	beq.w	8005e8a <_printf_i+0x16e>
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d4c:	e03a      	b.n	8005dc4 <_printf_i+0xa8>
 8005d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d52:	2b15      	cmp	r3, #21
 8005d54:	d8f6      	bhi.n	8005d44 <_printf_i+0x28>
 8005d56:	a101      	add	r1, pc, #4	; (adr r1, 8005d5c <_printf_i+0x40>)
 8005d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005d45 	.word	0x08005d45
 8005d68:	08005d45 	.word	0x08005d45
 8005d6c:	08005d45 	.word	0x08005d45
 8005d70:	08005d45 	.word	0x08005d45
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d45 	.word	0x08005d45
 8005d7c:	08005d45 	.word	0x08005d45
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005ed5 	.word	0x08005ed5
 8005d8c:	08005df9 	.word	0x08005df9
 8005d90:	08005eb7 	.word	0x08005eb7
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ef7 	.word	0x08005ef7
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005ebf 	.word	0x08005ebf
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0a3      	b.n	8005f10 <_printf_i+0x1f4>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	6829      	ldr	r1, [r5, #0]
 8005dcc:	0606      	lsls	r6, r0, #24
 8005dce:	f101 0304 	add.w	r3, r1, #4
 8005dd2:	d50a      	bpl.n	8005dea <_printf_i+0xce>
 8005dd4:	680e      	ldr	r6, [r1, #0]
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	da03      	bge.n	8005de4 <_printf_i+0xc8>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	4276      	negs	r6, r6
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de4:	485e      	ldr	r0, [pc, #376]	; (8005f60 <_printf_i+0x244>)
 8005de6:	230a      	movs	r3, #10
 8005de8:	e019      	b.n	8005e1e <_printf_i+0x102>
 8005dea:	680e      	ldr	r6, [r1, #0]
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df2:	bf18      	it	ne
 8005df4:	b236      	sxthne	r6, r6
 8005df6:	e7ef      	b.n	8005dd8 <_printf_i+0xbc>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	6029      	str	r1, [r5, #0]
 8005e00:	0601      	lsls	r1, r0, #24
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0xec>
 8005e04:	681e      	ldr	r6, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0xf2>
 8005e08:	0646      	lsls	r6, r0, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0xe8>
 8005e0c:	881e      	ldrh	r6, [r3, #0]
 8005e0e:	4854      	ldr	r0, [pc, #336]	; (8005f60 <_printf_i+0x244>)
 8005e10:	2f6f      	cmp	r7, #111	; 0x6f
 8005e12:	bf0c      	ite	eq
 8005e14:	2308      	moveq	r3, #8
 8005e16:	230a      	movne	r3, #10
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1e:	6865      	ldr	r5, [r4, #4]
 8005e20:	60a5      	str	r5, [r4, #8]
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	bfa2      	ittt	ge
 8005e26:	6821      	ldrge	r1, [r4, #0]
 8005e28:	f021 0104 	bicge.w	r1, r1, #4
 8005e2c:	6021      	strge	r1, [r4, #0]
 8005e2e:	b90e      	cbnz	r6, 8005e34 <_printf_i+0x118>
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	d04d      	beq.n	8005ed0 <_printf_i+0x1b4>
 8005e34:	4615      	mov	r5, r2
 8005e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e3e:	5dc7      	ldrb	r7, [r0, r7]
 8005e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e44:	4637      	mov	r7, r6
 8005e46:	42bb      	cmp	r3, r7
 8005e48:	460e      	mov	r6, r1
 8005e4a:	d9f4      	bls.n	8005e36 <_printf_i+0x11a>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10b      	bne.n	8005e68 <_printf_i+0x14c>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07de      	lsls	r6, r3, #31
 8005e54:	d508      	bpl.n	8005e68 <_printf_i+0x14c>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	bfde      	ittt	le
 8005e5e:	2330      	movle	r3, #48	; 0x30
 8005e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e68:	1b52      	subs	r2, r2, r5
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	464b      	mov	r3, r9
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fee2 	bl	8005c40 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14c      	bne.n	8005f1a <_printf_i+0x1fe>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b004      	add	sp, #16
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	4835      	ldr	r0, [pc, #212]	; (8005f60 <_printf_i+0x244>)
 8005e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e90:	6829      	ldr	r1, [r5, #0]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e98:	6029      	str	r1, [r5, #0]
 8005e9a:	061d      	lsls	r5, r3, #24
 8005e9c:	d514      	bpl.n	8005ec8 <_printf_i+0x1ac>
 8005e9e:	07df      	lsls	r7, r3, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea6:	6023      	strmi	r3, [r4, #0]
 8005ea8:	b91e      	cbnz	r6, 8005eb2 <_printf_i+0x196>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f023 0320 	bic.w	r3, r3, #32
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	e7b0      	b.n	8005e18 <_printf_i+0xfc>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f043 0320 	orr.w	r3, r3, #32
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	2378      	movs	r3, #120	; 0x78
 8005ec0:	4828      	ldr	r0, [pc, #160]	; (8005f64 <_printf_i+0x248>)
 8005ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ec6:	e7e3      	b.n	8005e90 <_printf_i+0x174>
 8005ec8:	0659      	lsls	r1, r3, #25
 8005eca:	bf48      	it	mi
 8005ecc:	b2b6      	uxthmi	r6, r6
 8005ece:	e7e6      	b.n	8005e9e <_printf_i+0x182>
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	e7bb      	b.n	8005e4c <_printf_i+0x130>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	6826      	ldr	r6, [r4, #0]
 8005ed8:	6961      	ldr	r1, [r4, #20]
 8005eda:	1d18      	adds	r0, r3, #4
 8005edc:	6028      	str	r0, [r5, #0]
 8005ede:	0635      	lsls	r5, r6, #24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0x1cc>
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0x1d2>
 8005ee8:	0670      	lsls	r0, r6, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0x1c8>
 8005eec:	8019      	strh	r1, [r3, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	e7ba      	b.n	8005e6c <_printf_i+0x150>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	2100      	movs	r1, #0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7fa f96c 	bl	80001e0 <memchr>
 8005f08:	b108      	cbz	r0, 8005f0e <_printf_i+0x1f2>
 8005f0a:	1b40      	subs	r0, r0, r5
 8005f0c:	6060      	str	r0, [r4, #4]
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	2300      	movs	r3, #0
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	e7a8      	b.n	8005e6c <_printf_i+0x150>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	47d0      	blx	sl
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0ab      	beq.n	8005e80 <_printf_i+0x164>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	079b      	lsls	r3, r3, #30
 8005f2c:	d413      	bmi.n	8005f56 <_printf_i+0x23a>
 8005f2e:	68e0      	ldr	r0, [r4, #12]
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	4298      	cmp	r0, r3
 8005f34:	bfb8      	it	lt
 8005f36:	4618      	movlt	r0, r3
 8005f38:	e7a4      	b.n	8005e84 <_printf_i+0x168>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d09b      	beq.n	8005e80 <_printf_i+0x164>
 8005f48:	3501      	adds	r5, #1
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	1a5b      	subs	r3, r3, r1
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dcf2      	bgt.n	8005f3a <_printf_i+0x21e>
 8005f54:	e7eb      	b.n	8005f2e <_printf_i+0x212>
 8005f56:	2500      	movs	r5, #0
 8005f58:	f104 0619 	add.w	r6, r4, #25
 8005f5c:	e7f5      	b.n	8005f4a <_printf_i+0x22e>
 8005f5e:	bf00      	nop
 8005f60:	08007649 	.word	0x08007649
 8005f64:	0800765a 	.word	0x0800765a

08005f68 <memmove>:
 8005f68:	4288      	cmp	r0, r1
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	eb01 0402 	add.w	r4, r1, r2
 8005f70:	d902      	bls.n	8005f78 <memmove+0x10>
 8005f72:	4284      	cmp	r4, r0
 8005f74:	4623      	mov	r3, r4
 8005f76:	d807      	bhi.n	8005f88 <memmove+0x20>
 8005f78:	1e43      	subs	r3, r0, #1
 8005f7a:	42a1      	cmp	r1, r4
 8005f7c:	d008      	beq.n	8005f90 <memmove+0x28>
 8005f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f86:	e7f8      	b.n	8005f7a <memmove+0x12>
 8005f88:	4402      	add	r2, r0
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	428a      	cmp	r2, r1
 8005f8e:	d100      	bne.n	8005f92 <memmove+0x2a>
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f9a:	e7f7      	b.n	8005f8c <memmove+0x24>

08005f9c <_free_r>:
 8005f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d044      	beq.n	800602c <_free_r+0x90>
 8005fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f1a1 0404 	sub.w	r4, r1, #4
 8005fae:	bfb8      	it	lt
 8005fb0:	18e4      	addlt	r4, r4, r3
 8005fb2:	f000 f913 	bl	80061dc <__malloc_lock>
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <_free_r+0x94>)
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	b933      	cbnz	r3, 8005fcc <_free_r+0x30>
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	b003      	add	sp, #12
 8005fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fc8:	f000 b90e 	b.w	80061e8 <__malloc_unlock>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d908      	bls.n	8005fe2 <_free_r+0x46>
 8005fd0:	6825      	ldr	r5, [r4, #0]
 8005fd2:	1961      	adds	r1, r4, r5
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf01      	itttt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	1949      	addeq	r1, r1, r5
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	e7ed      	b.n	8005fbe <_free_r+0x22>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b10b      	cbz	r3, 8005fec <_free_r+0x50>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x46>
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	1855      	adds	r5, r2, r1
 8005ff0:	42a5      	cmp	r5, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x70>
 8005ff4:	6824      	ldr	r4, [r4, #0]
 8005ff6:	4421      	add	r1, r4
 8005ff8:	1854      	adds	r4, r2, r1
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	d1e0      	bne.n	8005fc2 <_free_r+0x26>
 8006000:	681c      	ldr	r4, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	4421      	add	r1, r4
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	e7da      	b.n	8005fc2 <_free_r+0x26>
 800600c:	d902      	bls.n	8006014 <_free_r+0x78>
 800600e:	230c      	movs	r3, #12
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	e7d6      	b.n	8005fc2 <_free_r+0x26>
 8006014:	6825      	ldr	r5, [r4, #0]
 8006016:	1961      	adds	r1, r4, r5
 8006018:	428b      	cmp	r3, r1
 800601a:	bf04      	itt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1949      	addeq	r1, r1, r5
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6054      	str	r4, [r2, #4]
 800602a:	e7ca      	b.n	8005fc2 <_free_r+0x26>
 800602c:	b003      	add	sp, #12
 800602e:	bd30      	pop	{r4, r5, pc}
 8006030:	20009d10 	.word	0x20009d10

08006034 <sbrk_aligned>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4e0e      	ldr	r6, [pc, #56]	; (8006070 <sbrk_aligned+0x3c>)
 8006038:	460c      	mov	r4, r1
 800603a:	6831      	ldr	r1, [r6, #0]
 800603c:	4605      	mov	r5, r0
 800603e:	b911      	cbnz	r1, 8006046 <sbrk_aligned+0x12>
 8006040:	f000 f8bc 	bl	80061bc <_sbrk_r>
 8006044:	6030      	str	r0, [r6, #0]
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f8b7 	bl	80061bc <_sbrk_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d00a      	beq.n	8006068 <sbrk_aligned+0x34>
 8006052:	1cc4      	adds	r4, r0, #3
 8006054:	f024 0403 	bic.w	r4, r4, #3
 8006058:	42a0      	cmp	r0, r4
 800605a:	d007      	beq.n	800606c <sbrk_aligned+0x38>
 800605c:	1a21      	subs	r1, r4, r0
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f8ac 	bl	80061bc <_sbrk_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d101      	bne.n	800606c <sbrk_aligned+0x38>
 8006068:	f04f 34ff 	mov.w	r4, #4294967295
 800606c:	4620      	mov	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	20009d14 	.word	0x20009d14

08006074 <_malloc_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4607      	mov	r7, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d905      	bls.n	800609c <_malloc_r+0x28>
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	2600      	movs	r6, #0
 8006096:	4630      	mov	r0, r6
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	4e2e      	ldr	r6, [pc, #184]	; (8006158 <_malloc_r+0xe4>)
 800609e:	f000 f89d 	bl	80061dc <__malloc_lock>
 80060a2:	6833      	ldr	r3, [r6, #0]
 80060a4:	461c      	mov	r4, r3
 80060a6:	bb34      	cbnz	r4, 80060f6 <_malloc_r+0x82>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4638      	mov	r0, r7
 80060ac:	f7ff ffc2 	bl	8006034 <sbrk_aligned>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	4604      	mov	r4, r0
 80060b4:	d14d      	bne.n	8006152 <_malloc_r+0xde>
 80060b6:	6834      	ldr	r4, [r6, #0]
 80060b8:	4626      	mov	r6, r4
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d140      	bne.n	8006140 <_malloc_r+0xcc>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	4631      	mov	r1, r6
 80060c2:	4638      	mov	r0, r7
 80060c4:	eb04 0803 	add.w	r8, r4, r3
 80060c8:	f000 f878 	bl	80061bc <_sbrk_r>
 80060cc:	4580      	cmp	r8, r0
 80060ce:	d13a      	bne.n	8006146 <_malloc_r+0xd2>
 80060d0:	6821      	ldr	r1, [r4, #0]
 80060d2:	3503      	adds	r5, #3
 80060d4:	1a6d      	subs	r5, r5, r1
 80060d6:	f025 0503 	bic.w	r5, r5, #3
 80060da:	3508      	adds	r5, #8
 80060dc:	2d0c      	cmp	r5, #12
 80060de:	bf38      	it	cc
 80060e0:	250c      	movcc	r5, #12
 80060e2:	4629      	mov	r1, r5
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ffa5 	bl	8006034 <sbrk_aligned>
 80060ea:	3001      	adds	r0, #1
 80060ec:	d02b      	beq.n	8006146 <_malloc_r+0xd2>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	442b      	add	r3, r5
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	e00e      	b.n	8006114 <_malloc_r+0xa0>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	1b52      	subs	r2, r2, r5
 80060fa:	d41e      	bmi.n	800613a <_malloc_r+0xc6>
 80060fc:	2a0b      	cmp	r2, #11
 80060fe:	d916      	bls.n	800612e <_malloc_r+0xba>
 8006100:	1961      	adds	r1, r4, r5
 8006102:	42a3      	cmp	r3, r4
 8006104:	6025      	str	r5, [r4, #0]
 8006106:	bf18      	it	ne
 8006108:	6059      	strne	r1, [r3, #4]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	bf08      	it	eq
 800610e:	6031      	streq	r1, [r6, #0]
 8006110:	5162      	str	r2, [r4, r5]
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	4638      	mov	r0, r7
 8006116:	f104 060b 	add.w	r6, r4, #11
 800611a:	f000 f865 	bl	80061e8 <__malloc_unlock>
 800611e:	f026 0607 	bic.w	r6, r6, #7
 8006122:	1d23      	adds	r3, r4, #4
 8006124:	1af2      	subs	r2, r6, r3
 8006126:	d0b6      	beq.n	8006096 <_malloc_r+0x22>
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	50a3      	str	r3, [r4, r2]
 800612c:	e7b3      	b.n	8006096 <_malloc_r+0x22>
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	bf0c      	ite	eq
 8006134:	6032      	streq	r2, [r6, #0]
 8006136:	605a      	strne	r2, [r3, #4]
 8006138:	e7ec      	b.n	8006114 <_malloc_r+0xa0>
 800613a:	4623      	mov	r3, r4
 800613c:	6864      	ldr	r4, [r4, #4]
 800613e:	e7b2      	b.n	80060a6 <_malloc_r+0x32>
 8006140:	4634      	mov	r4, r6
 8006142:	6876      	ldr	r6, [r6, #4]
 8006144:	e7b9      	b.n	80060ba <_malloc_r+0x46>
 8006146:	230c      	movs	r3, #12
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4638      	mov	r0, r7
 800614c:	f000 f84c 	bl	80061e8 <__malloc_unlock>
 8006150:	e7a1      	b.n	8006096 <_malloc_r+0x22>
 8006152:	6025      	str	r5, [r4, #0]
 8006154:	e7de      	b.n	8006114 <_malloc_r+0xa0>
 8006156:	bf00      	nop
 8006158:	20009d10 	.word	0x20009d10

0800615c <_realloc_r>:
 800615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	4680      	mov	r8, r0
 8006162:	4614      	mov	r4, r2
 8006164:	460e      	mov	r6, r1
 8006166:	b921      	cbnz	r1, 8006172 <_realloc_r+0x16>
 8006168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	4611      	mov	r1, r2
 800616e:	f7ff bf81 	b.w	8006074 <_malloc_r>
 8006172:	b92a      	cbnz	r2, 8006180 <_realloc_r+0x24>
 8006174:	f7ff ff12 	bl	8005f9c <_free_r>
 8006178:	4625      	mov	r5, r4
 800617a:	4628      	mov	r0, r5
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	f000 f838 	bl	80061f4 <_malloc_usable_size_r>
 8006184:	4284      	cmp	r4, r0
 8006186:	4607      	mov	r7, r0
 8006188:	d802      	bhi.n	8006190 <_realloc_r+0x34>
 800618a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800618e:	d812      	bhi.n	80061b6 <_realloc_r+0x5a>
 8006190:	4621      	mov	r1, r4
 8006192:	4640      	mov	r0, r8
 8006194:	f7ff ff6e 	bl	8006074 <_malloc_r>
 8006198:	4605      	mov	r5, r0
 800619a:	2800      	cmp	r0, #0
 800619c:	d0ed      	beq.n	800617a <_realloc_r+0x1e>
 800619e:	42bc      	cmp	r4, r7
 80061a0:	4622      	mov	r2, r4
 80061a2:	4631      	mov	r1, r6
 80061a4:	bf28      	it	cs
 80061a6:	463a      	movcs	r2, r7
 80061a8:	f7ff fbb8 	bl	800591c <memcpy>
 80061ac:	4631      	mov	r1, r6
 80061ae:	4640      	mov	r0, r8
 80061b0:	f7ff fef4 	bl	8005f9c <_free_r>
 80061b4:	e7e1      	b.n	800617a <_realloc_r+0x1e>
 80061b6:	4635      	mov	r5, r6
 80061b8:	e7df      	b.n	800617a <_realloc_r+0x1e>
	...

080061bc <_sbrk_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	; (80061d8 <_sbrk_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fa fe02 	bl	8000dd0 <_sbrk>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_sbrk_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_sbrk_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20009d18 	.word	0x20009d18

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_lock+0x8>)
 80061de:	f000 b811 	b.w	8006204 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20009d1c 	.word	0x20009d1c

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f000 b80c 	b.w	8006206 <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20009d1c 	.word	0x20009d1c

080061f4 <_malloc_usable_size_r>:
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f18      	subs	r0, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfbc      	itt	lt
 80061fe:	580b      	ldrlt	r3, [r1, r0]
 8006200:	18c0      	addlt	r0, r0, r3
 8006202:	4770      	bx	lr

08006204 <__retarget_lock_acquire_recursive>:
 8006204:	4770      	bx	lr

08006206 <__retarget_lock_release_recursive>:
 8006206:	4770      	bx	lr

08006208 <_init>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr

08006214 <_fini>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr
